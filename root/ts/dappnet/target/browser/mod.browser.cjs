"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/mod.browser.ts
var mod_browser_exports = {};
__export(mod_browser_exports, {
  EventSignature: () => EventSignature,
  ExternalPureSignature: () => ExternalPureSignature,
  ExternalSignature: () => ExternalSignature,
  ExternalViewSignature: () => ExternalViewSignature,
  Selector: () => Selector,
  Signature: () => Signature,
  SignatureBuilder: () => SignatureBuilder
});
module.exports = __toCommonJS(mod_browser_exports);

// src/vm/signature/event_signature.ts
var EventSignature = (() => {
  {
    return { from };
  }
  function from(selector) {
    return `event ${selector}`;
  }
})();

// src/vm/signature/util/_to_string.ts
function toString(...data) {
  let result = "";
  for (let i = 0n; i < data.length; i++) {
    if (i !== 0n) result = ", ";
    result += data[Number(i)];
  }
  return result;
}

// src/vm/signature/external_pure_signature.ts
var ExternalPureSignature = (() => {
  {
    return { from };
  }
  function from(selector, ...data) {
    return `function ${selector} external pure returns (${toString(...data)})`;
  }
})();

// src/vm/signature/external_signature.ts
var ExternalSignature = (() => {
  {
    return { from };
  }
  function from(selector) {
    return `function ${selector} external`;
  }
})();

// src/vm/signature/external_view_signature.ts
var ExternalViewSignature = (() => {
  {
    return { from };
  }
  function from(selector, ...data) {
    return `function ${selector} external view returns (${toString(...data)})`;
  }
})();

// src/vm/signature/selector.ts
var Selector = (() => {
  {
    return { from };
  }
  function from(name, ...data) {
    return `${name}(${toString(...data)})`;
  }
})();

// src/vm/signature/signature_builder.ts
var import_reliq = require("reliq");
var import_reliq2 = require("reliq");
var import_reliq3 = require("reliq");
var import_reliq4 = require("reliq");
function SignatureBuilder() {
  let _this;
  let _name;
  let _type;
  let _visibility;
  let _payload;
  let _returns;
  {
    _this = {
      name,
      event,
      external,
      pure,
      view,
      payload,
      returns,
      build
    };
    _name = import_reliq2.None;
    _type = import_reliq2.None;
    _visibility = import_reliq2.None;
    _payload = import_reliq2.None;
    _returns = import_reliq2.None;
    return _this;
  }
  function name(name2) {
    _name = (0, import_reliq.Some)(name2);
    return _this;
  }
  function event() {
    _type = (0, import_reliq.Some)("event");
    return _this;
  }
  function external() {
    _type = (0, import_reliq.Some)("external");
    return _this;
  }
  function pure() {
    _visibility = (0, import_reliq.Some)("pure");
    return _this;
  }
  function view() {
    _visibility = (0, import_reliq.Some)("view");
    return _this;
  }
  function payload(...data) {
    _payload = (0, import_reliq.Some)(data);
    return _this;
  }
  function returns(...data) {
    _returns = (0, import_reliq.Some)(data);
    return _this;
  }
  function build() {
    if (_name.none()) return (0, import_reliq4.Err)("SIGNATURE_BUILDER.ERR_MISSING_NAME");
    let name2 = _name.unwrap();
    if (_type.none()) return (0, import_reliq4.Err)("SIGNATURE_BUILDER.ERR_MISSING_TYPE");
    let type = _type.unwrap();
    if (type === "event") {
      let selector = Selector.from(name2, ..._payload.unwrapOr([]));
      let signature = EventSignature.from(selector);
      return (0, import_reliq3.Ok)(signature);
    }
    if (type === "external") {
      let selector = Selector.from(name2, ..._payload.unwrapOr([]));
      if (_visibility.none()) {
        let signature = ExternalSignature.from(selector);
        return (0, import_reliq3.Ok)(signature);
      }
      let visibility = _visibility.unwrap();
      if (visibility === "pure") {
        let signature = ExternalPureSignature.from(selector, ..._returns.unwrapOr([]));
        return (0, import_reliq3.Ok)(signature);
      }
      if (visibility === "view") {
        let signature = ExternalViewSignature.from(selector, ..._returns.unwrapOr([]));
        return (0, import_reliq3.Ok)(signature);
      }
    }
    return (0, import_reliq4.Err)("SIGNATURE_BUILDER.ERR_MALFORMED_SIGNATURE");
  }
}

// src/vm/signature/signature.ts
var import_reliq5 = require("reliq");
var import_reliq6 = require("reliq");
var import_reliq7 = require("reliq");
var Signature = (() => {
  {
    return { nameOf };
  }
  function nameOf(signature) {
    let shards = signature.split(" ");
    if (shards.length === 0) return import_reliq6.None;
    let string = (0, import_reliq7.flag)(shards.at(1));
    if (string.none()) return string;
    let string$0 = string.unwrap();
    let result = (0, import_reliq7.flag)(
      string$0.split("(").at(0)
    );
    if (result.none()) return result;
    let result$0 = result.unwrap();
    return (0, import_reliq5.Some)(result$0);
  }
})();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  EventSignature,
  ExternalPureSignature,
  ExternalSignature,
  ExternalViewSignature,
  Selector,
  Signature,
  SignatureBuilder
});
//# sourceMappingURL=data:application/json;base64,