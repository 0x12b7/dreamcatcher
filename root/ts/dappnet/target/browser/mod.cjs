"use strict";var e,r=Object.defineProperty,n=Object.getOwnPropertyDescriptor,t=Object.getOwnPropertyNames,a=Object.prototype.hasOwnProperty,i={};((e,n)=>{for(var t in n)r(e,t,{get:n[t],enumerable:!0})})(i,{Wallet:()=>T}),module.exports=(e=i,((e,i,u,o)=>{if(i&&"object"==typeof i||"function"==typeof i)for(let E of t(i))a.call(e,E)||E===u||r(e,E,{get:()=>i[E],enumerable:!(o=n(i,E))||o.enumerable});return e})(r({},"__esModule",{value:!0}),e));var u,o=require("ethers"),E=require("ethers"),N=require("ethers"),s=require("ethers"),R=(require("ethers"),require("reliq")),l=(require("reliq"),require("reliq"),require("reliq")),c=require("reliq"),w=require("reliq"),A=require("reliq"),f=require("reliq"),L=require("reliq"),p=require("reliq"),_=require("reliq");async function T(){let e,r,n,t=c.None;return(await async function(){if(void 0===window)return(0,A.Err)({code:"WALLET.ERR_UNSUPPORTED_OPERATION",data:c.None,message:(0,l.Some)("Wallet: ..."),reason:c.None,transaction:c.None});if("ethereum"in window==!1)return(0,A.Err)({code:"WALLET.ERR_UNSUPPORTED_OPERATION",data:c.None,message:(0,l.Some)("Wallet: ..."),reason:c.None,transaction:c.None});let e=g((0,p.wrap)((()=>new s.BrowserProvider(window.ethereum))));if(e.err())return e;let r=e.unwrap(),n=await g((0,_.wrapAsync)((async()=>r.send("eth_accounts",[]))));if(n.err())return n;let t=n.unwrap();if(t.length>0)return(0,w.Ok)([r,t]);let a=await g((0,_.wrapAsync)((async()=>r.send("eth_requestAccounts",[]))));if(a.err())return a;let i=a.unwrap();return i.length>0?(0,w.Ok)([r,i]):(0,A.Err)({code:"WALLET.ERR_UNCONFIGURED_NAME",data:c.None,message:c.None,reason:c.None,transaction:c.None})}()).map((([t,o])=>(r=t,n=o,e={use:a,connected:i,address:u,nonce:L,query:O,touch:S,deploy:m})));async function a(n){let t=await g((0,_.wrapAsync)((async()=>await r.getSigner("string"==typeof n?n:Number(n)))));return t.err()?t:(0,w.Ok)(e)}function i(e){return e&&t.some()?new Promise((r=>{let n=t.unwrap();g((0,_.wrapAsync)((async()=>await n.getAddress()))).then((n=>{if(!n.ok())return n;{let t=n.unwrap();r((0,w.Ok)(t===e))}}))})):t.some()}async function u(){return await g((0,_.wrapAsync)((async()=>await(await r.getSigner()).getAddress())))}async function L(){return(await g((0,_.wrapAsync)((async()=>(await r.getSigner()).getNonce())))).map((e=>BigInt(e)))}async function O(e){let n;if(t.none()){let e=await g((0,_.wrapAsync)((async()=>await r.getSigner())));if(e.err())return e;let t=e.unwrap();n=t}else n=t.unwrap();let a=g((0,p.wrap)((()=>new E.Contract(e.to,[e.signature],n))));if(a.err())return a;let i=a.unwrap(),u=g((0,p.wrap)((()=>i.getFunction(e.signature))));if(u.err())return u;let o=u.unwrap(),N=await g((0,_.wrapAsync)((async()=>(0,R.Unsafe)(await o(...e.payload??[])))));if(N.err())return N;let s=N.unwrap();return(0,w.Ok)(s)}async function S(e){let n;if(t.none()){let e=await g((0,_.wrapAsync)((async()=>await r.getSigner())));if(e.err())return e;let t=e.unwrap();n=t}else n=t.unwrap();let a=await u();if(a.err())return a;let i=a.unwrap(),o=await L();if(o.err())return o;let E=o.unwrap(),s=g((0,p.wrap)((()=>new N.Interface([e.signature]))));if(s.err())return s;let R=s.unwrap(),O=T.Signature.nameOf(e.signature);if(O.none())return(0,A.Err)({code:"WALLET.ERR_MALFORMED_SIGNATURE",data:c.None,message:c.None,reason:c.None,transaction:c.None});let S=O.unwrap(),m=g((0,p.wrap)((()=>R.encodeFunctionData(S,e.payload))));if(m.err())return m;let I=m.unwrap(),y=e.gasPrice?f.Fpv.Calculator.unwrap(e.gasPrice):0n,U=e.gasLimit?f.Fpv.Calculator.unwrap(e.gasLimit):0n,d=await g((0,_.wrapAsync)((async()=>await n.sendTransaction({from:i,to:e.to,nonce:Number(E),gasPrice:y,gasLimit:U,data:I}))));if(d.err())return d;let D=d.unwrap();if(null===D)return(0,A.Err)({code:"WALLET.ERR_INVALID_RESPONSE",data:c.None,message:c.None,transaction:c.None,reason:c.None});let P=await g((0,_.wrapAsync)((async()=>await D.wait(Number(e.confirmations),Number(e.timeout)))));if(P.err())return P;let W=P.unwrap();return null===W?(0,w.Ok)(c.None):(0,w.Ok)((0,l.Some)(W))}async function m(e){let n;if(t.none()){let e=await g((0,_.wrapAsync)((async()=>await r.getSigner())));if(e.err())return e;let t=e.unwrap();n=t}else n=t.unwrap();let a=g((0,p.wrap)((()=>new o.ContractFactory(e.abi,e.bytecode,n))));if(a.err())return a;let i=a.unwrap(),u=await g((0,_.wrapAsync)((async()=>await i.deploy(e.payload))));if(u.err())return u;let E=u.unwrap(),N=await g((0,_.wrapAsync)((async()=>await E.getAddress())));if(N.err())return N;let s=N.unwrap();return(0,w.Ok)(s)}function g(e){if("then"in e){return e.then((e=>g(e)))}if("ok"in e){return e.mapErr((e=>g(e)))}let r=e.inspect();if(null==r||"object"!=typeof r||!("code"in r)||"string"!=typeof r.code)return{code:"WALLET.ERR_UNKNOWN",data:c.None,message:c.None,reason:c.None,transaction:c.None};let n={UNKNOWN_ERROR:"WALLET.ERR_UNKNOWN",NOT_IMPLEMENTED:"WALLET.ERR_NOT_IMPLEMENTED",UNSUPPORTED_OPERATION:"WALLET.ERR_UNSUPPORTED_OPERATION",NETWORK_ERROR:"WALLET.ERR_NETWORK_FAULT",SERVER_ERROR:"WALLET.ERR_SERVER_FAULT",TIMEOUT:"WALLET.ERR_TIMEOUT",BAD_DATA:"WALLET.ERR_BAD_DATA",CANCELLED:"WALLET.ERR_CANCELLED",BUFFEER_OVERRUN:"WALLET.ERR_BUFFER_OVERRUN",NUMERIC_FAULT:"WALLET.ERR_NUMERIC_FAULT",INVALID_ARGUMENT:"WALLET.ERR_INVALID_ARGUMENT",INVALID_RESPONSE:"WALLET.ERR_INVALID_RESPONSE",MISSSING_ARGUMENT:"WALLET.ERR_MISSING_ARGUMENT",UNEXPECTED_ARGUMENT:"WALLET.ERR_UNEXPECTED_ARGUMENT",CALL_EXCEPTION:"WALLET.ERR_CALL_EXCEPTION",INSUFFICIEENT_FUNDS:"WALLET.ERR_INSUFFICIENT_FUNDS",NONCE_EXPIRED:"WALLET.ERR_NONCE_EXPIRED",REPLACEMENT_UNDERPRICED:"WALLET.ERR_REPLACEMENT_UNDERPRICED",TRANSACTION_REPLACED:"WALLET.ERR_TRANSACTION_REPLACED",UNCONFIGURED_NAME:"WALLET.ERR_UNCONFIGURED_NAME",OFFCHAIN_FAULT:"WALLET.ERR_OFFCHAIN_FAULT",ACTION_REJECTED:"WALLET.ERR_ACTION_REJECTED"}[r.code]??"WALLET.ERR_UNKNOWN",t=c.None,a=c.None,i=c.None,u=c.None;return"data"in r&&(t=(0,l.Some)(r.data)),"message"in r&&(t=(0,l.Some)(r.message)),"transaction"in r&&(t=(0,l.Some)(r.transaction)),"reason"in r&&(t=(0,l.Some)(r.reason)),{code:n,data:t,message:a,transaction:i,reason:u}}}(u=T||(T={})).Signature={nameOf:function(e){let r=e.split(" ");if(0===r.length)return c.None;let n=(0,L.flag)(r.at(1));if(n.none())return n;let t=n.unwrap(),a=(0,L.flag)(t.split("(").at(0));if(a.none())return a;let i=a.unwrap();return(0,l.Some)(i)}},u.SignatureBuilder=function(){let e,r,n,t,a,i;return e={name:function(n){return r=(0,l.Some)(n),e},event:function(){return n=(0,l.Some)("event"),e},external:function(){return n=(0,l.Some)("external"),e},pure:function(){return t=(0,l.Some)("pure"),e},view:function(){return t=(0,l.Some)("view"),e},payload:function(...r){return a=(0,l.Some)(r),e},returns:function(...r){return i=(0,l.Some)(r),e},build:function(){if(r.none())return(0,A.Err)("SIGNATURE_BUILDER.ERR_MISSING_NAME");let e=r.unwrap();if(n.none())return(0,A.Err)("SIGNATURE_BUILDER.ERR_MISSING_TYPE");let o=n.unwrap();if("event"===o){let r=u.Selector.from(e,...a.unwrapOr([])),n=u.EventSignature.from(r);return(0,w.Ok)(n)}if("external"===o){let r=u.Selector.from(e,...a.unwrapOr([]));if(t.none()){let e=u.ExternalSignature.from(r);return(0,w.Ok)(e)}let n=t.unwrap();if("pure"===n){let e=u.ExternalPureSignature.from(r,...i.unwrapOr([]));return(0,w.Ok)(e)}if("view"===n){let e=u.ExternalViewSignature.from(r,...i.unwrapOr([]));return(0,w.Ok)(e)}}return(0,A.Err)("SIGNATURE_BUILDER.ERR_MALFORMED_SIGNATURE")}},r=c.None,n=c.None,t=c.None,a=c.None,i=c.None,e},u.ExternalSignature={from:function(e){return`function ${e} external`}},u.ExternalViewSignature={from:function(e,...r){return`function ${e} external view returns (${u.Data.serialize(...r)})`}},u.ExternalPureSignature={from:function(e,...r){return`function ${e} external pure returns (${u.Data.serialize(...r)})`}},u.EventSignature={from:function(e){return`event ${e}`}},u.Selector={from:function(e,...r){return`${e}(${u.Data.serialize(...r)})`}},u.Data={serialize:function(...e){let r="";for(let n=0n;n<e.length;n++)0n!==n&&(r=", "),r+=e[Number(n)];return r}};//# sourceMappingURL=data:application/json;base64,