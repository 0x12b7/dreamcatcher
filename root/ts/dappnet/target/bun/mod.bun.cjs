"use strict";var e,r=Object.create,n=Object.defineProperty,t=Object.getOwnPropertyDescriptor,u=Object.getOwnPropertyNames,a=Object.getPrototypeOf,i=Object.prototype.hasOwnProperty,o=(e,r,a,o)=>{if(r&&"object"==typeof r||"function"==typeof r)for(let E of u(r))i.call(e,E)||E===a||n(e,E,{get:()=>r[E],enumerable:!(o=t(r,E))||o.enumerable});return e},E={};((e,r)=>{for(var t in r)n(e,t,{get:r[t],enumerable:!0})})(E,{Compiler:()=>q,EventSignature:()=>y,ExternalPureSignature:()=>C,ExternalSignature:()=>L,ExternalViewSignature:()=>P,Selector:()=>V,Signature:()=>B,SignatureBuilder:()=>b}),module.exports=(e=E,o(n({},"__esModule",{value:!0}),e));var l,f=((e,t,u)=>(u=null!=e?r(a(e)):{},o(!t&&e&&e.__esModule?u:n(u,"default",{value:e,enumerable:!0}),e)))(require("solc"),1),c=(require("reliq"),require("reliq")),R=(require("reliq"),require("ethers")),N=require("ethers"),p=require("ethers"),w=require("ethers"),s=require("ethers"),_=(require("reliq"),require("reliq"),require("reliq")),S=require("reliq"),m=require("reliq"),O=require("reliq"),A=require("reliq"),I=require("reliq"),d=require("reliq"),M=require("reliq"),g=require("reliq");function T(e){let r;{let t=n((0,d.wrap)((()=>new s.JsonRpcProvider(e))));return t.err()?t:(r=t.unwrap(),(0,m.Ok)({query:async function(e){let t=n((0,d.wrap)((()=>new w.Wallet(e.privateKey,r))));if(t.err())return t;let u=t.unwrap(),a=n((0,d.wrap)((()=>new N.Contract(e.to,[e.signature],u))));if(a.err())return a;let i=a.unwrap(),o=n((0,d.wrap)((()=>i.getFunction(e.signature))));if(o.err())return o;let E=o.unwrap(),l=await n((0,M.wrapAsync)((async()=>(0,A.Unsafe)(await E(...e.payload??[])))));if(l.err())return l;let f=l.unwrap();return(0,m.Ok)(f)},touch:async function(e){let t=n((0,d.wrap)((()=>new w.Wallet(e.privateKey,r))));if(t.err())return t;let u=t.unwrap(),a=await n((0,M.wrapAsync)((async()=>await u.getAddress())));if(a.err())return a;let i=a.unwrap(),o=await n((0,M.wrapAsync)((async()=>BigInt(await u.getNonce()))));if(o.err())return o;let E=o.unwrap(),l=n((0,d.wrap)((()=>new p.Interface([e.signature]))));if(l.err())return l;let f=l.unwrap(),c=T.SignatureHandler.nameOf(e.signature);if(c.none())return(0,O.Err)({code:"EVM.ERR_MALFORMED_SIGNATURE",data:S.None,message:S.None,reason:S.None,transaction:S.None});let R=c.unwrap(),N=n((0,d.wrap)((()=>f.encodeFunctionData(R,e.payload))));if(N.err())return N;let s=N.unwrap(),A=e.gasPrice?I.Fpv.Calculator.unwrap(e.gasPrice):0n,g=e.gasLimit?I.Fpv.Calculator.unwrap(e.gasLimit):0n,U=await n((0,M.wrapAsync)((async()=>await u.sendTransaction({from:i,to:e.to,nonce:Number(E),gasPrice:A,gasLimit:g,data:s}))));if(U.err())return U;let q=U.unwrap();if(null===q)return(0,O.Err)({code:"EVM.ERR_INVALID_RESPONSE",data:S.None,message:S.None,transaction:S.None,reason:S.None});let y=await n((0,M.wrapAsync)((async()=>await q.wait(Number(e.confirmations),Number(e.timeout)))));if(y.err())return y;let D=y.unwrap();return null===D?(0,m.Ok)(S.None):(0,m.Ok)((0,_.Some)(D))},deploy:async function(e){let t=n((0,d.wrap)((()=>new w.Wallet(e.privateKey,r))));if(t.err())return t;let u=t.unwrap(),a=n((0,d.wrap)((()=>new R.ContractFactory(e.abi,e.bytecode,u))));if(a.err())return a;let i=a.unwrap(),o=await n((0,M.wrapAsync)((async()=>await i.deploy(e.payload))));if(o.err())return o;let E=o.unwrap(),l=await n((0,M.wrapAsync)((async()=>await E.getAddress())));if(l.err())return l;let f=l.unwrap();return(0,m.Ok)(f)}}))}function n(e){if("then"in e){return e.then((e=>n(e)))}if("ok"in e){return e.mapErr((e=>n(e)))}let r=e.inspect();if(null==r||"object"!=typeof r||!("code"in r)||"string"!=typeof r.code)return{code:"EVM.ERR_UNKNOWN",data:S.None,message:S.None,transaction:S.None,reason:S.None};let t="UNKNOWN_ERROR"===r.code?"EVM.ERR_UNKNOWN":"NOT_IMPLEMENTED"===r.code?"EVM.ERR_NOT_IMPLEMENTED":"UNSUPPORTED_OPERATION"===r.code?"EVM.ERR_UNSUPPORTED_OPERATION":"NETWORK_ERROR"===r.code?"EVM.ERR_NETWORK_FAULT":"SERVER_ERROR"===r.code?"EVM.ERR_SERVER_FAULT":"TIMEOUT"===r.code?"EVM.ERR_TIMEOUT":"BAD_DATA"===r.code?"EVM.ERR_BAD_DATA":"CANCELLED"===r.code?"EVM.ERR_CANCELLED":"BUFFER_OVERRUN"===r.code?"EVM.ERR_BUFFER_OVERRUN":"NUMERIC_FAULT"===r.code?"EVM.ERR_NUMERIC_FAULT":"INVALID_ARGUMENT"===r.code?"EVM.ERR_INVALID_ARGUMENT":"MISSING_ARGUMENT"===r.code?"EVM.ERR_MISSING_ARGUMENT":"UNEXPECTED_ARGUMENT"===r.code?"EVM.ERR_UNEXPECTED_ARGUMENT":"CALL_EXCEPTION"===r.code?"EVM.ERR_CALL_EXCEPTION":"INSUFFICIENT_FUNDS"===r.code?"EVM.ERR_INSUFFICIENT_FUNDS":"NONCE_EXPIRED"===r.code?"EVM.ERR_NONCE_EXPIRED":"REPLACEMENT_UNDERPRICED"===r.code?"EVM.ERR_REPLACEMENT_UNDERPRICED":"TRANSACTION_REPLACED"===r.code?"EVM.ERR_TRANSACTION_REPLACED":"UNCONFIGURED_NAME"===r.code?"EVM.ERR_UNCONFIGURED_NAME":"OFFCHAIN_FAULT"===r.code?"EVM.ERR_OFFCHAIN_FAULT":"ACTION_REJECTED"===r.code?"EVM.ERR_ACTION_REJECTED":"EVM.ERR_UNKNOWN",u=S.None,a=S.None,i=S.None,o=S.None;return"data"in r&&(u=(0,_.Some)(r.data)),"message"in r&&(u=(0,_.Some)(r.message)),"transaction"in r&&(u=(0,_.Some)(r.transaction)),"reason"in r&&(u=(0,_.Some)(r.reason)),{code:t,data:u,message:a,transaction:i,reason:o}}}(l=T||(T={})).SignatureBuilder=function(){let e,r,n,t,u,a;return e={name:function(n){return r=(0,_.Some)(n),e},event:function(){return n=(0,_.Some)("event"),e},external:function(){return n=(0,_.Some)("external"),e},pure:function(){return t=(0,_.Some)("pure"),e},view:function(){return t=(0,_.Some)("view"),e},payload:function(...r){return u=(0,_.Some)(r),e},returns:function(...r){return a=(0,_.Some)(r),e},build:function(){if(r.none())return(0,O.Err)("SIGNATURE_BUILDER.ERR_MISSING_NAME");let e=r.unwrap();if(n.none())return(0,O.Err)("SIGNATURE_BUILDER.ERR_MISSING_TYPE");let i=n.unwrap();if("event"===i){let r=l.Selector.from(e,...u.unwrapOr([])),n=l.EventSignature.from(r);return(0,m.Ok)(n)}if("external"===i){let r=l.Selector.from(e,...u.unwrapOr([]));if(t.none()){let e=l.ExternalSignature.from(r);return(0,m.Ok)(e)}let n=t.unwrap();if("pure"===n){let e=l.ExternalPureSignature.from(r,...a.unwrapOr([]));return(0,m.Ok)(e)}if("view"===n){let e=l.ExternalViewSignature.from(r,...a.unwrapOr([]));return(0,m.Ok)(e)}}return(0,O.Err)("SIGNATURE_BUILDER.ERR_MALFORMED_SIGNATURE")}},r=S.None,n=S.None,t=S.None,u=S.None,a=S.None,e},l.SignatureHandler={nameOf:function(e){let r=e.split(" ");if(0===r.length)return S.None;let n=(0,g.flag)(r.at(1));if(n.none())return n;let t=n.unwrap(),u=(0,g.flag)(t.split("(").at(0));if(u.none())return u;let a=u.unwrap();return(0,_.Some)(a)}},l.EventSignature={from:function(e){return`event ${e}`}},l.ExternalPureSignature={from:function(e,...r){return`function ${e} external pure returns (${l.String.from(...r)})`}},l.ExternalViewSignature={from:function(e,...r){return`function ${e} external view returns (${l.String.from(...r)})`}},l.ExternalSignature={from:function(e){return`function ${e} external`}},l.Selector={from:function(e,...r){return`${e}(${l.String.from(...r)})`}},l.String={from:function(...e){let r="";for(let n=0n;n<e.length;n++)0n!==n&&(r=", "),r+=e[Number(n)];return r}};var U=require("reliq");function q(){return{compile:function(e){let r=(0,U.wrap)((()=>JSON.stringify(e)));if(r.err())return r;let n=r.unwrap(),t=(0,U.wrap)((()=>f.default.compile(n)));if(t.err())return t;let u=t.unwrap(),a=(0,U.wrap)((()=>JSON.parse(u)));if(a.err())return a;let i=a.unwrap();return(0,c.Ok)(i)}}}var y={from:function(e){return`event ${e}`}};function D(...e){let r="";for(let n=0n;n<e.length;n++)0n!==n&&(r=", "),r+=e[Number(n)];return r}var C={from:function(e,...r){return`function ${e} external pure returns (${D(...r)})`}},L={from:function(e){return`function ${e} external`}},P={from:function(e,...r){return`function ${e} external view returns (${D(...r)})`}},V={from:function(e,...r){return`${e}(${D(...r)})`}},v=require("reliq"),F=require("reliq"),G=require("reliq"),x=require("reliq");function b(){let e,r,n,t,u,a;return e={name:function(n){return r=(0,v.Some)(n),e},event:function(){return n=(0,v.Some)("event"),e},external:function(){return n=(0,v.Some)("external"),e},pure:function(){return t=(0,v.Some)("pure"),e},view:function(){return t=(0,v.Some)("view"),e},payload:function(...r){return u=(0,v.Some)(r),e},returns:function(...r){return a=(0,v.Some)(r),e},build:function(){if(r.none())return(0,x.Err)("SIGNATURE_BUILDER.ERR_MISSING_NAME");let e=r.unwrap();if(n.none())return(0,x.Err)("SIGNATURE_BUILDER.ERR_MISSING_TYPE");let i=n.unwrap();if("event"===i){let r=V.from(e,...u.unwrapOr([])),n=y.from(r);return(0,G.Ok)(n)}if("external"===i){let r=V.from(e,...u.unwrapOr([]));if(t.none()){let e=L.from(r);return(0,G.Ok)(e)}let n=t.unwrap();if("pure"===n){let e=C.from(r,...a.unwrapOr([]));return(0,G.Ok)(e)}if("view"===n){let e=P.from(r,...a.unwrapOr([]));return(0,G.Ok)(e)}}return(0,x.Err)("SIGNATURE_BUILDER.ERR_MALFORMED_SIGNATURE")}},r=F.None,n=F.None,t=F.None,u=F.None,a=F.None,e}var $=require("reliq"),k=require("reliq"),h=require("reliq"),B={nameOf:function(e){let r=e.split(" ");if(0===r.length)return k.None;let n=(0,h.flag)(r.at(1));if(n.none())return n;let t=n.unwrap(),u=(0,h.flag)(t.split("(").at(0));if(u.none())return u;let a=u.unwrap();return(0,$.Some)(a)}};//# sourceMappingURL=data:application/json;base64,