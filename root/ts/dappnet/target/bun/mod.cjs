"use strict";var e,r=Object.defineProperty,n=Object.getOwnPropertyDescriptor,t=Object.getOwnPropertyNames,E=Object.prototype.hasOwnProperty,a={};((e,n)=>{for(var t in n)r(e,t,{get:n[t],enumerable:!0})})(a,{EthereumVirtualMachine:()=>p}),module.exports=(e=a,((e,a,i,o)=>{if(a&&"object"==typeof a||"function"==typeof a)for(let u of t(a))E.call(e,u)||u===i||r(e,u,{get:()=>a[u],enumerable:!(o=n(a,u))||o.enumerable});return e})(r({},"__esModule",{value:!0}),e));var i,o=require("ethers"),u=require("ethers"),R=require("ethers"),N=require("ethers"),_=require("ethers"),l=require("reliq"),c=(require("reliq"),require("reliq"),require("reliq")),A=require("reliq"),I=require("reliq"),T=require("reliq"),U=require("reliq"),f=require("reliq"),s=require("reliq"),M=require("reliq");function p(e){let r;{let t=n((0,s.wrap)((()=>new o.JsonRpcProvider(e))));return t.err()?t:(r=t.unwrap(),(0,I.Ok)({query:async function(e){let t=n((0,s.wrap)((()=>new u.Wallet(e.privateKey,r))));if(t.err())return t;let E=t.unwrap(),a=n((0,s.wrap)((()=>new R.Contract(e.to,[e.signature],E))));if(a.err())return a;let i=a.unwrap(),o=n((0,s.wrap)((()=>i.getFunction(e.signature))));if(o.err())return o;let N=o.unwrap(),_=await n((0,M.wrapAsync)((async()=>(0,l.Unsafe)(await N(...e.payload??[])))));if(_.err())return _;let c=_.unwrap();return(0,I.Ok)(c)},touch:async function(e){let t=n((0,s.wrap)((()=>new u.Wallet(e.privateKey,r))));if(t.err())return t;let E=t.unwrap(),a=await n((0,M.wrapAsync)((async()=>await E.getAddress())));if(a.err())return a;let i=a.unwrap(),o=await n((0,M.wrapAsync)((async()=>BigInt(await E.getNonce()))));if(o.err())return o;let R=o.unwrap(),N=n((0,s.wrap)((()=>new _.Interface([e.signature]))));if(N.err())return N;let l=N.unwrap(),f=p.Signature.nameOf(e.signature);if(f.none())return(0,T.Err)({code:"ETHEREUM_VIRTUAL_MACHINE.ERR_MALFORMED_SIGNATURE",data:A.None,message:A.None,reason:A.None,transaction:A.None});let w=f.unwrap(),C=n((0,s.wrap)((()=>l.encodeFunctionData(w,e.payload))));if(C.err())return C;let O=C.unwrap(),L=e.gasPrice?U.Fpv.Calculator.unwrap(e.gasPrice):0n,d=e.gasLimit?U.Fpv.Calculator.unwrap(e.gasLimit):0n,H=await n((0,M.wrapAsync)((async()=>await E.sendTransaction({from:i,to:e.to,nonce:Number(R),gasPrice:L,gasLimit:d,data:O}))));if(H.err())return H;let S=H.unwrap();if(null===S)return(0,T.Err)({code:"ETHEREUM_VIRTUAL_MACHINE.ERR_INVALID_RESPONSE",data:A.None,message:A.None,transaction:A.None,reason:A.None});let m=await n((0,M.wrapAsync)((async()=>await S.wait(Number(e.confirmations),Number(e.timeout)))));if(m.err())return m;let g=m.unwrap();return null===g?(0,I.Ok)(A.None):(0,I.Ok)((0,c.Some)(g))},deploy:async function(e){let t=n((0,s.wrap)((()=>new u.Wallet(e.privateKey,r))));if(t.err())return t;let E=t.unwrap(),a=n((0,s.wrap)((()=>new N.ContractFactory(e.abi,e.bytecode,E))));if(a.err())return a;let i=a.unwrap(),o=await n((0,M.wrapAsync)((async()=>await i.deploy(e.payload))));if(o.err())return o;let R=o.unwrap(),_=await n((0,M.wrapAsync)((async()=>await R.getAddress())));if(_.err())return _;let l=_.unwrap();return(0,I.Ok)(l)}}))}function n(e){if("then"in e){return e.then((e=>n(e)))}if("ok"in e){return e.mapErr((e=>n(e)))}let r=e.inspect();if(null==r||"object"!=typeof r||!("code"in r)||"string"!=typeof r.code)return{code:"ETHEREUM_VIRTUAL_MACHINE.ERR_UNKNOWN",data:A.None,message:A.None,transaction:A.None,reason:A.None};let t="UNKNOWN_ERROR"===r.code?"ETHEREUM_VIRTUAL_MACHINE.ERR_UNKNOWN":"NOT_IMPLEMENTED"===r.code?"ETHEREUM_VIRTUAL_MACHINE.ERR_NOT_IMPLEMENTED":"UNSUPPORTED_OPERATION"===r.code?"ETHEREUM_VIRTUAL_MACHINE.ERR_UNSUPPORTED_OPERATION":"NETWORK_ERROR"===r.code?"ETHEREUM_VIRTUAL_MACHINE.ERR_NETWORK_FAULT":"SERVER_ERROR"===r.code?"ETHEREUM_VIRTUAL_MACHINE.ERR_SERVER_FAULT":"TIMEOUT"===r.code?"ETHEREUM_VIRTUAL_MACHINE.ERR_TIMEOUT":"BAD_DATA"===r.code?"ETHEREUM_VIRTUAL_MACHINE.ERR_BAD_DATA":"CANCELLED"===r.code?"ETHEREUM_VIRTUAL_MACHINE.ERR_CANCELLED":"BUFFER_OVERRUN"===r.code?"ETHEREUM_VIRTUAL_MACHINE.ERR_BUFFER_OVERRUN":"NUMERIC_FAULT"===r.code?"ETHEREUM_VIRTUAL_MACHINE.ERR_NUMERIC_FAULT":"INVALID_ARGUMENT"===r.code?"ETHEREUM_VIRTUAL_MACHINE.ERR_INVALID_ARGUMENT":"MISSING_ARGUMENT"===r.code?"ETHEREUM_VIRTUAL_MACHINE.ERR_MISSING_ARGUMENT":"UNEXPECTED_ARGUMENT"===r.code?"ETHEREUM_VIRTUAL_MACHINE.ERR_UNEXPECTED_ARGUMENT":"CALL_EXCEPTION"===r.code?"ETHEREUM_VIRTUAL_MACHINE.ERR_CALL_EXCEPTION":"INSUFFICIENT_FUNDS"===r.code?"ETHEREUM_VIRTUAL_MACHINE.ERR_INSUFFICIENT_FUNDS":"NONCE_EXPIRED"===r.code?"ETHEREUM_VIRTUAL_MACHINE.ERR_NONCE_EXPIRED":"REPLACEMENT_UNDERPRICED"===r.code?"ETHEREUM_VIRTUAL_MACHINE.ERR_REPLACEMENT_UNDERPRICED":"TRANSACTION_REPLACED"===r.code?"ETHEREUM_VIRTUAL_MACHINE.ERR_TRANSACTION_REPLACED":"UNCONFIGURED_NAME"===r.code?"ETHEREUM_VIRTUAL_MACHINE.ERR_UNCONFIGURED_NAME":"OFFCHAIN_FAULT"===r.code?"ETHEREUM_VIRTUAL_MACHINE.ERR_OFFCHAIN_FAULT":"ACTION_REJECTED"===r.code?"ETHEREUM_VIRTUAL_MACHINE.ERR_ACTION_REJECTED":"ETHEREUM_VIRTUAL_MACHINE.ERR_UNKNOWN",E=A.None,a=A.None,i=A.None,o=A.None;return"data"in r&&(E=(0,c.Some)(r.data)),"message"in r&&(E=(0,c.Some)(r.message)),"transaction"in r&&(E=(0,c.Some)(r.transaction)),"reason"in r&&(E=(0,c.Some)(r.reason)),{code:t,data:E,message:a,transaction:i,reason:o}}}(i=p||(p={})).Signature={nameOf:function(e){let r=e.split(" ");if(0===r.length)return A.None;let n=(0,f.flag)(r.at(1));if(n.none())return n;let t=n.unwrap(),E=(0,f.flag)(t.split("(").at(0));if(E.none())return E;let a=E.unwrap();return(0,c.Some)(a)}},i.SignatureBuilder=function(){let e,r,n,t,E,a;return e={name:function(n){return r=(0,c.Some)(n),e},event:function(){return n=(0,c.Some)("event"),e},external:function(){return n=(0,c.Some)("external"),e},pure:function(){return t=(0,c.Some)("pure"),e},view:function(){return t=(0,c.Some)("view"),e},payload:function(...r){return E=(0,c.Some)(r),e},returns:function(...r){return a=(0,c.Some)(r),e},build:function(){if(r.none())return(0,T.Err)("SIGNATURE_BUILDER.ERR_MISSING_NAME");let e=r.unwrap();if(n.none())return(0,T.Err)("SIGNATURE_BUILDER.ERR_MISSING_TYPE");let o=n.unwrap();if("event"===o){let r=i.Selector.from(e,...E.unwrapOr([])),n=i.EventSignature.from(r);return(0,I.Ok)(n)}if("external"===o){let r=i.Selector.from(e,...E.unwrapOr([]));if(t.none()){let e=i.ExternalSignature.from(r);return(0,I.Ok)(e)}let n=t.unwrap();if("pure"===n){let e=i.ExternalPureSignature.from(r,...a.unwrapOr([]));return(0,I.Ok)(e)}if("view"===n){let e=i.ExternalViewSignature.from(r,...a.unwrapOr([]));return(0,I.Ok)(e)}}return(0,T.Err)("SIGNATURE_BUILDER.ERR_MALFORMED_SIGNATURE")}},r=A.None,n=A.None,t=A.None,E=A.None,a=A.None,e},i.ExternalSignature={from:function(e){return`function ${e} external`}},i.ExternalViewSignature={from:function(e,...r){return`function ${e} external view returns (${i.Data.serialize(...r)})`}},i.ExternalPureSignature={from:function(e,...r){return`function ${e} external pure returns (${i.Data.serialize(...r)})`}},i.EventSignature={from:function(e){return`event ${e}`}},i.Selector={from:function(e,...r){return`${e}(${i.Data.serialize(...r)})`}},i.Data={serialize:function(...e){let r="";for(let n=0n;n<e.length;n++)0n!==n&&(r=", "),r+=e[Number(n)];return r}};//# sourceMappingURL=data:application/json;base64,