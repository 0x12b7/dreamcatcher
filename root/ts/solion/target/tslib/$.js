function n(t){return t}import{default as r}from"solc";import{Result as o}from"reliq";var l=(()=>{return{compile:t};function t(...[e]){return o.wrap(()=>JSON.parse(r.compile(JSON.stringify(e))))}})();function f(t){return t}function x(t){return t}function S(t){return t}import"dappnet";function L(t){return t}function D(t){return t}function J(t){return t}function P(t){return t}export{n as Bytecode,l as Compiler,f as Configuration,x as ContractOutput,S as Error,L as EvmOutput,D as Output,J as SourceLocation,P as SourceOutput};
//# sourceMappingURL=data:application/json;base64,