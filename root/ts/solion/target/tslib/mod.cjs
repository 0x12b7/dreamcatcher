"use strict";var f=Object.create;var i=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var d=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var x=(t,e)=>{for(var r in e)i(t,r,{get:e[r],enumerable:!0})},p=(t,e,r,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of y(e))!b.call(t,o)&&o!==r&&i(t,o,{get:()=>e[o],enumerable:!(n=g(e,o))||n.enumerable});return t};var O=(t,e,r)=>(r=t!=null?f(d(t)):{},p(e||!t||!t.__esModule?i(r,"default",{value:t,enumerable:!0}):r,t)),S=t=>p(i({},"__esModule",{value:!0}),t);var k={};x(k,{Bytecode:()=>v,Compiler:()=>C,Config:()=>E,ContractOutput:()=>w,Error:()=>R,EvmOutput:()=>A,Output:()=>j,SourceLocation:()=>B,SourceOutput:()=>L});module.exports=S(k);function v(t){return t}var m=O(require("solc"),1);var D=require("reliq"),J=require("reliq"),a=require("reliq"),u=require("reliq"),C=(()=>{return{compile:t};function t(...[e]){let r=(0,u.wrap)(JSON.stringify,e);if(r.err())return r;let n=r.unwrapSafely(),o=(0,u.wrap)(m.default.compile,n);if(o.err())return o;let c=o.unwrapSafely(),s=(0,u.wrap)(JSON.parse,c);if(s.err())return s;let l=s.unwrapSafely();return(0,a.Ok)(l)}})();function E(t){return t}function w(t){return t}function R(t){return t}var X=require("dappnet");function A(t){return t}function j(t){return t}function B(t){return t}function L(t){return t}0&&(module.exports={Bytecode,Compiler,Config,ContractOutput,Error,EvmOutput,Output,SourceLocation,SourceOutput});
//# sourceMappingURL=data:application/json;base64,