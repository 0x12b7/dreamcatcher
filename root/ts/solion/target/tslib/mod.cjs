"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/mod.ts
var mod_exports = {};
__export(mod_exports, {
  Bytecode: () => Bytecode,
  Compiler: () => Compiler,
  Config: () => Config2,
  ContractOutput: () => ContractOutput,
  Error: () => Error2,
  EvmOutput: () => EvmOutput2,
  Output: () => Output2,
  SourceLocation: () => SourceLocation2,
  SourceOutput: () => SourceOutput2
});
module.exports = __toCommonJS(mod_exports);

// src/bytecode.ts
function Bytecode(_instance) {
  {
    return _instance;
  }
}

// src/compiler.ts
var import_solc = __toESM(require("solc"), 1);
var import_reliq = require("reliq");
var import_reliq2 = require("reliq");
var import_reliq3 = require("reliq");
var import_reliq4 = require("reliq");
var Compiler = (() => {
  {
    return { compile };
  }
  function compile(...[config]) {
    let cargoR = (0, import_reliq4.wrap)(JSON.stringify, config);
    if (cargoR.err()) return cargoR;
    let cargo = cargoR.unwrapSafely();
    let contentR = (0, import_reliq4.wrap)(import_solc.default.compile, cargo);
    if (contentR.err()) return contentR;
    let content = contentR.unwrapSafely();
    let outR = (0, import_reliq4.wrap)(JSON.parse, content);
    if (outR.err()) return outR;
    let out = outR.unwrapSafely();
    return (0, import_reliq3.Ok)(out);
  }
})();

// src/config.ts
function Config2(_instance) {
  {
    return _instance;
  }
}

// src/contract_output.ts
function ContractOutput(_instance) {
  {
    return _instance;
  }
}

// src/error.ts
function Error2(_instance) {
  {
    return _instance;
  }
}

// src/evm_output.ts
var import_dappnet = require("dappnet");
function EvmOutput2(_instance) {
  {
    return _instance;
  }
}

// src/output.ts
function Output2(_instance) {
  {
    return _instance;
  }
}

// src/source_location.ts
function SourceLocation2(_instance) {
  {
    return _instance;
  }
}

// src/source_output.ts
function SourceOutput2(_instance) {
  {
    return _instance;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Bytecode,
  Compiler,
  Config,
  ContractOutput,
  Error,
  EvmOutput,
  Output,
  SourceLocation,
  SourceOutput
});
//# sourceMappingURL=data:application/json;base64,