"use strict";var g=Object.defineProperty;var R=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var b=Object.prototype.hasOwnProperty;var _=(r,o)=>{for(var f in o)g(r,f,{get:o[f],enumerable:!0})},F=(r,o,f,p)=>{if(o&&typeof o=="object"||typeof o=="function")for(let e of v(o))!b.call(r,e)&&e!==f&&g(r,e,{get:()=>o[e],enumerable:!(p=R(o,e))||p.enumerable});return r};var V=r=>F(g({},"__esModule",{value:!0}),r);var J={};_(J,{Err:()=>y,None:()=>E,Ok:()=>T,Option:()=>S,Result:()=>h,Some:()=>O,assert:()=>N,mapErr:()=>Y,none:()=>M,panic:()=>k,require:()=>X,some:()=>$,toString:()=>x,wrapAsyncOption:()=>j,wrapAsyncResult:()=>H,wrapOption:()=>P,wrapResult:()=>q});module.exports=V(J);function N(r,o){return X(r,o)}function Y(r,o,f){if(r!=null&&typeof r=="object"&&"message"in r&&typeof r.message=="string"&&r.message===o)return f()}function M(r){return r===null&&r===void 0}function k(r){throw Error(r)}function X(r,o){r||k(o)}function $(r){return r!=null}function y(r){let o,f;{o={ok:p,err:e,val:m,stack:l,expect:t,expectErr:n,unwrap:u,unwrapOr:i,andThen:d,map:s,mapErr:w,toOption:A,toString:c};let a=Error().stack.split(`
`).slice(2);return a&&a.length>0&&a[0].includes("Err")&&a.shift(),f=a.join(`
`),o}function p(){return!1}function e(){return!0}function m(){return r}function l(){return f}function t(a){throw`${a}
${l()}`}function n(a){return m()}function u(){throw`${m()}
${l()}`}function i(a){return a}function d(a){return o}function s(a){return o}function w(a){return y(a(m()))}function A(){return E}function c(){return`Err(${x(m())})`}}function x(r){let o=String(r);if(o==="[object Object]")try{o=JSON.stringify(r)}catch{}return o}var E=(()=>{let r;return r={some:o,none:f,expect:p,unwrap:e,unwrapOr:m,andThen:l,map:t,toResult:n,toString:u},r;function o(){return!1}function f(){return!0}function p(i){throw`${i}`}function e(){throw`NONE
${Error().stack}`}function m(i){return i}function l(i){return r}function t(i){return r}function n(i){return y(i)}function u(){return"NONE"}})();function T(r){let o;return o={ok:f,err:p,val:e,expect:m,expectErr:l,unwrap:t,unwrapOr:n,unwrapSafely:u,andThen:i,map:d,mapErr:s,toOption:w,toString:A},o;function f(){return!0}function p(){return!1}function e(){return r}function m(c){return e()}function l(c){return k(c)}function t(){return e()}function n(c){return e()}function u(){return e()}function i(c){return c(e())}function d(c){return T(c(e()))}function s(c){return o}function w(){return O(e())}function A(){return`Ok(${x(e())})`}}var S=(()=>{return{isOption:r,isSome:o,isNone:f,wrap:p,wrapAsync:e,unwrapAll:m,unwrapAny:l};function r(t){return o(t)||f(t)}function o(t){return t!=null&&typeof t=="object"&&"some"in t&&"none"in t&&"val"in t&&"expect"in t&&"unwrap"in t&&"unwrapOr"in t&&"unwrapSafely"in t&&"andThen"in t&&"map"in t&&"toResult"in t&&"toString"in t&&typeof t.some=="function"&&typeof t.none=="function"&&typeof t.val=="function"&&typeof t.expect=="function"&&typeof t.unwrap=="function"&&typeof t.unwrapOr=="function"&&typeof t.unwrapSafely=="function"&&typeof t.andThen=="function"&&typeof t.map=="function"&&typeof t.toResult=="function"&&typeof t.toString=="function"&&typeof t.some()=="boolean"&&typeof t.none()=="boolean"&&typeof t.toString()=="string"&&t.some()===!0&&t.none()===!1}function f(t){return t!=null&&typeof t=="object"&&"some"in t&&"none"in t&&"val"in t&&"expect"in t&&"unwrap"in t&&"unwrapOr"in t&&"unwrapSafely"in t&&"andThen"in t&&"map"in t&&"toResult"in t&&"toString"in t&&typeof t.some=="function"&&typeof t.none=="function"&&typeof t.val=="function"&&typeof t.expect=="function"&&typeof t.unwrap=="function"&&typeof t.unwrapOr=="function"&&typeof t.unwrapSafely=="function"&&typeof t.andThen=="function"&&typeof t.map=="function"&&typeof t.toResult=="function"&&typeof t.toString=="function"&&typeof t.some()=="boolean"&&typeof t.none()=="boolean"&&typeof t.toString()=="string"&&t.some()===!1&&t.none()===!0}function p(t){try{return O(t())}catch{return E}}async function e(t){try{return O(await t())}catch{return E}}function m(...t){let n=[],u=0n;for(;u<t.length;){let i=t[Number(u)];if(i.some())n.push(i.val());else return i;u++}return O(n)}function l(...t){let n=0n;for(;n<t.length;){let u=t[Number(n)];return u.some(),u}return E}})();var h=(()=>{return{isResult:r,isOk:o,isErr:f,wrap:p,wrapAsync:e,unwrapAll:m,unwrapAny:l};function r(t){return o(t)||f(t)}function o(t){return t!=null&&typeof t=="object"&&"ok"in t&&"err"in t&&"val"in t&&"expect"in t&&"expectErr"in t&&"unwrap"in t&&"unwrapOr"in t&&"unwrapSafely"in t&&"andThen"in t&&"map"in t&&"mapErr"in t&&"toOption"in t&&"toString"in t&&typeof t.ok=="function"&&typeof t.err=="function"&&typeof t.val=="function"&&typeof t.expect=="function"&&typeof t.expectErr=="function"&&typeof t.unwrap=="function"&&typeof t.unwrapOr=="function"&&typeof t.unwrapSafely=="function"&&typeof t.andThen=="function"&&typeof t.map=="function"&&typeof t.mapErr=="function"&&typeof t.toOption=="function"&&typeof t.toString=="function"&&typeof t.ok()=="boolean"&&typeof t.err()=="boolean"&&typeof t.toString()=="string"&&t.ok()===!0&&t.err()===!1}function f(t){return t!=null&&typeof t=="object"&&"ok"in t&&"err"in t&&"val"in t&&"stack"in t&&"expect"in t&&"expectErr"in t&&"unwrap"in t&&"unwrapOr"in t&&"andThen"in t&&"map"in t&&"mapErr"in t&&"toOption"in t&&"toString"in t&&typeof t.ok=="function"&&typeof t.err=="function"&&typeof t.val=="function"&&typeof t.stack=="function"&&typeof t.expect=="function"&&typeof t.expectErr=="function"&&typeof t.unwrap=="function"&&typeof t.unwrapOr=="function"&&typeof t.andThen=="function"&&typeof t.map=="function"&&typeof t.mapErr=="function"&&typeof t.toOption=="function"&&typeof t.toString=="function"&&typeof t.ok()=="boolean"&&typeof t.err()=="boolean"&&typeof t.toString()=="string"&&t.ok()===!1&&t.err()===!0}function p(t){try{return T(t())}catch(n){return y(n)}}async function e(t){try{return T(await t())}catch(n){return y(n)}}function m(...t){let n=[],u=0n;for(;u<t.length;){let i=t[Number(u)];if(i.ok())n.push(i.val());else return i;u++}return T(n)}function l(...t){let n=[],u=0n;for(;u<t.length;){let i=t[Number(u)];if(i.ok())return i;n.push(i.val()),u++}return y(n)}})();function j(r){return S.wrapAsync(r)}function H(r){return h.wrapAsync(r)}function P(r){return S.wrap(r)}function q(r){return h.wrap(r)}function O(r){return{some:o,none:f,val:p,expect:e,unwrap:m,unwrapOr:l,unwrapSafely:t,andThen:n,map:u,toResult:i,toString:d};function o(){return!0}function f(){return!1}function p(){return r}function e(s){return p()}function m(){return p()}function l(s){return p()}function t(){return p()}function n(s){return s(p())}function u(s){return O(s(p()))}function i(s){return T(p())}function d(){return`Some(${x(p())})`}}0&&(module.exports={Err,None,Ok,Option,Result,Some,assert,mapErr,none,panic,require,some,toString,wrapAsyncOption,wrapAsyncResult,wrapOption,wrapResult});
//# sourceMappingURL=data:application/json;base64,