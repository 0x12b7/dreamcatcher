"use strict";var X=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var F=Object.prototype.hasOwnProperty;var _=(r,o)=>{for(var e in o)X(r,e,{get:o[e],enumerable:!0})},V=(r,o,e,i)=>{if(o&&typeof o=="object"||typeof o=="function")for(let n of b(o))!F.call(r,n)&&n!==e&&X(r,n,{get:()=>o[n],enumerable:!(i=v(o,n))||i.enumerable});return r};var N=r=>V(X({},"__esModule",{value:!0}),r);var G={};_(G,{Err:()=>y,None:()=>E,Ok:()=>O,Option:()=>h,Restorable:()=>M,Result:()=>w,Some:()=>x,assert:()=>D,copy:()=>A,mapErr:()=>$,none:()=>P,panic:()=>S,require:()=>T,retry:()=>j,retryAsync:()=>q,some:()=>Y,toString:()=>d,wrapAsyncOption:()=>C,wrapAsyncResult:()=>J,wrapOption:()=>z,wrapResult:()=>B});module.exports=N(G);function M(r){return{get:o,mut:e,mutAsync:i};function o(){return r}function e(n){let f=A(r);try{n(o())}catch(a){throw r=f,a}}async function i(n){let f=A(r);try{await n(o())}catch(a){throw r=f,a}}}function P(r){return r===null&&r===void 0}function Y(r){return r!=null}function $(r,o,e){if(r!=null&&typeof r=="object"&&"message"in r&&typeof r.message=="string"&&r.message===o)return e()}function j(r,o,e=0){T(o>0n,"ERR_NO_ATTEMPTS");let i,n=0n;for(;n<o;){try{return r()}catch(f){n===o-1n&&(i=f),e>0&&H(e)}n++}throw i}function H(r){let o=Date.now();for(;Date.now()-o<r;);}async function q(r,o,e){T(o>0n,"ERR_NO_ATTEMPTS");let i,n=0n;for(;n<o;){try{return await r()}catch(f){n===o-1n&&(i=f),e>0&&await new Promise(p=>setTimeout(p,e))}n++}throw i}function D(r,o){if(r)return;let e=Error(o);throw Error.captureStackTrace(e,T),e}function S(r){let o=Error(r);throw Error.captureStackTrace(o,S),o}function T(r,o){if(r)return;let e=Error(o);throw Error.captureStackTrace(e,T),e}var w=(()=>{return{isResult:r,isOk:o,isErr:e,wrap:i,wrapAsync:n,unwrapAll:f,unwrapAny:a};function r(t){return o(t)||e(t)}function o(t){return t!=null&&typeof t=="object"&&"ok"in t&&"err"in t&&"val"in t&&"expect"in t&&"expectErr"in t&&"unwrap"in t&&"unwrapOr"in t&&"unwrapSafely"in t&&"andThen"in t&&"map"in t&&"mapErr"in t&&"toOption"in t&&"toString"in t&&typeof t.ok=="function"&&typeof t.err=="function"&&typeof t.val=="function"&&typeof t.expect=="function"&&typeof t.expectErr=="function"&&typeof t.unwrap=="function"&&typeof t.unwrapOr=="function"&&typeof t.unwrapSafely=="function"&&typeof t.andThen=="function"&&typeof t.map=="function"&&typeof t.mapErr=="function"&&typeof t.toOption=="function"&&typeof t.toString=="function"&&typeof t.ok()=="boolean"&&typeof t.err()=="boolean"&&typeof t.toString()=="string"&&t.ok()===!0&&t.err()===!1}function e(t){return t!=null&&typeof t=="object"&&"ok"in t&&"err"in t&&"val"in t&&"stack"in t&&"expect"in t&&"expectErr"in t&&"unwrap"in t&&"unwrapOr"in t&&"andThen"in t&&"map"in t&&"mapErr"in t&&"toOption"in t&&"toString"in t&&typeof t.ok=="function"&&typeof t.err=="function"&&typeof t.val=="function"&&typeof t.stack=="function"&&typeof t.expect=="function"&&typeof t.expectErr=="function"&&typeof t.unwrap=="function"&&typeof t.unwrapOr=="function"&&typeof t.andThen=="function"&&typeof t.map=="function"&&typeof t.mapErr=="function"&&typeof t.toOption=="function"&&typeof t.toString=="function"&&typeof t.ok()=="boolean"&&typeof t.err()=="boolean"&&typeof t.toString()=="string"&&t.ok()===!1&&t.err()===!0}function i(t){try{return O(t())}catch(p){return y(p)}}async function n(t){try{return O(await t())}catch(p){return y(p)}}function f(...t){let p=[],m=0n;for(;m<t.length;){let u=t[Number(m)];if(u.ok())p.push(u.val());else return u;m++}return O(p)}function a(...t){let p=[],m=0n;for(;m<t.length;){let u=t[Number(m)];if(u.ok())return u;p.push(u.val()),m++}return y(p)}})();function y(r){let o,e;{o={ok:i,err:n,val:f,stack:a,expect:t,expectErr:p,unwrap:m,unwrapOr:u,andThen:k,map:c,mapErr:g,toOption:R,toString:s};let l=Error().stack.split(`
`).slice(2);return l&&l.length>0&&l[0].includes("Err")&&l.shift(),e=l.join(`
`),o}function i(){return!1}function n(){return!0}function f(){return r}function a(){return e}function t(l){throw`${l}
${a()}`}function p(l){return f()}function m(){throw`${f()}
${a()}`}function u(l){return l}function k(l){return o}function c(l){return o}function g(l){return y(l(f()))}function R(){return E}function s(){return`Err(${d(f())})`}}var E=(()=>{let r;return r={some:o,none:e,expect:i,unwrap:n,unwrapOr:f,andThen:a,map:t,toResult:p,toString:m},r;function o(){return!1}function e(){return!0}function i(u){throw`${u}`}function n(){throw`NONE
${Error().stack}`}function f(u){return u}function a(u){return r}function t(u){return r}function p(u){return y(u)}function m(){return"NONE"}})();function O(r){let o;return o={ok:e,err:i,val:n,expect:f,expectErr:a,unwrap:t,unwrapOr:p,unwrapSafely:m,andThen:u,map:k,mapErr:c,toOption:g,toString:R},o;function e(){return!0}function i(){return!1}function n(){return r}function f(s){return n()}function a(s){return S(s)}function t(){return n()}function p(s){return n()}function m(){return n()}function u(s){return s(n())}function k(s){return O(s(n()))}function c(s){return o}function g(){return x(n())}function R(){return`Ok(${d(n())})`}}var h=(()=>{return{isOption:r,isSome:o,isNone:e,wrap:i,wrapAsync:n,unwrapAll:f,unwrapAny:a};function r(t){return o(t)||e(t)}function o(t){return t!=null&&typeof t=="object"&&"some"in t&&"none"in t&&"val"in t&&"expect"in t&&"unwrap"in t&&"unwrapOr"in t&&"unwrapSafely"in t&&"andThen"in t&&"map"in t&&"toResult"in t&&"toString"in t&&typeof t.some=="function"&&typeof t.none=="function"&&typeof t.val=="function"&&typeof t.expect=="function"&&typeof t.unwrap=="function"&&typeof t.unwrapOr=="function"&&typeof t.unwrapSafely=="function"&&typeof t.andThen=="function"&&typeof t.map=="function"&&typeof t.toResult=="function"&&typeof t.toString=="function"&&typeof t.some()=="boolean"&&typeof t.none()=="boolean"&&typeof t.toString()=="string"&&t.some()===!0&&t.none()===!1}function e(t){return t!=null&&typeof t=="object"&&"some"in t&&"none"in t&&"val"in t&&"expect"in t&&"unwrap"in t&&"unwrapOr"in t&&"unwrapSafely"in t&&"andThen"in t&&"map"in t&&"toResult"in t&&"toString"in t&&typeof t.some=="function"&&typeof t.none=="function"&&typeof t.val=="function"&&typeof t.expect=="function"&&typeof t.unwrap=="function"&&typeof t.unwrapOr=="function"&&typeof t.unwrapSafely=="function"&&typeof t.andThen=="function"&&typeof t.map=="function"&&typeof t.toResult=="function"&&typeof t.toString=="function"&&typeof t.some()=="boolean"&&typeof t.none()=="boolean"&&typeof t.toString()=="string"&&t.some()===!1&&t.none()===!0}function i(t){try{return x(t())}catch{return E}}async function n(t){try{return x(await t())}catch{return E}}function f(...t){let p=[],m=0n;for(;m<t.length;){let u=t[Number(m)];if(u.some())p.push(u.val());else return u;m++}return x(p)}function a(...t){let p=0n;for(;p<t.length;){let m=t[Number(p)];return m.some(),m}return E}})();function C(r){return h.wrapAsync(r)}function J(r){return w.wrapAsync(r)}function z(r){return h.wrap(r)}function B(r){return w.wrap(r)}function x(r){return{some:o,none:e,val:i,expect:n,unwrap:f,unwrapOr:a,unwrapSafely:t,andThen:p,map:m,toResult:u,toString:k};function o(){return!0}function e(){return!1}function i(){return r}function n(c){return i()}function f(){return i()}function a(c){return i()}function t(){return i()}function p(c){return c(i())}function m(c){return x(c(i()))}function u(c){return O(i())}function k(){return`Some(${d(i())})`}}function A(r){return structuredClone(r)}function d(r){let o=String(r);if(o==="[object Object]")try{o=JSON.stringify(r)}catch{}return o}0&&(module.exports={Err,None,Ok,Option,Restorable,Result,Some,assert,copy,mapErr,none,panic,require,retry,retryAsync,some,toString,wrapAsyncOption,wrapAsyncResult,wrapOption,wrapResult});
//# sourceMappingURL=data:application/json;base64,