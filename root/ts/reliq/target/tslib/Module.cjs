"use strict";var X=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var F=Object.prototype.hasOwnProperty;var _=(r,o)=>{for(var n in o)X(r,n,{get:o[n],enumerable:!0})},V=(r,o,n,p)=>{if(o&&typeof o=="object"||typeof o=="function")for(let e of b(o))!F.call(r,e)&&e!==n&&X(r,e,{get:()=>o[e],enumerable:!(p=v(o,e))||p.enumerable});return r};var N=r=>V(X({},"__esModule",{value:!0}),r);var z={};_(z,{Err:()=>T,None:()=>E,Ok:()=>y,Option:()=>k,Restorable:()=>j,Result:()=>h,Some:()=>O,assert:()=>Y,copy:()=>w,mapErr:()=>M,none:()=>$,panic:()=>A,require:()=>S,some:()=>P,toString:()=>x,wrapAsyncOption:()=>H,wrapAsyncResult:()=>q,wrapOption:()=>C,wrapResult:()=>J});module.exports=N(z);function Y(r,o){if(r)return;let n=Error(o);throw Error.captureStackTrace(n,S),n}function M(r,o,n){if(r!=null&&typeof r=="object"&&"message"in r&&typeof r.message=="string"&&r.message===o)return n()}function $(r){return r===null&&r===void 0}function A(r){let o=Error(r);throw Error.captureStackTrace(o,A),o}function S(r,o){if(r)return;let n=Error(o);throw Error.captureStackTrace(n,S),n}function j(r){return{get:o,mut:n,mutAsync:p};function o(){return r}function n(e){let m=w(r);try{e(o())}catch(a){throw r=m,a}}async function p(e){let m=w(r);try{await e(o())}catch(a){throw r=m,a}}}function P(r){return r!=null}function T(r){let o,n;{o={ok:p,err:e,val:m,stack:a,expect:t,expectErr:i,unwrap:f,unwrapOr:u,andThen:d,map:l,mapErr:g,toOption:R,toString:c};let s=Error().stack.split(`
`).slice(2);return s&&s.length>0&&s[0].includes("Err")&&s.shift(),n=s.join(`
`),o}function p(){return!1}function e(){return!0}function m(){return r}function a(){return n}function t(s){throw`${s}
${a()}`}function i(s){return m()}function f(){throw`${m()}
${a()}`}function u(s){return s}function d(s){return o}function l(s){return o}function g(s){return T(s(m()))}function R(){return E}function c(){return`Err(${x(m())})`}}function w(r){return structuredClone(r)}function x(r){let o=String(r);if(o==="[object Object]")try{o=JSON.stringify(r)}catch{}return o}var E=(()=>{let r;return r={some:o,none:n,expect:p,unwrap:e,unwrapOr:m,andThen:a,map:t,toResult:i,toString:f},r;function o(){return!1}function n(){return!0}function p(u){throw`${u}`}function e(){throw`NONE
${Error().stack}`}function m(u){return u}function a(u){return r}function t(u){return r}function i(u){return T(u)}function f(){return"NONE"}})();function y(r){let o;return o={ok:n,err:p,val:e,expect:m,expectErr:a,unwrap:t,unwrapOr:i,unwrapSafely:f,andThen:u,map:d,mapErr:l,toOption:g,toString:R},o;function n(){return!0}function p(){return!1}function e(){return r}function m(c){return e()}function a(c){return A(c)}function t(){return e()}function i(c){return e()}function f(){return e()}function u(c){return c(e())}function d(c){return y(c(e()))}function l(c){return o}function g(){return O(e())}function R(){return`Ok(${x(e())})`}}var k=(()=>{return{isOption:r,isSome:o,isNone:n,wrap:p,wrapAsync:e,unwrapAll:m,unwrapAny:a};function r(t){return o(t)||n(t)}function o(t){return t!=null&&typeof t=="object"&&"some"in t&&"none"in t&&"val"in t&&"expect"in t&&"unwrap"in t&&"unwrapOr"in t&&"unwrapSafely"in t&&"andThen"in t&&"map"in t&&"toResult"in t&&"toString"in t&&typeof t.some=="function"&&typeof t.none=="function"&&typeof t.val=="function"&&typeof t.expect=="function"&&typeof t.unwrap=="function"&&typeof t.unwrapOr=="function"&&typeof t.unwrapSafely=="function"&&typeof t.andThen=="function"&&typeof t.map=="function"&&typeof t.toResult=="function"&&typeof t.toString=="function"&&typeof t.some()=="boolean"&&typeof t.none()=="boolean"&&typeof t.toString()=="string"&&t.some()===!0&&t.none()===!1}function n(t){return t!=null&&typeof t=="object"&&"some"in t&&"none"in t&&"val"in t&&"expect"in t&&"unwrap"in t&&"unwrapOr"in t&&"unwrapSafely"in t&&"andThen"in t&&"map"in t&&"toResult"in t&&"toString"in t&&typeof t.some=="function"&&typeof t.none=="function"&&typeof t.val=="function"&&typeof t.expect=="function"&&typeof t.unwrap=="function"&&typeof t.unwrapOr=="function"&&typeof t.unwrapSafely=="function"&&typeof t.andThen=="function"&&typeof t.map=="function"&&typeof t.toResult=="function"&&typeof t.toString=="function"&&typeof t.some()=="boolean"&&typeof t.none()=="boolean"&&typeof t.toString()=="string"&&t.some()===!1&&t.none()===!0}function p(t){try{return O(t())}catch{return E}}async function e(t){try{return O(await t())}catch{return E}}function m(...t){let i=[],f=0n;for(;f<t.length;){let u=t[Number(f)];if(u.some())i.push(u.val());else return u;f++}return O(i)}function a(...t){let i=0n;for(;i<t.length;){let f=t[Number(i)];return f.some(),f}return E}})();var h=(()=>{return{isResult:r,isOk:o,isErr:n,wrap:p,wrapAsync:e,unwrapAll:m,unwrapAny:a};function r(t){return o(t)||n(t)}function o(t){return t!=null&&typeof t=="object"&&"ok"in t&&"err"in t&&"val"in t&&"expect"in t&&"expectErr"in t&&"unwrap"in t&&"unwrapOr"in t&&"unwrapSafely"in t&&"andThen"in t&&"map"in t&&"mapErr"in t&&"toOption"in t&&"toString"in t&&typeof t.ok=="function"&&typeof t.err=="function"&&typeof t.val=="function"&&typeof t.expect=="function"&&typeof t.expectErr=="function"&&typeof t.unwrap=="function"&&typeof t.unwrapOr=="function"&&typeof t.unwrapSafely=="function"&&typeof t.andThen=="function"&&typeof t.map=="function"&&typeof t.mapErr=="function"&&typeof t.toOption=="function"&&typeof t.toString=="function"&&typeof t.ok()=="boolean"&&typeof t.err()=="boolean"&&typeof t.toString()=="string"&&t.ok()===!0&&t.err()===!1}function n(t){return t!=null&&typeof t=="object"&&"ok"in t&&"err"in t&&"val"in t&&"stack"in t&&"expect"in t&&"expectErr"in t&&"unwrap"in t&&"unwrapOr"in t&&"andThen"in t&&"map"in t&&"mapErr"in t&&"toOption"in t&&"toString"in t&&typeof t.ok=="function"&&typeof t.err=="function"&&typeof t.val=="function"&&typeof t.stack=="function"&&typeof t.expect=="function"&&typeof t.expectErr=="function"&&typeof t.unwrap=="function"&&typeof t.unwrapOr=="function"&&typeof t.andThen=="function"&&typeof t.map=="function"&&typeof t.mapErr=="function"&&typeof t.toOption=="function"&&typeof t.toString=="function"&&typeof t.ok()=="boolean"&&typeof t.err()=="boolean"&&typeof t.toString()=="string"&&t.ok()===!1&&t.err()===!0}function p(t){try{return y(t())}catch(i){return T(i)}}async function e(t){try{return y(await t())}catch(i){return T(i)}}function m(...t){let i=[],f=0n;for(;f<t.length;){let u=t[Number(f)];if(u.ok())i.push(u.val());else return u;f++}return y(i)}function a(...t){let i=[],f=0n;for(;f<t.length;){let u=t[Number(f)];if(u.ok())return u;i.push(u.val()),f++}return T(i)}})();function H(r){return k.wrapAsync(r)}function q(r){return h.wrapAsync(r)}function C(r){return k.wrap(r)}function J(r){return h.wrap(r)}function O(r){return{some:o,none:n,val:p,expect:e,unwrap:m,unwrapOr:a,unwrapSafely:t,andThen:i,map:f,toResult:u,toString:d};function o(){return!0}function n(){return!1}function p(){return r}function e(l){return p()}function m(){return p()}function a(l){return p()}function t(){return p()}function i(l){return l(p())}function f(l){return O(l(p()))}function u(l){return y(p())}function d(){return`Some(${x(p())})`}}0&&(module.exports={Err,None,Ok,Option,Restorable,Result,Some,assert,copy,mapErr,none,panic,require,some,toString,wrapAsyncOption,wrapAsyncResult,wrapOption,wrapResult});
//# sourceMappingURL=data:application/json;base64,