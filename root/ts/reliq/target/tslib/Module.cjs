"use strict";var X=Object.defineProperty;var R=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var _=Object.prototype.hasOwnProperty;var F=(r,o)=>{for(var u in o)X(r,u,{get:o[u],enumerable:!0})},b=(r,o,u,f)=>{if(o&&typeof o=="object"||typeof o=="function")for(let e of v(o))!_.call(r,e)&&e!==u&&X(r,e,{get:()=>o[e],enumerable:!(f=R(o,e))||f.enumerable});return r};var V=r=>b(X({},"__esModule",{value:!0}),r);var P={};F(P,{Err:()=>y,None:()=>E,Ok:()=>T,Option:()=>S,Result:()=>w,Some:()=>O,assert:()=>N,panic:()=>d,require:()=>g,toString:()=>x,wrapAsyncO:()=>Y,wrapAsyncR:()=>$,wrapO:()=>j,wrapR:()=>H});module.exports=V(P);function N(r,o){return g(r,o)}function d(r){throw Error(r)}function g(r,o){r===!1&&d(o)}function y(r){let o,u;{o={ok:f,err:e,val:m,stack:a,expect:t,expectErr:n,unwrap:p,unwrapOr:i,andThen:k,map:l,mapErr:A,toOption:h,toString:c};let s=Error().stack.split(`
`).slice(2);return s&&s.length>0&&s[0].includes("Err")&&s.shift(),u=s.join(`
`),o}function f(){return!1}function e(){return!0}function m(){return r}function a(){return u}function t(s){throw`${s}
${a()}`}function n(s){return m()}function p(){throw`${m()}
${a()}`}function i(s){return s}function k(s){return o}function l(s){return o}function A(s){return y(s(m()))}function h(){return E}function c(){return`Err(${x(m())})`}}function x(r){let o=String(r);if(o==="[object Object]")try{o=JSON.stringify(r)}catch{}return o}var E=(()=>{let r;return r={some:o,none:u,expect:f,unwrap:e,unwrapOr:m,andThen:a,map:t,toResult:n,toString:p},r;function o(){return!1}function u(){return!0}function f(i){throw`${i}`}function e(){throw`NONE
${Error().stack}`}function m(i){return i}function a(i){return r}function t(i){return r}function n(i){return y(i)}function p(){return"NONE"}})();function T(r){let o;return o={ok:u,err:f,val:e,expect:m,expectErr:a,unwrap:t,unwrapOr:n,unwrapSafely:p,andThen:i,map:k,mapErr:l,toOption:A,toString:h},o;function u(){return!0}function f(){return!1}function e(){return r}function m(c){return e()}function a(c){return d(c)}function t(){return e()}function n(c){return e()}function p(){return e()}function i(c){return c(e())}function k(c){return T(c(e()))}function l(c){return o}function A(){return O(e())}function h(){return`Ok(${x(e())})`}}var S=(()=>{return{isOption:r,isSome:o,isNone:u,wrap:f,wrapAsync:e,unwrapAll:m,unwrapAny:a};function r(t){return o(t)||u(t)}function o(t){return t!=null&&typeof t=="object"&&"some"in t&&"none"in t&&"val"in t&&"expect"in t&&"unwrap"in t&&"unwrapOr"in t&&"unwrapSafely"in t&&"andThen"in t&&"map"in t&&"toResult"in t&&"toString"in t&&typeof t.some=="function"&&typeof t.none=="function"&&typeof t.val=="function"&&typeof t.expect=="function"&&typeof t.unwrap=="function"&&typeof t.unwrapOr=="function"&&typeof t.unwrapSafely=="function"&&typeof t.andThen=="function"&&typeof t.map=="function"&&typeof t.toResult=="function"&&typeof t.toString=="function"&&typeof t.some()=="boolean"&&typeof t.none()=="boolean"&&typeof t.toString()=="string"&&t.some()===!0&&t.none()===!1}function u(t){return t!=null&&typeof t=="object"&&"some"in t&&"none"in t&&"val"in t&&"expect"in t&&"unwrap"in t&&"unwrapOr"in t&&"unwrapSafely"in t&&"andThen"in t&&"map"in t&&"toResult"in t&&"toString"in t&&typeof t.some=="function"&&typeof t.none=="function"&&typeof t.val=="function"&&typeof t.expect=="function"&&typeof t.unwrap=="function"&&typeof t.unwrapOr=="function"&&typeof t.unwrapSafely=="function"&&typeof t.andThen=="function"&&typeof t.map=="function"&&typeof t.toResult=="function"&&typeof t.toString=="function"&&typeof t.some()=="boolean"&&typeof t.none()=="boolean"&&typeof t.toString()=="string"&&t.some()===!1&&t.none()===!0}function f(t){try{return O(t())}catch{return E}}async function e(t){try{return O(await t())}catch{return E}}function m(...t){let n=[],p=0n;for(;p<t.length;){let i=t[Number(p)];if(i.some())n.push(i.val());else return i;p++}return O(n)}function a(...t){let n=0n;for(;n<t.length;){let p=t[Number(n)];return p.some(),p}return E}})();var w=(()=>{return{isResult:r,isOk:o,isErr:u,wrap:f,wrapAsync:e,unwrapAll:m,unwrapAny:a};function r(t){return o(t)||u(t)}function o(t){return t!=null&&typeof t=="object"&&"ok"in t&&"err"in t&&"val"in t&&"expect"in t&&"expectErr"in t&&"unwrap"in t&&"unwrapOr"in t&&"unwrapSafely"in t&&"andThen"in t&&"map"in t&&"mapErr"in t&&"toOption"in t&&"toString"in t&&typeof t.ok=="function"&&typeof t.err=="function"&&typeof t.val=="function"&&typeof t.expect=="function"&&typeof t.expectErr=="function"&&typeof t.unwrap=="function"&&typeof t.unwrapOr=="function"&&typeof t.unwrapSafely=="function"&&typeof t.andThen=="function"&&typeof t.map=="function"&&typeof t.mapErr=="function"&&typeof t.toOption=="function"&&typeof t.toString=="function"&&typeof t.ok()=="boolean"&&typeof t.err()=="boolean"&&typeof t.toString()=="string"&&t.ok()===!0&&t.err()===!1}function u(t){return t!=null&&typeof t=="object"&&"ok"in t&&"err"in t&&"val"in t&&"stack"in t&&"expect"in t&&"expectErr"in t&&"unwrap"in t&&"unwrapOr"in t&&"andThen"in t&&"map"in t&&"mapErr"in t&&"toOption"in t&&"toString"in t&&typeof t.ok=="function"&&typeof t.err=="function"&&typeof t.val=="function"&&typeof t.stack=="function"&&typeof t.expect=="function"&&typeof t.expectErr=="function"&&typeof t.unwrap=="function"&&typeof t.unwrapOr=="function"&&typeof t.andThen=="function"&&typeof t.map=="function"&&typeof t.mapErr=="function"&&typeof t.toOption=="function"&&typeof t.toString=="function"&&typeof t.ok()=="boolean"&&typeof t.err()=="boolean"&&typeof t.toString()=="string"&&t.ok()===!1&&t.err()===!0}function f(t){try{return T(t())}catch(n){return y(n)}}async function e(t){try{return T(await t())}catch(n){return y(n)}}function m(...t){let n=[],p=0n;for(;p<t.length;){let i=t[Number(p)];if(i.ok())n.push(i.val());else return i;p++}return T(n)}function a(...t){let n=[],p=0n;for(;p<t.length;){let i=t[Number(p)];if(i.ok())return i;n.push(i.val()),p++}return y(n)}})();function Y(r){return S.wrapAsync(r)}function $(r){return w.wrapAsync(r)}function j(r){return S.wrap(r)}function H(r){return w.wrap(r)}function O(r){return{some:o,none:u,val:f,expect:e,unwrap:m,unwrapOr:a,unwrapSafely:t,andThen:n,map:p,toResult:i,toString:k};function o(){return!0}function u(){return!1}function f(){return r}function e(l){return f()}function m(){return f()}function a(l){return f()}function t(){return f()}function n(l){return l(f())}function p(l){return O(l(f()))}function i(l){return T(f())}function k(){return`Some(${x(f())})`}}0&&(module.exports={Err,None,Ok,Option,Result,Some,assert,panic,require,toString,wrapAsyncO,wrapAsyncR,wrapO,wrapR});
//# sourceMappingURL=data:application/json;base64,