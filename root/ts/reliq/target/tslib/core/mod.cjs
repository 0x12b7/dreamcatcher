"use strict";var r,n=Object.defineProperty,t=Object.getOwnPropertyDescriptor,e=Object.getOwnPropertyNames,u=Object.prototype.hasOwnProperty,o={};((r,t)=>{for(var e in t)n(r,e,{get:t[e],enumerable:!0})})(o,{Err:()=>d,None:()=>v,Ok:()=>g,Option:()=>c,Result:()=>a,Some:()=>k,Unsafe:()=>i,allO:()=>O,allR:()=>l,anyO:()=>E,anyR:()=>s,flag:()=>w,isBranded:()=>p,isBrandedStruct:()=>f,wrap:()=>m,wrapAsync:()=>y}),module.exports=(r=o,((r,o,a,c)=>{if(o&&"object"==typeof o||"function"==typeof o)for(let i of e(o))u.call(r,i)||i===a||n(r,i,{get:()=>o[i],enumerable:!(c=t(o,i))||c.enumerable});return r})(n({},"__esModule",{value:!0}),r));var a={all:function(r){let n=[],t=0;for(;t<r.length;){let e=r.at(t);if(!e.ok())return e;n.push(e.unwrap()),t++}return g(n)},any:function(r){let n=[],t=0;for(;t<r.length;){let e=r.at(t);if(e.ok())return e;n.push(e.inspect()),t++}return d(n)},wrap:function(r,...n){try{return g(r(...n))}catch(r){return d(i(r))}},wrapAsync:async function(r,...n){try{return g(await r(...n))}catch(r){return d(i(r))}}},c={flag:function(r){return null==r?v:k(r)},all:function(...r){let n=[],t=0;for(;t<r.length;){let e=r.at(t);if(e.none())return e;n.push(e.unwrap()),t++}return k(n)},any:function(...r){let n=0;for(;n<r.length;){let t=r.at(n);if(t.some())return t;n++}return v}};function i(r){return{unwrap:n,parse:function(r){return r(n())?k(n()):v}};function n(){return r}}function f(r,n){return(r=>{let t=null!=r&&"object"==typeof r&&"type"in r&&"string"==typeof r.type;if(!1===t)return!1;if(void 0!==n){let e=n;t=t&&r.type===e}return t})(r)}function p(r,n){return(r=>{let t=null!=r&&"object"==typeof r&&"type"in r&&"function"==typeof r.type&&"string"==typeof r.type();if(!1===t)return!1;if(void 0!==n){let e=n;t=t&&r.type()===e}return t})(r)}var l=a.all,s=a.any,m=a.wrap,y=a.wrapAsync;function g(r){let n;return n={ok:function(){return!0},err:function(){return!1},expect:function(r){return t()},expectErr:function(r){h(b("PANIC",r))},unwrap:t,unwrapOr:function(r){return t()},and:function(r){return r(t())},map:function(r){return g(r(t()))},mapErr:function(r){return n},recover:function(r){return n},degrade:function(r){return d(r(t()))},toOption:function(){return k(t())}};function t(){return r}}function d(r,n=A){let t,e,u,o;return u=r,o=n,e=o.parseStackTrace(d),t={ok:function(){return!1},err:function(){return!0},inspect:a,stack:function(){return e},expect:function(r){let n=a(),t=v;if(n instanceof Error){let e=b({code:n.name.toUpperCase(),message:r});t=k(e)}t.none()&&o.matchError(n,(n=>{n.message=n.message.map((n=>n+"\n\n     Context\n     "+r)),t=k(n)}));h(t.toResult(void 0).recover((()=>b({code:"PANIC",message:r}))).unwrap())},expectErr:function(r){return a()},unwrapOr:function(r){return r},and:function(r){return t},map:function(r){return t},mapErr:function(r){return d(r(a()))},recover:function(r){return g(r(a()))},degrade:function(r){return t},toOption:function(){return v}};function a(){return u}}var w=c.flag,O=c.all,E=c.any;function k(r){return{type:function(){return"Some"},some:function(){return!0},none:function(){return!1},expect:function(n){return r},unwrap:function(){return r},unwrapOr:function(n){return r},and:function(n){return n(r)},map:function(n){return k(n(r))},toResult:function(n){return g(r)}}}var v=(()=>{let r;return r={type:function(){return"None"},some:function(){return!1},none:function(){return!0},expect:function(r){h(b("ERR_VALUE_REQUIRED",r))},unwrapOr:function(r){return r},and:function(n){return r},map:function(n){return r},toResult:function(r){return d(r)}}})();function h(r,n,t){if("object"==typeof r){let t=r;w(n).unwrapOr(A);throw["","",`     ${e=t.code,"[31m"+e+"[0m"} ${t.message.unwrapOr("<<< UNAVAILABLE >>>")}`,"","     STACK_TRACE"+t.stack].join("\n")}{let e=r,u=w(n).unwrapOr(h),o=w(t).unwrapOr(A);throw Error().name="PANIC","PANIC "+e+"\n"+o.parseStackTrace(u)}var e}var A=(()=>{return{matchError:function(r,n,t){let e=r,u=null!=e&&"object"==typeof e&&f(e,"Error");if(!u)return!1;if(void 0!==n&&"string"==typeof n){let r=n;u=u&&"code"in e&&"string"==typeof e.code&&e.code===r}if(!u)return!1;let o=v;void 0!==n&&"function"==typeof n&&(o=k(n));void 0!==t&&(o=k(t));return o.map((r=>{r(e)})),!0},localStackTrace:r,parseStackTrace:function(t){return function(r){let t="";return r.split("\n").map((r=>function(r,n,t){return"Error"===r?t(r):n(r)}(r,(r=>r.trim()),(r=>"")))).filter((r=>r.length>0)).map((r=>function(r){let n=v,t=v,e=v,u=v,o=/at (?<location>.*?) \((?<path>.*?):(?<line>\d+):(?<column>\d+)\)/.exec(r);o&&o.groups&&(n=o.groups.location?k(o.groups.location):v,t=o.groups.path?k(o.groups.path):v,e=o.groups.line?k(BigInt(o.groups.line)):v,u=o.groups.column?k(BigInt(o.groups.column)):v);return[n,t,e,u]}(r))).map((([r,t,e,u])=>function(r,t,e,u){let o="at",a="<<< UNAVAILABLE >>>";return O(r,t,e,u).map((([r,t,e,u])=>`     ${n(o)} ${t} ${n(r)} ${e} ${u}`)).unwrapOr("     "+n(a))}(r,t,e,u))).forEach((r=>{t+="\n"+r})),t}((e=t,"string"==typeof e?e:r(e).unwrapOr("")));var e},convertToStandardError:function(r){let n=Error();return n.name=r.code,n.message=r.message.unwrapOr(""),n.stack=r.stack.toString(),n.cause=void 0,n}};function r(r){let n=Error();return Error.captureStackTrace(n,r),n.stack?k(n.stack):v}function n(r){return"[31m"+r+"[0m"}})();function b(r,n,t){if("object"==typeof r){let n=r,t=w(n.handler).unwrapOr(A);return{type:"Error",code:n.code,message:w(n.message),payload:w(n.payload),stack:w(n.stack).unwrapOr(t.parseStackTrace(b))}}return{type:"Error",code:r,message:w(n),payload:w(t),stack:A.parseStackTrace(b)}}//# sourceMappingURL=data:application/json;base64,