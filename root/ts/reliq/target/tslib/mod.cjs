"use strict";var R=Object.defineProperty;var B=Object.getOwnPropertyDescriptor;var W=Object.getOwnPropertyNames;var U=Object.prototype.hasOwnProperty;var v=(n,r)=>{for(var e in r)R(n,e,{get:r[e],enumerable:!0})},G=(n,r,e,o)=>{if(r&&typeof r=="object"||typeof r=="function")for(let p of W(r))!U.call(n,p)&&p!==e&&R(n,p,{get:()=>r[p],enumerable:!(o=B(r,p))||o.enumerable});return n};var H=n=>G(R({},"__esModule",{value:!0}),n);var C={};v(C,{Err:()=>x,None:()=>g,Ok:()=>y,Some:()=>d});module.exports=H(C);function w(n,r=w){let e=Error();throw Error.captureStackTrace(e,r),n+`
`+e.stack}function S(n,r){return(o=>o!=null&&typeof o=="object"&&"type"in o&&typeof o.type=="function"&&typeof o.type()=="string"&&o.type()===r)(n)}function h(n){return(e=>S(e,"None"))(n)}function _(n){return V(n)||h(n)}function V(n){return S(n,"Some")}function l(){return{toString:n};function n(r){if(r==null||typeof r!="object")return String(r);try{return JSON.stringify(r)}catch{}return"[object Object]"}}var g=(()=>{let n;return n={type:r,some:e,none:o,expect:p,unwrap:c,unwrapOr:i,and:a,map:O,toResult:k,toString:f,display:m};function r(){return"None"}function e(){return!1}function o(){return!0}function p(u){w(u,p)}function c(){w(r())}function i(u){return u}function a(u){return n}function O(u){return n}function k(u){return x(u)}function f(){return r()}function m(){return console.log(f())}})();function d(n){return{type:r,some:e,none:o,expect:p,unwrap:c,unwrapOr:i,unwrapSafely:a,and:O,map:k,toResult:f,toString:m,display:u};function r(){return"Some"}function e(){return!0}function o(){return!1}function p(s){return n}function c(){return n}function i(s){return n}function a(){return n}function O(s){return s(n)}function k(s){return d(s(n))}function f(s){return y(n)}function m(){return r()+"("+l().toString(n)+")"}function u(){return console.log(m())}}function x(n){let r,e;{let t=Error();return Error.captureStackTrace(t,x),e=t.stack??"",r={type:o,ok:p,err:c,inspect:i,stack:a,expect:O,expectErr:k,unwrap:f,unwrapOr:m,and:u,map:s,mapErr:E,restore:A,toOption:b,toString:T,display:N}}function o(){return"Err"}function p(){return!1}function c(){return!0}function i(){return n}function a(){return e}function O(t){throw t+`
`+a()}function k(t){return i()}function f(){let t=i();throw t!=null&&typeof t=="object"&&"code"in t&&"message"in t&&typeof t.code=="string"&&_(t.message)?(t.message.map(F=>{throw t.code+": "+F+`
`+a()}),t.code+`
`+a()):l().toString(i())+`
`+a()}function m(t){return t}function u(t){return r}function s(t){return r}function E(t){return x(t(i()))}function A(t){return y(t(i()))}function b(){return g}function T(){return o()+"("+l().toString(i())+`)
`+a()}function N(){return console.log(T())}}function y(n){let r;return r={type:e,ok:o,err:p,expect:c,expectErr:i,unwrap:a,unwrapOr:O,unwrapSafely:k,and:f,map:m,mapErr:u,restore:s,toOption:E,toString:A,display:b};function e(){return"Ok"}function o(){return!0}function p(){return!1}function c(T){return n}function i(T){w(T,i)}function a(){return n}function O(T){return n}function k(){return n}function f(T){return T(n)}function m(T){return y(T(n))}function u(T){return r}function s(T){return r}function E(){return d(n)}function A(){return e()+"("+l().toString(n)+")"}function b(){return console.log(A())}}0&&(module.exports={Err,None,Ok,Some});
//# sourceMappingURL=data:application/json;base64,