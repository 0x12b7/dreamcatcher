"use strict";var C=Object.defineProperty;var X=Object.getOwnPropertyDescriptor;var Z=Object.getOwnPropertyNames;var Q=Object.prototype.hasOwnProperty;var J=(t,o)=>{for(var r in o)C(t,r,{get:o[r],enumerable:!0})},rr=(t,o,r,n)=>{if(o&&typeof o=="object"||typeof o=="function")for(let e of Z(o))!Q.call(t,e)&&e!==r&&C(t,e,{get:()=>o[e],enumerable:!(n=X(o,e))||n.enumerable});return t};var tr=t=>rr(C({},"__esModule",{value:!0}),t);var or={};J(or,{Alloc:()=>h,DeAlloc:()=>N,DomError:()=>w,Dyn:()=>j,Err:()=>y,Error:()=>k,Fpv:()=>V,None:()=>c,Ok:()=>x,Ref:()=>q,Some:()=>f,StackTrace:()=>S,StackTraceLine:()=>F,Unsafe:()=>A,allO:()=>B,allR:()=>U,anyO:()=>G,anyR:()=>W,clone:()=>H,isBranded:()=>K,panic:()=>_,toString:()=>z,wrap:()=>b,wrapAsync:()=>P});module.exports=tr(or);var D=(()=>{return{all:t,any:o,wrap:r,wrapAsync:n};function t(e){let p=[],i=0;for(;i<e.length;){let u=e.at(i);if(u.ok())p.push(u.unlock());else return u;i++}return x(p)}function o(e){let p=[],i=0;for(;i<e.length;){let u=e.at(i);if(u.ok())return u;p.push(u.inspect()),i++}return y(p)}function r(e,...p){try{return x(e(...p))}catch(i){return y(A(i))}}async function n(e,...p){try{return x(await e(...p))}catch(i){return y(A(i))}}})();var M=(()=>{return{all:t,any:o};function t(r){let n=[],e=0;for(;e<r.length;){let p=r.at(e);if(p.none())return p;n.push(p.unlock()),e++}return f(n)}function o(r){let n=0;for(;n<r.length;){let e=r.at(n);if(e.some())return e}return c}})();function A(t){return{unwrap:o,parse:r};function o(){return t}function r(n){return n(o())?f(o()):c}}var U=D.all,W=D.any,b=D.wrap,P=D.wrapAsync;function x(t){let o;return o={ok:r,err:n,expect:e,expectErr:p,unlock:i,unlockOr:u,and:a,map:O,mapErr:m,recover:l,degrade:T,toOption:d};function r(){return!0}function n(){return!1}function e(s){return i()}function p(s){_(k("PANIC",s))}function i(){return t}function u(s){return i()}function a(s){return s(i())}function O(s){return x(s(i()))}function m(s){return o}function l(s){return o}function T(s){return y(s(i()))}function d(){return f(i())}}function y(t){let o,r;return r=S(y),o={ok:n,err:e,inspect:p,stack:i,expect:u,expectErr:a,unlockOr:O,and:m,map:l,mapErr:T,recover:d,degrade:s,toOption:g};function n(){return!1}function e(){return!0}function p(){return t}function i(){return r}function u(E){let R=p(),L=c;R!=null&&typeof R=="object"&&"code"in R&&typeof R.code=="string"&&(L=f(R.code)),_(k({code:L.unlockOr("ERR_TRIED_UNWRAP_ERR"),message:f(["Fatal Error >>> Tried to unwrap an error value.","",E].join(`
`)),payload:c,stack:i()}))}function a(E){return p()}function O(E){return E}function m(E){return o}function l(E){return o}function T(E){return y(E(p()))}function d(E){return x(E(p()))}function s(E){return o}function g(){return c}}function q(t){let o,r,n;return r=0n,n=new Map,o={unwrap:e,mut:p,onChange:i};function e(){return t}function p(a){let O=e(),m=a;return t=a,n.values().toArray().forEach(l=>l(m,O)),o}function i(a){let O=u();return n.set(O,a),()=>{n.delete(O)}}function u(){return r+=1n}}function j(t,o,r,...n){let e,p;{e=new Map,p=0n;let m=0n;for(;m<r;){let l=i();e.set(l,t(...n)),m++}return function(...l){let T,d;return T=c,d=s();function s(){return u().toResult(void 0).map(E=>(T=f(E),h(a(E),{deAlloc:g}))).recover(()=>(T=f(i()),h(t(...l),{deAlloc:g}))).unlock()}function g(){return T.toResult(void 0).map(E=>{T=c,O(E,o(d.expect("Dyn: Could not deallocate resource but the key was available."+v)))}),d=N({deAlloc:g})}}}function i(){return p+=1n}function u(){let m=e.keys().toArray().at(0);return m?f(m):c}function a(m){let l=e.get(m);return e.delete(m),l}function O(m,l){e.set(m,l)}}function N(t){return{...c,...t}}function h(t,o){return{...f(t),...o}}var B=M.all,G=M.any;function f(t){return{some:o,none:r,expect:n,unlock:e,unlockOr:p,and:i,map:u,toResult:a};function o(){return!0}function r(){return!1}function n(O){return t}function e(){return t}function p(O){return t}function i(O){return O(t)}function u(O){return f(O(t))}function a(O){return x(t)}}var c=(()=>{let t;return t={some:o,none:r,expect:n,unlockOr:e,and:p,map:i,toResult:u};function o(){return!1}function r(){return!0}function n(a){_(k("NONE.ERR_MISSING_VALUE",a))}function e(a){return a}function p(a){return t}function i(a){return t}function u(a){return y(a)}})();function V(t,o=2n){let r;return e()===0n?y(k("FPV.ERR_PRECISION_IS_ZERO","Fpv: Does not support zero precision.")):e()<0n?y(k("FPV.ERR_PRECISION_IS_NEGATIVE","Fpv: Does not support negative precision.")):(r=l(t),x({unwrap:n,precision:e,representation:p,add:i,sub:u,mul:a,div:O}));function n(){return r}function e(){return o}function p(){return 10n**e()}function i(T){return m(()=>r+l(T))}function u(T){return m(()=>r-l(T))}function a(T){return m(()=>r*l(T)/p())}function O(T){let d=l(T);return d===0n?y(k("FPV.ERR_DIVISION_BY_ZERO","Fpv: Cannot divide by zero.")):x(m(()=>r*p()/d))}function m(T){return V(T()).expect("Fpv: Failed to wrap the task result into an Fpv."+v)}function l(T){return typeof T=="bigint"?T:T.unwrap()}}function z(t){if(t==null||typeof t!="object")return String(t);try{return JSON.stringify(t)}catch{}return"[object Object]"}function H(t){return b(()=>structuredClone(t)).mapErr(o=>o.parse(r=>r!=null&&typeof r=="object"&&"name"in r&&"code"in r&&"message"in r&&typeof r.name=="string"&&typeof r.code=="number"&&typeof r.message=="string").map(r=>w(r)).unlockOr(w()))}function K(t,o){return(n=>n!=null&&typeof n=="object"&&"type"in n&&typeof n.type=="function"&&typeof n.type()=="string"&&n.type()===o)(t)}function F(t){let o,r,n,e;{o=c,r=c,n=c,e=c;let m=t.split(" "),l=m.shift();if(l&&l.trim().length!==0){let T=m.shift(),d=m.shift();if(T&&T.trim().length!==0&&(o=f(T)),d&&d.trim().length!==0){let s=d.replaceAll("(","").replaceAll(")","").split(":"),g=s.shift(),E=s.at(s.length-1),R=s.at(s.length-2);g&&g.trim().length!==0&&(r=f(g)),E&&E.trim().length!==0&&(e=f(BigInt(E))),R&&R.trim().length!==0&&(n=f(BigInt(R)))}}return{toString:p,location:i,path:u,line:a,column:O}}function p(m){let l="",T="???",d=i().unlockOr(T),s=u().unlockOr(T),g=a().unlockOr(T),E=O().unlockOr(T);return m&&(l=m+" |>"),`${l} ${d} ${s} ${g} ${E}`}function i(){return o}function u(){return r}function a(){return n}function O(){return e}}function S(t){let o;return typeof t=="string"&&(o=e(t)),typeof t=="function"&&(o=e(I(t).unlockOr(""))),Array.isArray(t)&&(o=t),{toString:r,lines:n};function r(){let p="";return n().map((i,u)=>i.toString(BigInt(u))).forEach(i=>p+=i),p}function n(){return o}function e(p){return p.split(`
`).map(i=>i.trim()).filter(i=>i.length>0).map(i=>F(i))}}S(`
    Error: Something went wrong
        at someFunction (/path/to/file.js:10:15)
        <<< STACK_TRACE_LINE.ERR_LOCATION_UNAVAILABLEE >>>
        at anotherFunction (/path/to/otherfile.js:20:25)
        at main (/path/to/mainfile.js:30:35)
`);function I(t){let o=Error();return Error.captureStackTrace(o,t),o.stack?f(o.stack):c}function _(t,o){let r=o||_;if(typeof t=="object"){let p=t,i=p.code,u="";p.message.map(O=>u=O);let a=Error();throw a.name=i,a.message=u,a.stack=p.stack.toString(),a.cause=void 0,a}let n=t,e=Error();throw e.name="",e.message=n,e.cause=void 0,e.stack=I(r).toResult(void 0).recover(()=>"").unlock(),e}function k(t,o,r){{if(typeof t=="object")return t;let n=t,e=c,p=o;p&&(e=f(p));let i=c,u=r;return u&&(i=f(u)),k({code:n,message:e,payload:i,stack:S(k)})}}var Y={EncodingError:"DOM.ERR_ENCODING",NotReadableError:"DOM.ERR_NOT_READABLE",UnknownError:"DOM.ERR_UNKNOWN",ConstraintError:"DOM.ERR_CONSTRAINT",DataError:"DOM.ERR_DATA",TransactionInactiveError:"DOM.ERR_TRANSACTION_INACTIVE",ReadOnlyError:"DOM.ERR_READ_ONLY",VersionError:"DOM.ERR_VERSION",OperationError:"DOM.ERR_OPERATION",NotAllowedError:"DOM.ERR_NOT_ALLOWED"};var $={1:"DOM.ERR_INDEX_SIZE",3:"DOM.ERR_HIERARCHY_REQUEST",4:"DOM.ERR_WRONG_DOCUMENT",5:"DOM.ERR_INVALID_CHARACTER",7:"DOM.ERR_NO_MODIFICATION_ALLOWED",8:"DOM.ERR_NOT_FOUND",9:"DOM.ERR_NOT_SUPPORTED",11:"DOM.ERR_INVALID_STATE",12:"DOM.ERR_SYNTAX",13:"DOM.ERR_INVALID_MODIFICATION",14:"DOM.ERR_NAMESPACE",17:"DOM.ERR_TYPE_MISMATCH",18:"DOM.ERR_SECURITY",19:"DOM.ERR_NETWORK",20:"DOM.ERR_ABORT",21:"DOM.ERR_URL_MISMATCH",22:"DOM.ERR_QUOTA_EXCEEDED",23:"DOM.ERR_TIMEOUT",24:"DOM.ERR_INVALID_NODE_TYPE",25:"DOM.ERR_DATA_CLONE"};function w(t){{let r=t;return r===void 0?k("DOM.ERR_UNKNOWN"):k(o(r),r.message)}function o(r){let n="DOM.ERR_UNKNOWN";return r.code===1||r.code===3||r.code===4||r.code===5||r.code===7||r.code===8||r.code===9||r.code===11||r.code===12||r.code===13||r.code===14||r.code===17||r.code===18||r.code===19||r.code===20||r.code===21||r.code===22||r.code===23||r.code===24||r.code===25?n=$[r.code]:(r.name==="EncodingError"||r.name==="NotReadableError"||r.name==="UnknownError"||r.name==="ConstraintError"||r.name==="DataError"||r.name==="TransactionInactiveError"||r.name==="ReadOnlyError"||r.name==="VersionError"||r.name==="OperationError"||r.name==="NotAllowedError")&&(n=Y[r.name]),n}}var v=`
Uh-oh, looks like Reliq took a wrong turn!
Don't worry, it's not you-it's us.
Please report this at dreamcatcher_foundation@proton.me
`;0&&(module.exports={Alloc,DeAlloc,DomError,Dyn,Err,Error,Fpv,None,Ok,Ref,Some,StackTrace,StackTraceLine,Unsafe,allO,allR,anyO,anyR,clone,isBranded,panic,toString,wrap,wrapAsync});
//# sourceMappingURL=data:application/json;base64,