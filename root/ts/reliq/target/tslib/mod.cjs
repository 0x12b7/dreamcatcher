"use strict";var H=Object.defineProperty;var tr=Object.getOwnPropertyDescriptor;var nr=Object.getOwnPropertyNames;var er=Object.prototype.hasOwnProperty;var ir=(t,n)=>{for(var r in n)H(t,r,{get:n[r],enumerable:!0})},Er=(t,n,r,e)=>{if(n&&typeof n=="object"||typeof n=="function")for(let o of nr(n))!er.call(t,o)&&o!==r&&H(t,o,{get:()=>n[o],enumerable:!(e=tr(n,o))||e.enumerable});return t};var Tr=t=>Er(H({},"__esModule",{value:!0}),t);var ar={};ir(ar,{Alloc:()=>S,DeAlloc:()=>F,DomError:()=>w,Dyn:()=>j,Err:()=>N,Error:()=>_,Fpv:()=>G,None:()=>s,Ok:()=>y,Ref:()=>q,Some:()=>R,Unsafe:()=>C,allO:()=>b,allR:()=>Y,anyO:()=>v,anyR:()=>Q,clone:()=>z,isBranded:()=>$,isBrandedStruct:()=>M,panic:()=>I,toString:()=>X,wrap:()=>K,wrapAsync:()=>h});module.exports=Tr(ar);var D=(()=>{return{all:t,any:n,wrap:r,wrapAsync:e};function t(o){let E=[],p=0;for(;p<o.length;){let O=o.at(p);if(O.ok())E.push(O.unlock());else return O;p++}return y(E)}function n(o){let E=[],p=0;for(;p<o.length;){let O=o.at(p);if(O.ok())return O;E.push(O.inspect()),p++}return N(E)}function r(o,...E){try{return y(o(...E))}catch(p){return N(C(p))}}async function e(o,...E){try{return y(await o(...E))}catch(p){return N(C(p))}}})();var L=(()=>{return{flag:t,all:n,any:r};function t(e){return e===null?s:e===void 0?s:R(e)}function n(...e){let o=[],E=0;for(;E<e.length;){let p=e.at(E);if(p.none())return p;o.push(p.unlock()),E++}return R(o)}function r(...e){let o=0;for(;o<e.length;){let E=e.at(o);if(E.some())return E;o++}return s}})();function C(t){return{unwrap:n,parse:r};function n(){return t}function r(e){return e(n())?R(n()):s}}var Y=D.all,Q=D.any,K=D.wrap,h=D.wrapAsync;function y(t){let n;return n={ok:r,err:e,expect:o,expectErr:E,unlock:p,unlockOr:O,and:c,map:f,mapErr:i,recover:T,degrade:u,toOption:a};function r(){return!0}function e(){return!1}function o(m){return p()}function E(m){I(_("PANIC",m))}function p(){return t}function O(m){return p()}function c(m){return m(p())}function f(m){return y(m(p()))}function i(m){return n}function T(m){return n}function u(m){return N(m(p()))}function a(){return R(p())}}function N(t,n=A){let r,e,o,E;return o=t,E=n,e=E.parseStackTrace(N),r={ok:p,err:O,inspect:c,stack:f,expect:i,expectErr:T,unlockOr:u,and:a,map:m,mapErr:k,recover:l,degrade:V,toOption:P};function p(){return!1}function O(){return!0}function c(){return o}function f(){return e}function i(d){let B=c(),W=s;if(B instanceof Error){let g=_({code:B.name.toUpperCase(),message:d});W=R(g)}W.none()&&E.matchError(B,g=>{g.message=g.message.map(or=>or+`

     Context
     `+d),W=R(g)});let rr=W.toResult(void 0).recover(()=>_({code:"PANIC",message:d})).unlock();I(rr)}function T(d){return c()}function u(d){return d}function a(d){return r}function m(d){return r}function k(d){return N(d(c()))}function l(d){return y(d(c()))}function V(d){return r}function P(){return s}}function q(t){let n,r,e;return r=0n,e=new Map,n={unwrap:o,mut:E,onChange:p};function o(){return t}function E(c){let f=o(),i=c;return t=c,e.values().toArray().forEach(T=>T(i,f)),n}function p(c){let f=O();return e.set(f,c),()=>{e.delete(f)}}function O(){return r+=1n}}function j(t,n,r,...e){let o,E;{o=new Map,E=0n;let i=0n;for(;i<r;){let T=p();o.set(T,t(...e)),i++}return function(...T){let u,a;return u=s,a=m();function m(){return O().toResult(void 0).map(l=>(u=R(l),S(c(l),{deAlloc:k}))).recover(()=>(u=R(p()),S(t(...T),{deAlloc:k}))).unlock()}function k(){return u.toResult(void 0).map(l=>{u=s,f(l,n(a.expect("Dyn: Could not deallocate resource but the key was available."+U)))}),a=F({deAlloc:k})}}}function p(){return E+=1n}function O(){let i=o.keys().toArray().at(0);return i?R(i):s}function c(i){let T=o.get(i);return o.delete(i),T}function f(i,T){o.set(i,T)}}function F(t){return{...s,...t}}function S(t,n){return{...R(t),...n}}var x=L.flag,b=L.all,v=L.any;function R(t){return{type:n,some:r,none:e,expect:o,unlock:E,unlockOr:p,and:O,map:c,toResult:f};function n(){return"Some"}function r(){return!0}function e(){return!1}function o(i){return t}function E(){return t}function p(i){return t}function O(i){return i(t)}function c(i){return R(i(t))}function f(i){return y(t)}}var s=(()=>{let t;return t={type:n,some:r,none:e,expect:o,unlockOr:E,and:p,map:O,toResult:c};function n(){return"None"}function r(){return!1}function e(){return!0}function o(f){I(_("ERR_VALUE_REQUIRED",f))}function E(f){return f}function p(f){return t}function O(f){return t}function c(f){return N(f)}})();function G(t,n=2n){let r;return o()===0n?N(_("FPV.ERR_PRECISION_IS_ZERO","Fpv: Does not support zero precision.")):o()<0n?N(_("FPV.ERR_PRECISION_IS_NEGATIVE","Fpv: Does not support negative precision.")):(r=T(t),y({unwrap:e,precision:o,representation:E,add:p,sub:O,mul:c,div:f}));function e(){return r}function o(){return n}function E(){return 10n**o()}function p(u){return i(()=>r+T(u))}function O(u){return i(()=>r-T(u))}function c(u){return i(()=>r*T(u)/E())}function f(u){let a=T(u);return a===0n?N(_("FPV.ERR_DIVISION_BY_ZERO","Fpv: Cannot divide by zero.")):y(i(()=>r*E()/a))}function i(u){return G(u()).expect("Fpv: Failed to wrap the task result into an Fpv."+U)}function T(u){return typeof u=="bigint"?u:u.unwrap()}}function X(t){if(t==null||typeof t!="object")return String(t);try{return JSON.stringify(t)}catch{}return"[object Object]"}function z(t){return K(()=>structuredClone(t)).mapErr(n=>n.parse(r=>r!=null&&typeof r=="object"&&"name"in r&&"code"in r&&"message"in r&&typeof r.name=="string"&&typeof r.code=="number"&&typeof r.message=="string").map(r=>w(r)).unlockOr(w()))}function M(t,n){return(o=>{let E=o!=null&&typeof o=="object"&&"type"in o&&typeof o.type=="string";if(E===!1)return!1;if(n!==void 0){let p=n;E=E&&o.type===p}return E})(t)}function $(t,n){return(o=>{let E=o!=null&&typeof o=="object"&&"type"in o&&typeof o.type=="function"&&typeof o.type()=="string";if(E===!1)return!1;if(n!==void 0){let p=n;E=E&&o.type()===p}return E})(t)}function I(t,n,r){if(typeof t=="object"){let e=t,o=x(n).unlockOr(A);throw["","",`     ${ur(e.code)} ${e.message.unlockOr("<<< UNAVAILABLE >>>")}`,"","     STACK_TRACE"+e.stack].join(`
`)}else{let e=t,o=x(n).unlockOr(I),E=x(r).unlockOr(A),p=Error();throw p.name="PANIC","PANIC "+e+`
`+E.parseStackTrace(o)}}function ur(t){return"\x1B[31m"+t+"\x1B[0m"}var A=(()=>{return{matchError:t,localStackTrace:n,parseStackTrace:r,convertToStandardError:e};function t(i,T,u){let a=i,m=a!=null&&typeof a=="object"&&M(a,"Error");if(!m)return!1;if(T!==void 0&&typeof T=="string"){let l=T;m=m&&"code"in a&&typeof a.code=="string"&&a.code===l}if(!m)return!1;let k=s;return T!==void 0&&typeof T=="function"&&(k=R(T)),u!==void 0&&(k=R(u)),k.map(l=>{l(a)}),!0}function n(i){let T=Error();return Error.captureStackTrace(T,i),T.stack?R(T.stack):s}function r(i){return E(o(i))}function e(i){let T=Error();return T.name=i.code,T.message=i.message.unlockOr(""),T.stack=i.stack.toString(),T.cause=void 0,T}function o(i){return typeof i=="string"?i:n(i).unlockOr("")}function E(i){let T="";return i.split(`
`).map(u=>c(u,a=>a.trim(),a=>"")).filter(u=>u.length>0).map(u=>p(u)).map(([u,a,m,k])=>O(u,a,m,k)).forEach(u=>{T+=`
`+u}),T}function p(i){let T=s,u=s,a=s,m=s,l=/at (?<location>.*?) \((?<path>.*?):(?<line>\d+):(?<column>\d+)\)/.exec(i);return l&&l.groups&&(T=l.groups.location?R(l.groups.location):s,u=l.groups.path?R(l.groups.path):s,a=l.groups.line?R(BigInt(l.groups.line)):s,m=l.groups.column?R(BigInt(l.groups.column)):s),[T,u,a,m]}function O(i,T,u,a){let m="at";return b(i,T,u,a).map(([l,V,P,d])=>`     ${f(m)} ${V} ${f(l)} ${P} ${d}`).unlockOr("     "+f("<<< UNAVAILABLE >>>"))}function c(i,T,u){return i==="Error"?u(i):T(i)}function f(i){return"\x1B[31m"+i+"\x1B[0m"}})();function _(t,n,r){{if(typeof t=="object"){let e=t,o=x(e.handler).unlockOr(A);return{type:"Error",code:e.code,message:x(e.message),payload:x(e.payload),stack:x(e.stack).unlockOr(o.parseStackTrace(_))}}return{type:"Error",code:t,message:x(n),payload:x(r),stack:A.parseStackTrace(_)}}}var Z={EncodingError:"DOM.ERR_ENCODING",NotReadableError:"DOM.ERR_NOT_READABLE",UnknownError:"DOM.ERR_UNKNOWN",ConstraintError:"DOM.ERR_CONSTRAINT",DataError:"DOM.ERR_DATA",TransactionInactiveError:"DOM.ERR_TRANSACTION_INACTIVE",ReadOnlyError:"DOM.ERR_READ_ONLY",VersionError:"DOM.ERR_VERSION",OperationError:"DOM.ERR_OPERATION",NotAllowedError:"DOM.ERR_NOT_ALLOWED"};var J={1:"DOM.ERR_INDEX_SIZE",3:"DOM.ERR_HIERARCHY_REQUEST",4:"DOM.ERR_WRONG_DOCUMENT",5:"DOM.ERR_INVALID_CHARACTER",7:"DOM.ERR_NO_MODIFICATION_ALLOWED",8:"DOM.ERR_NOT_FOUND",9:"DOM.ERR_NOT_SUPPORTED",11:"DOM.ERR_INVALID_STATE",12:"DOM.ERR_SYNTAX",13:"DOM.ERR_INVALID_MODIFICATION",14:"DOM.ERR_NAMESPACE",17:"DOM.ERR_TYPE_MISMATCH",18:"DOM.ERR_SECURITY",19:"DOM.ERR_NETWORK",20:"DOM.ERR_ABORT",21:"DOM.ERR_URL_MISMATCH",22:"DOM.ERR_QUOTA_EXCEEDED",23:"DOM.ERR_TIMEOUT",24:"DOM.ERR_INVALID_NODE_TYPE",25:"DOM.ERR_DATA_CLONE"};function w(t){{let r=t;return r===void 0?_("DOM.ERR_UNKNOWN"):_(n(r),r.message)}function n(r){let e="DOM.ERR_UNKNOWN";return r.code===1||r.code===3||r.code===4||r.code===5||r.code===7||r.code===8||r.code===9||r.code===11||r.code===12||r.code===13||r.code===14||r.code===17||r.code===18||r.code===19||r.code===20||r.code===21||r.code===22||r.code===23||r.code===24||r.code===25?e=J[r.code]:(r.name==="EncodingError"||r.name==="NotReadableError"||r.name==="UnknownError"||r.name==="ConstraintError"||r.name==="DataError"||r.name==="TransactionInactiveError"||r.name==="ReadOnlyError"||r.name==="VersionError"||r.name==="OperationError"||r.name==="NotAllowedError")&&(e=Z[r.name]),e}}var U=`
Uh-oh, looks like Reliq took a wrong turn!
Don't worry, it's not you-it's us.
Please report this at dreamcatcher_foundation@proton.me
`;0&&(module.exports={Alloc,DeAlloc,DomError,Dyn,Err,Error,Fpv,None,Ok,Ref,Some,Unsafe,allO,allR,anyO,anyR,clone,isBranded,isBrandedStruct,panic,toString,wrap,wrapAsync});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL21vZC50cyIsICIuLi8uLi9zcmMvd3JhcHBlci9yZXN1bHQvcmVzdWx0LnRzIiwgIi4uLy4uL3NyYy93cmFwcGVyL29wdGlvbi9vcHRpb24udHMiLCAiLi4vLi4vc3JjL3dyYXBwZXIvdW5zYWZlL3Vuc2FmZS50cyIsICIuLi8uLi9zcmMvd3JhcHBlci9yZXN1bHQvdXRpbC9zaG9ydGhhbmQudHMiLCAiLi4vLi4vc3JjL3dyYXBwZXIvcmVzdWx0L29rL29rLnRzIiwgIi4uLy4uL3NyYy93cmFwcGVyL3Jlc3VsdC9lcnIvZXJyLnRzIiwgIi4uLy4uL3NyYy93cmFwcGVyL3JlZi9yZWYudHMiLCAiLi4vLi4vc3JjL3dyYXBwZXIvcGVyZm9ybWFuY2UvZHluL2R5bi50cyIsICIuLi8uLi9zcmMvd3JhcHBlci9wZXJmb3JtYW5jZS9keW4vZGVfYWxsb2MudHMiLCAiLi4vLi4vc3JjL3dyYXBwZXIvcGVyZm9ybWFuY2UvZHluL2FsbG9jLnRzIiwgIi4uLy4uL3NyYy93cmFwcGVyL29wdGlvbi91dGlsL3Nob3J0aGFuZC50cyIsICIuLi8uLi9zcmMvd3JhcHBlci9vcHRpb24vc29tZS9zb21lLnRzIiwgIi4uLy4uL3NyYy93cmFwcGVyL29wdGlvbi9ub25lL25vbmUudHMiLCAiLi4vLi4vc3JjL3dyYXBwZXIvZnB2L2Zwdi50cyIsICIuLi8uLi9zcmMvdXRpbC90b19zdHJpbmcudHMiLCAiLi4vLi4vc3JjL3V0aWwvY2xvbmUudHMiLCAiLi4vLi4vc3JjL3R5cGUvdHJhaXQvZ3VhcmQvaXNfYnJhbmRlZF9zdHJ1Y3QudHMiLCAiLi4vLi4vc3JjL3R5cGUvdHJhaXQvZ3VhcmQvaXNfYnJhbmRlZC50cyIsICIuLi8uLi9zcmMvZXJyb3IvcGFuaWMudHMiLCAiLi4vLi4vc3JjL2Vycm9yL2Vycm9yX2hhbmRsZXIudHMiLCAiLi4vLi4vc3JjL2Vycm9yL2Vycm9yLnRzIiwgIi4uLy4uL3NyYy9lcnJvci9kb20tZXJyb3IvZXhjZXB0aW9uL2RvbV9leGNlcHRpb25fbmFtZV90b19kb21fZXJyb3JfY29kZV9tYXAudHMiLCAiLi4vLi4vc3JjL2Vycm9yL2RvbS1lcnJvci9leGNlcHRpb24vZG9tX2V4Y2VwdGlvbl9jb2RlX3RvX2RvbV9lcnJvcl9jb2RlX21hcC50cyIsICIuLi8uLi9zcmMvZXJyb3IvZG9tLWVycm9yL2RvbV9lcnJvci50cyIsICIuLi8uLi9zcmMvY29uc3RhbnQvaW50ZXJuYWxfZXJyb3JfbWVzc2FnZS50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiZXhwb3J0IHR5cGUgeyBBc3luY0Nsb3N1cmUgfSBmcm9tIFwiQHJvb3RcIjtcclxuZXhwb3J0IHR5cGUgeyBBc3luY0Z1bmN0aW9uIH0gZnJvbSBcIkByb290XCI7XHJcbmV4cG9ydCB0eXBlIHsgQ2xvc3VyZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5leHBvcnQgdHlwZSB7IEZ1bmN0aW9uIH0gZnJvbSBcIkByb290XCI7XHJcbmV4cG9ydCB0eXBlIHsgTWF5YmVBc3luYyB9IGZyb20gXCJAcm9vdFwiO1xyXG5leHBvcnQgdHlwZSB7IFR5cGVHdWFyZCB9IGZyb20gXCJAcm9vdFwiO1xyXG5leHBvcnQgdHlwZSB7IEJyYW5kZWQgfSBmcm9tIFwiQHJvb3RcIjtcclxuZXhwb3J0IHR5cGUgeyBCcmFuZGVkU3RydWN0IH0gZnJvbSBcIkByb290XCI7XHJcbmV4cG9ydCB0eXBlIHsgUGFyc2FibGUgfSBmcm9tIFwiQHJvb3RcIjtcclxuZXhwb3J0IHR5cGUgeyBTZXJpYWxpemFibGUgfSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcbmV4cG9ydCB7IEVycm9yIH0gZnJvbSBcIkByb290XCI7XHJcbmV4cG9ydCB7IHBhbmljIH0gZnJvbSBcIkByb290XCI7XHJcblxyXG5leHBvcnQgdHlwZSB7IERvbUVycm9yQ29kZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5leHBvcnQgeyBEb21FcnJvciB9IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuZXhwb3J0IHsgY2xvbmUgfSBmcm9tIFwiQHJvb3RcIjtcclxuZXhwb3J0IHsgdG9TdHJpbmcgfSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcbmV4cG9ydCB7IGlzQnJhbmRlZCB9IGZyb20gXCJAcm9vdFwiO1xyXG5leHBvcnQgeyBpc0JyYW5kZWRTdHJ1Y3QgfSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcbmV4cG9ydCB0eXBlIHsgUmVzdWx0SGFuZGxlciB9IGZyb20gXCJAcm9vdFwiO1xyXG5leHBvcnQgdHlwZSB7IFJlc3VsdCB9IGZyb20gXCJAcm9vdFwiO1xyXG5leHBvcnQgdHlwZSB7IE9wdGlvbkhhbmRsZXIgfSBmcm9tIFwiQHJvb3RcIjtcclxuZXhwb3J0IHR5cGUgeyBPcHRpb24gfSBmcm9tIFwiQHJvb3RcIjtcclxuZXhwb3J0IHR5cGUgeyBFcnJPZkFsbCB9IGZyb20gXCJAcm9vdFwiO1xyXG5leHBvcnQgdHlwZSB7IEVyck9mIH0gZnJvbSBcIkByb290XCI7XHJcbmV4cG9ydCB0eXBlIHsgRXJyVmFsT2ZBbGwgfSBmcm9tIFwiQHJvb3RcIjtcclxuZXhwb3J0IHR5cGUgeyBFcnJWYWxPZiB9IGZyb20gXCJAcm9vdFwiO1xyXG5leHBvcnQgdHlwZSB7IE9rT2ZBbGwgfSBmcm9tIFwiQHJvb3RcIjtcclxuZXhwb3J0IHR5cGUgeyBPa09mIH0gZnJvbSBcIkByb290XCI7XHJcbmV4cG9ydCB0eXBlIHsgT2tWYWxPZkFsbCB9IGZyb20gXCJAcm9vdFwiO1xyXG5leHBvcnQgdHlwZSB7IE9rVmFsT2YgfSBmcm9tIFwiQHJvb3RcIjtcclxuZXhwb3J0IHR5cGUgeyBTb21lT2ZBbGwgfSBmcm9tIFwiQHJvb3RcIjtcclxuZXhwb3J0IHR5cGUgeyBTb21lT2YgfSBmcm9tIFwiQHJvb3RcIjtcclxuZXhwb3J0IHR5cGUgeyBTb21lVmFsT2ZBbGwgfSBmcm9tIFwiQHJvb3RcIjtcclxuZXhwb3J0IHR5cGUgeyBTb21lVmFsT2YgfSBmcm9tIFwiQHJvb3RcIjtcclxuZXhwb3J0IHsgRXJyIH0gZnJvbSBcIkByb290XCI7XHJcbmV4cG9ydCB7IE9rIH0gZnJvbSBcIkByb290XCI7XHJcbmV4cG9ydCB7IE5vbmUgfSBmcm9tIFwiQHJvb3RcIjtcclxuZXhwb3J0IHsgU29tZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5leHBvcnQgeyBVbnNhZmUgfSBmcm9tIFwiQHJvb3RcIjtcclxuZXhwb3J0IHsgYWxsUiB9IGZyb20gXCJAcm9vdFwiO1xyXG5leHBvcnQgeyBhbnlSIH0gZnJvbSBcIkByb290XCI7XHJcbmV4cG9ydCB7IHdyYXAgfSBmcm9tIFwiQHJvb3RcIjtcclxuZXhwb3J0IHsgd3JhcEFzeW5jIH0gZnJvbSBcIkByb290XCI7XHJcbmV4cG9ydCB7IGFsbE8gfSBmcm9tIFwiQHJvb3RcIjtcclxuZXhwb3J0IHsgYW55TyB9IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuZXhwb3J0IHR5cGUgeyBGcHZFcnJvckNvZGUgfSBmcm9tIFwiQHJvb3RcIjtcclxuZXhwb3J0IHR5cGUgeyBGcHZFcnJvciB9IGZyb20gXCJAcm9vdFwiO1xyXG5leHBvcnQgdHlwZSB7IEZwdklzaCB9IGZyb20gXCJAcm9vdFwiO1xyXG5leHBvcnQgeyBGcHYgfSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcbmV4cG9ydCB0eXBlIHsgRHluQ29uc3RydWN0b3IgfSBmcm9tIFwiQHJvb3RcIjtcclxuZXhwb3J0IHR5cGUgeyBEeW5XcmFwcGVyIH0gZnJvbSBcIkByb290XCI7XHJcbmV4cG9ydCB7IEFsbG9jIH0gZnJvbSBcIkByb290XCI7XHJcbmV4cG9ydCB7IERlQWxsb2MgfSBmcm9tIFwiQHJvb3RcIjtcclxuZXhwb3J0IHsgRHluIH0gZnJvbSBcIkByb290XCI7XHJcblxyXG5leHBvcnQgdHlwZSB7IFJlZkRlbFRhc2sgfSBmcm9tIFwiQHJvb3RcIjtcclxuZXhwb3J0IHR5cGUgeyBSZWZUYXNrIH0gZnJvbSBcIkByb290XCI7XHJcbmV4cG9ydCB7IFJlZiB9IGZyb20gXCJAcm9vdFwiOyIsICJcInJhaXNlIDFcIjtcclxuXHJcbmltcG9ydCB0eXBlIHsgRXJyVmFsT2ZBbGwgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHR5cGUgeyBPa1ZhbE9mQWxsIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB0eXBlIHsgUmVzdWx0SGFuZGxlciB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgdHlwZSB7IENsb3N1cmUgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHR5cGUgeyBBc3luY0Nsb3N1cmUgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgT2sgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgRXJyIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IFVuc2FmZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuLyoqXHJcbiAqICoqKkJyaWVmKioqXHJcbiAqIEEgd3JhcHBlciB0aGF0IGVuY2Fwc3VsYXRlcyBlaXRoZXIgYSBzdWNjZXNzZnVsIG91dGNvbWUgYE9rPFQxPmAgb3IgYSBmYWlsdXJlIGBFcnI8VDI+YC5cclxuICogXHJcbiAqICoqKkV4YW1wbGUqKipcclxuICogYGBgdHNcclxuICogIGZ1bmN0aW9uIGZvbygpOiBSZXN1bHQ8MjAwbiwgNDA0bj4ge1xyXG4gKiAgICAgIGlmICgpIHJldHVybiBPaygyMDBuKTtcclxuICogICAgICByZXR1cm4gRXJyKDQwNG4pO1xyXG4gKiAgfVxyXG4gKiBcclxuICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPiA9IGZvbygpO1xyXG4gKiAgaWYgKHJlc3VsdC5vaygpKSB7XHJcbiAqICAgICAgbGV0IHZhbHVlOiAyMDBuID0gcmVzdWx0LnVubG9jaygpO1xyXG4gKiAgICAgIC8vLyAuLi5cclxuICogIH1cclxuICogYGBgXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBSZXN1bHQ8VDEsIFQyPiA9IE9rPFQxPiB8IEVycjxUMj47XHJcblxyXG5leHBvcnQgY29uc3QgUmVzdWx0OiBSZXN1bHRIYW5kbGVyID0gKCgpID0+IHtcclxuICAgIC8qKiBAY29uc3RydWN0b3IgKi8ge1xyXG4gICAgICAgIHJldHVybiB7IGFsbCwgYW55LCB3cmFwLCB3cmFwQXN5bmMgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBhbGw8VDEgZXh0ZW5kcyBBcnJheTxSZXN1bHQ8dW5rbm93biwgdW5rbm93bj4+PihyZXN1bHRzOiBUMSk6IFJlc3VsdDxPa1ZhbE9mQWxsPFQxPiwgRXJyVmFsT2ZBbGw8VDE+W251bWJlcl0+IHtcclxuICAgICAgICBsZXQgb3V0OiBBcnJheTx1bmtub3duPiA9IFtdO1xyXG4gICAgICAgIGxldCBpOiBudW1iZXIgPSAwO1xyXG4gICAgICAgIHdoaWxlIChpIDwgcmVzdWx0cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdDogUmVzdWx0PHVua25vd24sIHVua25vd24+ID0gcmVzdWx0cy5hdChpKSE7XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQub2soKSkgb3V0LnB1c2gocmVzdWx0LnVubG9jaygpKTtcclxuICAgICAgICAgICAgZWxzZSByZXR1cm4gcmVzdWx0IGFzIEVycjxFcnJWYWxPZkFsbDxUMT5bbnVtYmVyXT47XHJcbiAgICAgICAgICAgIGkgKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBPaygob3V0IGFzIE9rVmFsT2ZBbGw8VDE+KSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYW55PFQxIGV4dGVuZHMgQXJyYXk8UmVzdWx0PHVua25vd24sIHVua25vd24+Pj4ocmVzdWx0czogVDEpOiBSZXN1bHQ8T2tWYWxPZkFsbDxUMT5bbnVtYmVyXSwgRXJyVmFsT2ZBbGw8VDE+PiB7XHJcbiAgICAgICAgbGV0IG91dDogQXJyYXk8dW5rbm93bj4gPSBbXTtcclxuICAgICAgICBsZXQgaTogbnVtYmVyID0gMDtcclxuICAgICAgICB3aGlsZSAoaSA8IHJlc3VsdHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGxldCB3cmFwcGVyOiBSZXN1bHQ8dW5rbm93biwgdW5rbm93bj4gPSByZXN1bHRzLmF0KGkpITtcclxuICAgICAgICAgICAgaWYgKHdyYXBwZXIub2soKSkgcmV0dXJuIHdyYXBwZXIgYXMgT2s8T2tWYWxPZkFsbDxUMT5bbnVtYmVyXT47XHJcbiAgICAgICAgICAgIGVsc2Ugb3V0LnB1c2god3JhcHBlci5pbnNwZWN0KCkpO1xyXG4gICAgICAgICAgICBpICsrO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gRXJyKChvdXQgYXMgRXJyVmFsT2ZBbGw8VDE+KSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGZ1bmN0aW9uIHdyYXA8VDEsIFQyLCBUMyBleHRlbmRzIEFycmF5PFQyPj4odGFzazogQ2xvc3VyZTxUMywgVDE+LCAuLi5wYXlsb2FkOiBUMyk6IFJlc3VsdDxUMSwgVW5zYWZlPiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIE9rKHRhc2soLi4ucGF5bG9hZCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gRXJyKFVuc2FmZShlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGZ1bmN0aW9uIHdyYXBBc3luYzxUMSwgVDIsIFQzIGV4dGVuZHMgQXJyYXk8VDI+Pih0YXNrOiBBc3luY0Nsb3N1cmU8VDMsIFQxPiwgLi4ucGF5bG9hZDogVDMpOiBQcm9taXNlPFJlc3VsdDxUMSwgVW5zYWZlPj4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJldHVybiBPaygoYXdhaXQgdGFzayguLi5wYXlsb2FkKSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gRXJyKFVuc2FmZShlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KSgpOyIsICJcInJhaXNlIDFcIjtcclxuXHJcbmltcG9ydCB0eXBlIHsgT3B0aW9uSGFuZGxlciB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgdHlwZSB7IFNvbWVWYWxPZkFsbCB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBTb21lIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IE5vbmUgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgaXNCcmFuZGVkIH0gZnJvbSBcIkByb290XCI7XHJcblxyXG4vKipcclxuICogKioqQnJpZWYqKipcclxuICogQSB0eXBlIHRoYXQgcmVwcmVzZW50cyBhbiBvcHRpb25hbCB2YWx1ZSwgZW5jYXBzdWxhdGluZyBlaXRoZXIgYSB2YWx1ZSBgU29tZWAgXHJcbiAqIG9yIHRoZSBhYnNlbmNlIG9mIGEgdmFsdWUgYE5vbmVgLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgT3B0aW9uPFQxPiA9IFNvbWU8VDE+IHwgTm9uZTtcclxuXHJcbmV4cG9ydCBjb25zdCBPcHRpb246IE9wdGlvbkhhbmRsZXIgPSAoKCkgPT4ge1xyXG4gICAgLyoqIEBjb25zdHJ1Y3RvciAqLyB7XHJcbiAgICAgICAgcmV0dXJuIHsgZmxhZywgYWxsLCBhbnkgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBmbGFnPFQxPih2YWx1ZTogVDEgfCBudWxsIHwgdW5kZWZpbmVkKTogT3B0aW9uPFQxPiB7XHJcbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gTm9uZTtcclxuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIE5vbmU7XHJcbiAgICAgICAgcmV0dXJuIFNvbWUoKHZhbHVlIGFzIFQxKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYWxsPFQxIGV4dGVuZHMgQXJyYXk8T3B0aW9uPHVua25vd24+Pj4oLi4ub3B0aW9uczogVDEpOiBPcHRpb248U29tZVZhbE9mQWxsPFQxPj4ge1xyXG4gICAgICAgIGxldCBvdXQ6IEFycmF5PHVua25vd24+ID0gW107XHJcbiAgICAgICAgbGV0IGk6IG51bWJlciA9IDA7XHJcbiAgICAgICAgd2hpbGUgKGkgPCBvcHRpb25zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBsZXQgb3B0aW9uOiBPcHRpb248dW5rbm93bj4gPSBvcHRpb25zLmF0KGkpITtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbi5ub25lKCkpIHJldHVybiBvcHRpb24gYXMgTm9uZTtcclxuICAgICAgICAgICAgb3V0LnB1c2gob3B0aW9uLnVubG9jaygpKTtcclxuICAgICAgICAgICAgaSArKztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFNvbWUob3V0IGFzIFNvbWVWYWxPZkFsbDxUMT4pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGFueTxUMSBleHRlbmRzIEFycmF5PE9wdGlvbjx1bmtub3duPj4+KC4uLm9wdGlvbnM6IFQxKTogT3B0aW9uPFNvbWVWYWxPZkFsbDxUMT5bbnVtYmVyXT4ge1xyXG4gICAgICAgIGxldCBpOiBudW1iZXIgPSAwO1xyXG4gICAgICAgIHdoaWxlIChpIDwgb3B0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgbGV0IG9wdGlvbjogT3B0aW9uPHVua25vd24+ID0gb3B0aW9ucy5hdChpKSE7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb24uc29tZSgpKSByZXR1cm4gb3B0aW9uIGFzIFNvbWU8U29tZVZhbE9mQWxsPFQxPltudW1iZXJdPjtcclxuICAgICAgICAgICAgaSArKztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIE5vbmU7XHJcbiAgICB9XHJcbn0pKCk7IiwgImltcG9ydCB0eXBlIHsgV3JhcHBlciB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgdHlwZSB7IFBhcnNhYmxlIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB0eXBlIHsgVHlwZUd1YXJkIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB0eXBlIHsgT3B0aW9uIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IFNvbWUgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgTm9uZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuZXhwb3J0IHR5cGUgVW5zYWZlID1cclxuICAgICYgV3JhcHBlcjx1bmtub3duPlxyXG4gICAgJiBQYXJzYWJsZTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBVbnNhZmUoX3ZhbHVlOiB1bmtub3duKTogVW5zYWZlIHtcclxuICAgIC8qKiBAY29uc3RydWN0b3IgKi8ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHVud3JhcCxcclxuICAgICAgICAgICAgcGFyc2UsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB1bndyYXAoKTogdW5rbm93biB7XHJcbiAgICAgICAgcmV0dXJuIF92YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBwYXJzZTxUMT4oZ3VhcmQ6IFR5cGVHdWFyZDxUMT4pOiBPcHRpb248VDE+IHtcclxuICAgICAgICBpZiAoIWd1YXJkKHVud3JhcCgpKSkgcmV0dXJuIE5vbmU7XHJcbiAgICAgICAgcmV0dXJuIFNvbWUoKHVud3JhcCgpIGFzIFQxKSk7XHJcbiAgICB9XHJcbn0iLCAiaW1wb3J0IHsgUmVzdWx0IH0gZnJvbSBcIkByb290XCI7XHJcblxyXG5leHBvcnQgY29uc3QgYWxsUiA9IFJlc3VsdC5hbGw7XHJcbmV4cG9ydCBjb25zdCBhbnlSID0gUmVzdWx0LmFueTtcclxuZXhwb3J0IGNvbnN0IHdyYXAgPSBSZXN1bHQud3JhcDtcclxuZXhwb3J0IGNvbnN0IHdyYXBBc3luYyA9IFJlc3VsdC53cmFwQXN5bmM7IiwgImltcG9ydCB0eXBlIHsgRnVuY3Rpb24gfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHR5cGUgeyBVbmxvY2tlZFdyYXBwZXIgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHR5cGUgeyBPcHRpb24gfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHR5cGUgeyBSZXN1bHQgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgRXJyb3IgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgRXJyIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IFNvbWUgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgcGFuaWMgfSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcbmV4cG9ydCB0eXBlIE9rPFQxPiA9IFxyXG4gICAgJiBVbmxvY2tlZFdyYXBwZXI8VDE+XHJcbiAgICAmIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBgb2tgIGNoZWNrcyBpZiB0aGUgY3VycmVudCBpbnN0YW5jZSBpcyBgT2tgLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPjtcclxuICAgICAqICBpZiAocmVzdWx0Lm9rKCkpIHtcclxuICAgICAqICAgICAgbGV0IHZhbHVlOiAyMDBuID0gcmVzdWx0LnVubG9jaygpO1xyXG4gICAgICogICAgICAvLy8gLi4uXHJcbiAgICAgKiAgfVxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIG9rKCk6IHRoaXMgaXMgT2s8VDE+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIGBlcnJgIGNoZWNrcyBpZiB0aGUgY3VycmVudCBpbnN0YW5jZSBpcyBgRXJyYC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj47XHJcbiAgICAgKiAgaWYgKHJlc3VsdC5lcnIoKSkge1xyXG4gICAgICogICAgICBsZXQgZTogNDA0biA9IHJlc3VsdC5pbnNwZWN0KCk7XHJcbiAgICAgKiAgICAgIC8vLyAuLi5cclxuICAgICAqICB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgZXJyKCk6IHRoaXMgaXMgRXJyPHVua25vd24+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIGBleHBlY3RgIHRlcm1pbmF0ZXMgd2l0aCBgcGFuaWNgIGlmIHRoZSBgUmVzdWx0YCBpcyBgRXJyYC5cclxuICAgICAqIFxyXG4gICAgICogKioqV2FybmluZyoqKlxyXG4gICAgICogUmVzZXJ2ZWQgZm9yIGRlYnVnZ2luZyBvciB1bnJlY292ZXJhYmxlIGVycm9ycy5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj47XHJcbiAgICAgKiAgbGV0IHN0YXR1czogMjAwbiA9IHJlc3VsdC5leHBlY3QoXCJUaGlzIGlzIHVuZXhwZWN0ZWQgYW5kIHVucmVjb3ZlcmFibGUuXCIpO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIGV4cGVjdChfXzogdW5rbm93bik6IFQxO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIEVuc3VyZXMgdGhhdCB0aGUgYFJlc3VsdGAgaXMgYW4gYEVycmAgYW5kIHJldHJpZXZlcyB0aGUgZXJyb3IgdmFsdWUgaW5zaWRlLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipXYXJuaW5nKioqXHJcbiAgICAgKiBSZXNlcnZlZCBmb3IgZGVidWdnaW5nIG9yIHVucmVjb3ZlcmFibGUgZXJyb3JzLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPjtcclxuICAgICAqICBsZXQgc3RhdHVzOiA0MDRuID0gcmVzdWx0LmV4cGVjdEVycihcIlRoaXMgaXMgdW5leHBlY3RlZCBhbmQgdW5yZWNvdmVyYWJsZS5cIik7XHJcbiAgICAgKiBgYGBcclxuICAgICovXHJcbiAgICBleHBlY3RFcnIobWVzc2FnZTogc3RyaW5nKTogbmV2ZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogUmV0cmlldmVzIHRoZSB2YWx1ZSBvZiBhbiBgT2tgLCBvciBmYWxscyBiYWNrIHRvIHRoZSBwcm92aWRlZCB2YWx1ZSBpZiBpdFx1MjAxOXMgYW4gYEVycmAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+ID0gRXJyKDQwNG4pO1xyXG4gICAgICogIGxldCBzdGF0dXM6IDIwMG4gPSByZXN1bHQudW5sb2NrT3IoMjAwbik7XHJcbiAgICAgKiAgY29uc29sZS5sb2coc3RhdHVzKTsgLy8vIDIwMG4uXHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgdW5sb2NrT3IoX186IHVua25vd24pOiBUMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBSZWNvdmVycyBmcm9tIHRoZSBjdXJyZW50IGVycm9yIGJ5IGFwcGx5aW5nIGEgcmVjb3ZlcnkgZnVuY3Rpb24sIHRyYW5zZm9ybWluZyB0aGUgYEVycmAgaW50byBhbiBgT2tgLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPiA9IEVycig0MDRuKTtcclxuICAgICAqICBsZXQgc3RhdHVzOiAyMDBuID0gcmVzdWx0XHJcbiAgICAgKiAgICAgIC5yZWNvdmVyKCgpID0+IHtcclxuICAgICAqICAgICAgICAgIHJldHVybiAyMDBuO1xyXG4gICAgICogICAgICB9KVxyXG4gICAgICogICAgICAudW5sb2NrKCk7XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgcmVjb3ZlcihfXzogdW5rbm93bik6IE9rPFQxPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBBcHBsaWVzIGEgdHJhbnNmb3JtYXRpb24gdG8gdGhlIGBPa2AgdmFsdWUgYW5kIHJldHVybnMgYW4gYEVycmAgaW5zdGFuY2Ugd2l0aCB0aGUgdHJhbnNmb3JtZWQgdmFsdWUuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+ID0gT2soMjAwbik7XHJcbiAgICAgKiAgbGV0IGU6IDQwNG4gPSByZXN1bHRcclxuICAgICAqICAgICAgLmRlZ3JhZGUoKCkgPT4ge1xyXG4gICAgICogICAgICAgICAgcmV0dXJuIDQwNG47XHJcbiAgICAgKiAgICAgIH0pXHJcbiAgICAgKiAgICAgIC5pbnNwZWN0KCk7XHJcbiAgICAgKiAgY29uc29sZS5sb2coZSk7IC8vLyA0MDRuLlxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIGRlZ3JhZGU8VDI+KHRhc2s6IEZ1bmN0aW9uPFQxLCBUMj4pOiBFcnI8VDI+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIENoYWlucyBhbiB0YXNrIHVudGlsIHRoZSBmaXJzdCBgRXJyYCBpcyBlbmNvdW50ZXJlZC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj4gPSBFcnIoNDA0bik7XHJcbiAgICAgKiAgcmVzdWx0XHJcbiAgICAgKiAgICAgIC5hbmQodmFsdWUgPT4ge1xyXG4gICAgICogICAgICAgICAgLy8vIFRhc2sgaXMgc2tpcHBlZCBiZWNhdXNlIGBSZXN1bHRgIGlzIGFuIGBFcnJgLlxyXG4gICAgICogICAgICAgICAgLy8vIC4uLlxyXG4gICAgICogICAgICAgICAgcmV0dXJuIE9rKHZhbHVlICsgMW4pO1xyXG4gICAgICogICAgICB9KVxyXG4gICAgICogICAgICAuYW5kKHZhbHVlID0+IHtcclxuICAgICAqICAgICAgICAgIC8vLyBUYXNrIGlzIHNraXBwZWQgYmVjYXVzZSBgUmVzdWx0YCBpcyBhbiBgRXJyYC5cclxuICAgICAqICAgICAgICAgIC8vLyAuLi5cclxuICAgICAqICAgICAgfSk7XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgYW5kPFQyPih0YXNrOiBGdW5jdGlvbjxUMSwgT2s8VDI+Pik6IE9rPFQyPjtcclxuICAgIGFuZDxUMj4odGFzazogRnVuY3Rpb248VDEsIEVycjxUMj4+KTogUmVzdWx0PFQxLCBUMj47XHJcbiAgICBhbmQ8VDIsIFQzPih0YXNrOiBGdW5jdGlvbjxUMSwgUmVzdWx0PFQyLCBUMz4+KTogUmVzdWx0PFQyLCBUMz47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogVHJhbnNmb3JtcyB0aGUgYE9rYCB2YWx1ZSBpZiBwcmVzZW50LCBidXQgaWYgdGhpcyBpcyBhbHJlYWR5IGFuIGBFcnJgLCBpdCByZW1haW5zIHVuY2hhbmdlZC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0MDogUmVzdWx0PDIwMG4sIDQwNG4+ID0gT2soMjAwbik7XHJcbiAgICAgKiAgbGV0IHJlc3VsdDE6IFJlc3VsdDwyMDFuLCA0MDRuPiA9IHJlc3VsdC5tYXAodmFsdWUgPT4ge1xyXG4gICAgICogICAgICAvLy8gVGFzayBpcyBydW4gYmVjYXVzZSBgUmVzdWx0YCBpcyBgT2tgLlxyXG4gICAgICogICAgICAvLy8gLi4uXHJcbiAgICAgKiAgICAgIHJldHVybiB2YWx1ZSArIDFuO1xyXG4gICAgICogIH0pO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIG1hcDxUMj4odGFzazogRnVuY3Rpb248VDEsIFQyPik6IE9rPFQyPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBUcmFuc2Zvcm1zIHRoZSBlcnJvciBjb250YWluZWQgaW4gdGhlIGBFcnJgIHVzaW5nIHRoZSBwcm92aWRlZCBgdGFza2AgZnVuY3Rpb24uXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+ID0gRXJyKDQwNG4pO1xyXG4gICAgICogIHJlc3VsdFxyXG4gICAgICogICAgICAubWFwRXJyKGUgPT4ge1xyXG4gICAgICogICAgICAgICAgcmV0dXJuIGUgKyAxbjtcclxuICAgICAqICAgICAgfSlcclxuICAgICAqICAgICAgLmluc3BlY3QoKTsgLy8vIDQwNW4uXHJcbiAgICAgKiBgYGBcclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj4gPSBPaygyMDBuKTtcclxuICAgICAqICByZXN1bHRcclxuICAgICAqICAgICAgLm1hcEVycihlID0+IHtcclxuICAgICAqICAgICAgICAgIC8vLyBUYXNrIGlzIHJ1biBiZWNhdXNlIGBSZXN1bHRgIGlzIGBPa2AuXHJcbiAgICAgKiAgICAgICAgICAvLy8gLi4uXHJcbiAgICAgKiAgICAgIH0pO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIG1hcEVycihfXzogdW5rbm93bik6IE9rPFQxPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBDb252ZXJ0cyBhIGBSZXN1bHQ8VDEsIFQyPmAgdG8gYW4gYE9wdGlvbjxUMT5gLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPjtcclxuICAgICAqICBsZXQgb3B0aW9uOiBPcHRpb248MjAwbj4gPSByZXN1bHQudG9PcHRpb24oKTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICB0b09wdGlvbigpOiBPcHRpb248VDE+O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqICoqKkJyaWVmKioqXHJcbiAqIFRoZSBzdWNjZXNzZnVsIHZhbHVlIHdpdGhpbiBhIGBSZXN1bHRgLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIE9rPFQxPihfdmFsdWU6IFQxKTogT2s8VDE+IHtcclxuICAgIGxldCBfdGhpczogT2s8VDE+O1xyXG5cclxuICAgIC8qKiBAY29uc3RydWN0b3IgKi8ge1xyXG4gICAgICAgIHJldHVybiBfdGhpcyA9IHtcclxuICAgICAgICAgICAgb2ssXHJcbiAgICAgICAgICAgIGVycixcclxuICAgICAgICAgICAgZXhwZWN0LFxyXG4gICAgICAgICAgICBleHBlY3RFcnIsXHJcbiAgICAgICAgICAgIHVubG9jayxcclxuICAgICAgICAgICAgdW5sb2NrT3IsXHJcbiAgICAgICAgICAgIGFuZCxcclxuICAgICAgICAgICAgbWFwLFxyXG4gICAgICAgICAgICBtYXBFcnIsXHJcbiAgICAgICAgICAgIHJlY292ZXIsXHJcbiAgICAgICAgICAgIGRlZ3JhZGUsXHJcbiAgICAgICAgICAgIHRvT3B0aW9uXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBvaygpOiB0aGlzIGlzIE9rPFQxPiB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZXJyKCk6IHRoaXMgaXMgRXJyPHVua25vd24+IHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZXhwZWN0KF9fOiB1bmtub3duKTogVDEge1xyXG4gICAgICAgIHJldHVybiB1bmxvY2soKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBleHBlY3RFcnIobWVzc2FnZTogc3RyaW5nKTogbmV2ZXIge1xyXG4gICAgICAgIHBhbmljKEVycm9yKFwiUEFOSUNcIiwgbWVzc2FnZSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHVubG9jaygpOiBUMSB7XHJcbiAgICAgICAgcmV0dXJuIF92YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB1bmxvY2tPcihfXzogdW5rbm93bik6IFQxIHtcclxuICAgICAgICByZXR1cm4gdW5sb2NrKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYW5kPFQyPih0YXNrOiBGdW5jdGlvbjxUMSwgT2s8VDI+Pik6IE9rPFQyPjtcclxuICAgIGZ1bmN0aW9uIGFuZDxUMj4odGFzazogRnVuY3Rpb248VDEsIEVycjxUMj4+KTogUmVzdWx0PFQxLCBUMj47XHJcbiAgICBmdW5jdGlvbiBhbmQ8VDIsIFQzPih0YXNrOiBGdW5jdGlvbjxUMSwgUmVzdWx0PFQyLCBUMz4+KTogUmVzdWx0PFQyLCBUMz47XHJcbiAgICBmdW5jdGlvbiBhbmQ8VDIsIFQzPih0YXNrOiBGdW5jdGlvbjxUMSwgUmVzdWx0PFQyLCBUMz4+KTogUmVzdWx0PFQyLCBUMz4ge1xyXG4gICAgICAgIHJldHVybiB0YXNrKHVubG9jaygpKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtYXA8VDI+KHRhc2s6IEZ1bmN0aW9uPFQxLCBUMj4pOiBPazxUMj4ge1xyXG4gICAgICAgIHJldHVybiBPayh0YXNrKHVubG9jaygpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbWFwRXJyKF9fOiB1bmtub3duKTogT2s8VDE+IHtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmVjb3ZlcihfXzogdW5rbm93bik6IE9rPFQxPiB7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRlZ3JhZGU8VDI+KHRhc2s6IEZ1bmN0aW9uPFQxLCBUMj4pOiBFcnI8VDI+IHtcclxuICAgICAgICByZXR1cm4gRXJyKHRhc2sodW5sb2NrKCkpKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB0b09wdGlvbigpOiBPcHRpb248VDE+IHtcclxuICAgICAgICByZXR1cm4gU29tZSh1bmxvY2soKSk7XHJcbiAgICB9XHJcbn0iLCAiaW1wb3J0IHR5cGUgeyBGdW5jdGlvbiB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgdHlwZSB7IE9wdGlvbiB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBFcnJvckhhbmRsZXIgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgRXJyb3IgYXMgRXJyb3IwIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IE9rIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IE5vbmUgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgU29tZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBwYW5pYyB9IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuZXhwb3J0IHR5cGUgRXJyPFQxPiA9IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBgb2tgIGNoZWNrcyBpZiB0aGUgY3VycmVudCBpbnN0YW5jZSBpcyBgT2tgLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPjtcclxuICAgICAqICBpZiAocmVzdWx0Lm9rKCkpIHtcclxuICAgICAqICAgICAgbGV0IHZhbHVlOiAyMDBuID0gcmVzdWx0LnVubG9jaygpO1xyXG4gICAgICogICAgICAvLy8gLi4uXHJcbiAgICAgKiAgfVxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIG9rKCk6IHRoaXMgaXMgT2s8dW5rbm93bj47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogYGVycmAgY2hlY2tzIGlmIHRoZSBjdXJyZW50IGluc3RhbmNlIGlzIGBFcnJgLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPjtcclxuICAgICAqICBpZiAocmVzdWx0LmVycigpKSB7XHJcbiAgICAgKiAgICAgIGxldCBlOiA0MDRuID0gcmVzdWx0Lmluc3BlY3QoKTtcclxuICAgICAqICAgICAgLy8vIC4uLlxyXG4gICAgICogIH1cclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBlcnIoKTogdGhpcyBpcyBFcnI8VDE+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIFJldHJpZXZlcyB0aGUgZXJyb3IgdmFsdWUgZW5jYXBzdWxhdGVkIGJ5IHRoZSBgRXJyYCBpbnN0YW5jZS5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj47XHJcbiAgICAgKiAgaWYgKHJlc3VsdC5lcnIoKSkge1xyXG4gICAgICogICAgICBsZXQgZTogNDA0biA9IHJlc3VsdC5pbnNwZWN0KCk7XHJcbiAgICAgKiAgICAgIC8vLyAuLi5cclxuICAgICAqICB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgaW5zcGVjdCgpOiBUMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIHN0YWNrIHRyYWNlIG9mIHRoZSBlcnJvciwgZ2VuZXJhdGVkIGF0IHRoZSB0aW1lIHRoZSBgRXJyYCBpbnN0YW5jZSB3YXMgY3JlYXRlZC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj47XHJcbiAgICAgKiAgaWYgKHJlc3VsdC5lcnIoKSkge1xyXG4gICAgICogICAgICByZXN1bHRcclxuICAgICAqICAgICAgICAgIC5zdGFjaygpXHJcbiAgICAgKiAgICAgICAgICAubGluZXMoKVxyXG4gICAgICogICAgICAgICAgLmZvckVhY2gobGluZSA9PiB7XHJcbiAgICAgKiAgICAgICAgICAgICAgbGV0IGxpbmVSZXByZXNlbnRhdGlvbjogc3RyaW5nID0gbGluZS50b1N0cmluZygpO1xyXG4gICAgICogICAgICAgICAgICAgIC8vLyAuLi5cclxuICAgICAqICAgICAgICAgICAgICByZXR1cm47IFxyXG4gICAgICogICAgICAgICAgfSk7XHJcbiAgICAgKiAgfVxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIHN0YWNrKCk6IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBgZXhwZWN0YCB0ZXJtaW5hdGVzIHdpdGggYHBhbmljYCBpZiB0aGUgYFJlc3VsdGAgaXMgYEVycmAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKldhcm5pbmcqKipcclxuICAgICAqIFJlc2VydmVkIGZvciBkZWJ1Z2dpbmcgb3IgdW5yZWNvdmVyYWJsZSBlcnJvcnMuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+O1xyXG4gICAgICogIGxldCBzdGF0dXM6IDIwMG4gPSByZXN1bHQuZXhwZWN0KFwiVGhpcyBpcyB1bmV4cGVjdGVkIGFuZCB1bnJlY292ZXJhYmxlLlwiKTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBleHBlY3QobWVzc2FnZTogc3RyaW5nKTogbmV2ZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogRW5zdXJlcyB0aGF0IHRoZSBgUmVzdWx0YCBpcyBhbiBgRXJyYCBhbmQgcmV0cmlldmVzIHRoZSBlcnJvciB2YWx1ZSBpbnNpZGUuXHJcbiAgICAgKiBcclxuICAgICAqICoqKldhcm5pbmcqKipcclxuICAgICAqIFJlc2VydmVkIGZvciBkZWJ1Z2dpbmcgb3IgdW5yZWNvdmVyYWJsZSBlcnJvcnMuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+O1xyXG4gICAgICogIGxldCBzdGF0dXM6IDQwNG4gPSByZXN1bHQuZXhwZWN0RXJyKFwiVGhpcyBpcyB1bmV4cGVjdGVkIGFuZCB1bnJlY292ZXJhYmxlLlwiKTtcclxuICAgICAqIGBgYFxyXG4gICAgKi9cclxuICAgIGV4cGVjdEVycihfXzogdW5rbm93bik6IFQxO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIFJldHJpZXZlcyB0aGUgdmFsdWUgb2YgYW4gYE9rYCwgb3IgZmFsbHMgYmFjayB0byB0aGUgcHJvdmlkZWQgdmFsdWUgaWYgaXRcdTIwMTlzIGFuIGBFcnJgLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPiA9IEVycig0MDRuKTtcclxuICAgICAqICBsZXQgc3RhdHVzOiAyMDBuID0gcmVzdWx0LnVubG9ja09yKDIwMG4pO1xyXG4gICAgICogIGNvbnNvbGUubG9nKHN0YXR1cyk7IC8vLyAyMDBuLlxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIHVubG9ja09yPFQyPihmYWxsYmFjazogVDIpOiBUMjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBDaGFpbnMgYW4gdGFzayB1bnRpbCB0aGUgZmlyc3QgYEVycmAgaXMgZW5jb3VudGVyZWQuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+ID0gRXJyKDQwNG4pO1xyXG4gICAgICogIHJlc3VsdFxyXG4gICAgICogICAgICAuYW5kKHZhbHVlID0+IHtcclxuICAgICAqICAgICAgICAgIC8vLyBUYXNrIGlzIHNraXBwZWQgYmVjYXVzZSBgUmVzdWx0YCBpcyBhbiBgRXJyYC5cclxuICAgICAqICAgICAgICAgIC8vLyAuLi5cclxuICAgICAqICAgICAgICAgIHJldHVybiBPayh2YWx1ZSArIDFuKTtcclxuICAgICAqICAgICAgfSlcclxuICAgICAqICAgICAgLmFuZCh2YWx1ZSA9PiB7XHJcbiAgICAgKiAgICAgICAgICAvLy8gVGFzayBpcyBza2lwcGVkIGJlY2F1c2UgYFJlc3VsdGAgaXMgYW4gYEVycmAuXHJcbiAgICAgKiAgICAgICAgICAvLy8gLi4uXHJcbiAgICAgKiAgICAgIH0pO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIGFuZChfXzogdW5rbm93bik6IEVycjxUMT47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogVHJhbnNmb3JtcyB0aGUgYE9rYCB2YWx1ZSBpZiBwcmVzZW50LCBidXQgaWYgdGhpcyBpcyBhbHJlYWR5IGFuIGBFcnJgLCBpdCByZW1haW5zIHVuY2hhbmdlZC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0MDogUmVzdWx0PDIwMG4sIDQwNG4+ID0gT2soMjAwbik7XHJcbiAgICAgKiAgbGV0IHJlc3VsdDE6IFJlc3VsdDwyMDFuLCA0MDRuPiA9IHJlc3VsdC5tYXAodmFsdWUgPT4ge1xyXG4gICAgICogICAgICAvLy8gVGFzayBpcyBydW4gYmVjYXVzZSBgUmVzdWx0YCBpcyBgT2tgLlxyXG4gICAgICogICAgICAvLy8gLi4uXHJcbiAgICAgKiAgICAgIHJldHVybiB2YWx1ZSArIDFuO1xyXG4gICAgICogIH0pO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIG1hcChfXzogdW5rbm93bik6IEVycjxUMT47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogVHJhbnNmb3JtcyB0aGUgZXJyb3IgY29udGFpbmVkIGluIHRoZSBgRXJyYCB1c2luZyB0aGUgcHJvdmlkZWQgYHRhc2tgIGZ1bmN0aW9uLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPiA9IEVycig0MDRuKTtcclxuICAgICAqICByZXN1bHRcclxuICAgICAqICAgICAgLm1hcEVycihlID0+IHtcclxuICAgICAqICAgICAgICAgIHJldHVybiBlICsgMW47XHJcbiAgICAgKiAgICAgIH0pXHJcbiAgICAgKiAgICAgIC5pbnNwZWN0KCk7IC8vLyA0MDVuLlxyXG4gICAgICogYGBgXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+ID0gT2soMjAwbik7XHJcbiAgICAgKiAgcmVzdWx0XHJcbiAgICAgKiAgICAgIC5tYXBFcnIoZSA9PiB7XHJcbiAgICAgKiAgICAgICAgICAvLy8gVGFzayBpcyBydW4gYmVjYXVzZSBgUmVzdWx0YCBpcyBgT2tgLlxyXG4gICAgICogICAgICAgICAgLy8vIC4uLlxyXG4gICAgICogICAgICB9KTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBtYXBFcnI8VDI+KHRhc2s6IEZ1bmN0aW9uPFQxLCBUMj4pOiBFcnI8VDI+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIFJlY292ZXJzIGZyb20gdGhlIGN1cnJlbnQgZXJyb3IgYnkgYXBwbHlpbmcgYSByZWNvdmVyeSBmdW5jdGlvbiwgdHJhbnNmb3JtaW5nIHRoZSBgRXJyYCBpbnRvIGFuIGBPa2AuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+ID0gRXJyKDQwNG4pO1xyXG4gICAgICogIGxldCBzdGF0dXM6IDIwMG4gPSByZXN1bHRcclxuICAgICAqICAgICAgLnJlY292ZXIoKCkgPT4ge1xyXG4gICAgICogICAgICAgICAgcmV0dXJuIDIwMG47XHJcbiAgICAgKiAgICAgIH0pXHJcbiAgICAgKiAgICAgIC51bmxvY2soKTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICByZWNvdmVyPFQyPih0YXNrOiBGdW5jdGlvbjxUMSwgVDI+KTogT2s8VDI+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIEFwcGxpZXMgYSB0cmFuc2Zvcm1hdGlvbiB0byB0aGUgYE9rYCB2YWx1ZSBhbmQgcmV0dXJucyBhbiBgRXJyYCBpbnN0YW5jZSB3aXRoIHRoZSB0cmFuc2Zvcm1lZCB2YWx1ZS5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj4gPSBPaygyMDBuKTtcclxuICAgICAqICBsZXQgZTogNDA0biA9IHJlc3VsdFxyXG4gICAgICogICAgICAuZGVncmFkZSgoKSA9PiB7XHJcbiAgICAgKiAgICAgICAgICByZXR1cm4gNDA0bjtcclxuICAgICAqICAgICAgfSlcclxuICAgICAqICAgICAgLmluc3BlY3QoKTtcclxuICAgICAqICBjb25zb2xlLmxvZyhlKTsgLy8vIDQwNG4uXHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgZGVncmFkZShfXzogdW5rbm93bik6IEVycjxUMT47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogQ29udmVydHMgYSBgUmVzdWx0PFQxLCBUMj5gIHRvIGFuIGBPcHRpb248VDE+YC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj47XHJcbiAgICAgKiAgbGV0IG9wdGlvbjogT3B0aW9uPDIwMG4+ID0gcmVzdWx0LnRvT3B0aW9uKCk7XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgdG9PcHRpb24oKTogT3B0aW9uPG5ldmVyPjtcclxufTtcclxuXHJcbi8qKlxyXG4gKiAqKipCcmllZioqKlxyXG4gKiBUaGUgZmFpbGVkIHN0YXRlIG9mIGEgYFJlc3VsdGAuXHJcbiAqIFxyXG4gKiAqKipXYXJuaW5nKioqXHJcbiAqIEFueSBvcGVyYXRpb24gYXR0ZW1wdGluZyB0byBhY2Nlc3MgYSBgUmVzdWx0YCBtdXN0IHNhZmVseSBoYW5kbGUgdGhlIGBFcnJgIHN0YXRlIG9yIHRlcm1pbmF0ZSB3aXRoIGFuIGVycm9yLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIEVycjxUMT4oX3ZhbHVlOiBUMSk6IEVycjxUMT47XHJcbmV4cG9ydCBmdW5jdGlvbiBFcnI8VDE+KF92YWx1ZTogVDEsIF9oYW5kbGVyOiBFcnJvckhhbmRsZXIpOiBFcnI8VDE+O1xyXG5leHBvcnQgZnVuY3Rpb24gRXJyPFQxPihcclxuICAgIF9wMDogVDEsXHJcbiAgICBfcDE6IEVycm9ySGFuZGxlciA9IEVycm9ySGFuZGxlclxyXG4pOiBFcnI8VDE+IHtcclxuICAgIGxldCBfdGhpczogRXJyPFQxPjtcclxuICAgIGxldCBfc3RhY2s6IHN0cmluZztcclxuICAgIGxldCBfdmFsdWU6IFQxO1xyXG4gICAgbGV0IF9oYW5kbGVyOiBFcnJvckhhbmRsZXI7XHJcbiAgICBcclxuICAgIC8qKiBAY29uc3RydWN0b3IgKi8ge1xyXG4gICAgICAgIF92YWx1ZSA9IF9wMDtcclxuICAgICAgICBfaGFuZGxlciA9IF9wMTtcclxuICAgICAgICBfc3RhY2sgPSBfaGFuZGxlci5wYXJzZVN0YWNrVHJhY2UoRXJyKTtcclxuICAgICAgICByZXR1cm4gX3RoaXMgPSB7XHJcbiAgICAgICAgICAgIG9rLFxyXG4gICAgICAgICAgICBlcnIsXHJcbiAgICAgICAgICAgIGluc3BlY3QsXHJcbiAgICAgICAgICAgIHN0YWNrLFxyXG4gICAgICAgICAgICBleHBlY3QsXHJcbiAgICAgICAgICAgIGV4cGVjdEVycixcclxuICAgICAgICAgICAgdW5sb2NrT3IsXHJcbiAgICAgICAgICAgIGFuZCxcclxuICAgICAgICAgICAgbWFwLFxyXG4gICAgICAgICAgICBtYXBFcnIsXHJcbiAgICAgICAgICAgIHJlY292ZXIsXHJcbiAgICAgICAgICAgIGRlZ3JhZGUsXHJcbiAgICAgICAgICAgIHRvT3B0aW9uXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBvaygpOiB0aGlzIGlzIE9rPHVua25vd24+IHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZXJyKCk6IHRoaXMgaXMgRXJyPFQxPiB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaW5zcGVjdCgpOiBUMSB7XHJcbiAgICAgICAgcmV0dXJuIF92YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzdGFjaygpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBfc3RhY2s7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZXhwZWN0KG1lc3NhZ2U6IHN0cmluZyk6IG5ldmVyIHtcclxuICAgICAgICBsZXQgZTogVDEgPSBpbnNwZWN0KCk7XHJcbiAgICAgICAgbGV0IHRyYW5zaWVudEVPOiBPcHRpb248RXJyb3IwPGFueSwgdW5rbm93bj4+ID0gTm9uZTtcclxuICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgIGxldCBjdXN0b21FOiBFcnJvcjA8YW55LCB1bmtub3duPiA9IEVycm9yMCh7XHJcbiAgICAgICAgICAgICAgICBjb2RlOiBlLm5hbWUudG9VcHBlckNhc2UoKSxcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRyYW5zaWVudEVPID0gU29tZShjdXN0b21FKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRyYW5zaWVudEVPLm5vbmUoKSkgX2hhbmRsZXIubWF0Y2hFcnJvcihlLCBlID0+IHtcclxuICAgICAgICAgICAgZS5tZXNzYWdlID0gZS5tZXNzYWdlLm1hcChtZXNzYWdlMCA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbWVzc2FnZTAgKyBcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgXCJcXG5cIiArIFxyXG4gICAgICAgICAgICAgICAgXCJcXG4gICAgIFwiICsgXCJDb250ZXh0XCIgKyBcclxuICAgICAgICAgICAgICAgIFwiXFxuICAgICBcIiArIG1lc3NhZ2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0cmFuc2llbnRFTyA9IFNvbWUoZSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICBsZXQgdHJhbnNpZW50RTogRXJyb3IwPGFueSwgdW5rbm93bj4gPSB0cmFuc2llbnRFT1xyXG4gICAgICAgICAgICAudG9SZXN1bHQodW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAucmVjb3ZlcigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gRXJyb3IwKHtcclxuICAgICAgICAgICAgICAgICAgICBjb2RlOiBcIlBBTklDXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC51bmxvY2soKTtcclxuICAgICAgICBwYW5pYyh0cmFuc2llbnRFKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBleHBlY3RFcnIoX186IHVua25vd24pOiBUMSB7XHJcbiAgICAgICAgcmV0dXJuIGluc3BlY3QoKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB1bmxvY2tPcjxUMj4oZmFsbGJhY2s6IFQyKTogVDIge1xyXG4gICAgICAgIHJldHVybiBmYWxsYmFjaztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBhbmQoX186IHVua25vd24pOiBFcnI8VDE+IHtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbWFwKF9fOiB1bmtub3duKTogRXJyPFQxPiB7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG1hcEVycjxUMj4odGFzazogRnVuY3Rpb248VDEsIFQyPik6IEVycjxUMj4ge1xyXG4gICAgICAgIHJldHVybiBFcnIodGFzayhpbnNwZWN0KCkpKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZWNvdmVyPFQyPih0YXNrOiBGdW5jdGlvbjxUMSwgVDI+KTogT2s8VDI+IHtcclxuICAgICAgICByZXR1cm4gT2sodGFzayhpbnNwZWN0KCkpKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkZWdyYWRlKF9fOiB1bmtub3duKTogRXJyPFQxPiB7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHRvT3B0aW9uKCk6IE9wdGlvbjxuZXZlcj4ge1xyXG4gICAgICAgIHJldHVybiBOb25lO1xyXG4gICAgfVxyXG59IiwgImltcG9ydCB0eXBlIHsgUmVmRGVsVGFzayB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgdHlwZSB7IFJlZlRhc2sgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHR5cGUgeyBXcmFwcGVyIH0gZnJvbSBcIkByb290XCI7XHJcblxyXG5leHBvcnQgdHlwZSBSZWY8VDE+ID0gXHJcbiAgICAmIFdyYXBwZXI8VDE+IFxyXG4gICAgJiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogTXV0YXRlcyB0aGUgaW50ZXJuYWwgdmFsdWUgb2YgdGhlIGBSZWZgIGluc3RhbmNlLlxyXG4gICAgICovXHJcbiAgICBtdXQodmFsdWU6IFQxKTogUmVmPFQxPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBSZWdpc3RlcnMgYSBjYWxsYmFjayB0aGF0IGlzIGludm9rZWQgd2hlbmV2ZXIgdGhlIHZhbHVlIGNoYW5nZXMuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlZjogUmVmPGJpZ2ludD4gPSBSZWYoMjAwbik7XHJcbiAgICAgKiAgcmVmLm9uQ2hhbmdlKHZhbHVlID0+IHtcclxuICAgICAqICAgICAgLy8vIC4uLlxyXG4gICAgICogICAgICByZXR1cm47XHJcbiAgICAgKiAgfSk7XHJcbiAgICAgKiAgcmVmLm11dCg0MDRuKTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBvbkNoYW5nZSh0YXNrOiBSZWZUYXNrPFQxPik6IFJlZkRlbFRhc2s7XHJcbn07XHJcblxyXG4vKipcclxuICogKioqQnJpZWYqKipcclxuICogV3JhcHBlciB0aGF0IHN1cHBvcnRzIG11dGF0aW9uIGFuZCBjaGFuZ2UgdHJhY2tpbmcuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gUmVmPFQxPihfdmFsdWU6IFQxKTogUmVmPFQxPiB7XHJcbiAgICBsZXQgX3RoaXM6IFJlZjxUMT47XHJcbiAgICBsZXQgX2NvdW50OiBiaWdpbnQ7XHJcbiAgICBsZXQgX3Rhc2tNYXA6IE1hcDxiaWdpbnQsIFJlZlRhc2s8VDE+PjtcclxuXHJcbiAgICAvKiogQGNvbnN0cnVjdG9yICovIHtcclxuICAgICAgICBfY291bnQgPSAwbjtcclxuICAgICAgICBfdGFza01hcCA9IG5ldyBNYXAoKTtcclxuICAgICAgICByZXR1cm4gX3RoaXMgPSB7IHVud3JhcCwgbXV0LCBvbkNoYW5nZSB9O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHVud3JhcCgpOiBUMSB7XHJcbiAgICAgICAgcmV0dXJuIF92YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtdXQodmFsdWU6IFQxKTogUmVmPFQxPiB7XHJcbiAgICAgICAgbGV0IG9sZFZhbHVlOiBUMSA9IHVud3JhcCgpO1xyXG4gICAgICAgIGxldCBuZXdWYWx1ZTogVDEgPSB2YWx1ZTtcclxuICAgICAgICBfdmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICBfdGFza01hcFxyXG4gICAgICAgICAgICAudmFsdWVzKClcclxuICAgICAgICAgICAgLnRvQXJyYXkoKVxyXG4gICAgICAgICAgICAuZm9yRWFjaCh0YXNrID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0YXNrKG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBvbkNoYW5nZSh0YXNrOiBSZWZUYXNrPFQxPik6IFJlZkRlbFRhc2sge1xyXG4gICAgICAgIGxldCBrZXk6IGJpZ2ludCA9IF9nZW5LZXkoKTtcclxuICAgICAgICBfdGFza01hcC5zZXQoa2V5LCB0YXNrKTtcclxuICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICBfdGFza01hcC5kZWxldGUoa2V5KTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfZ2VuS2V5KCk6IGJpZ2ludCB7XHJcbiAgICAgICAgcmV0dXJuIF9jb3VudCArPSAxbjtcclxuICAgIH1cclxufSIsICJpbXBvcnQgdHlwZSB7IENsb3N1cmUgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHR5cGUgeyBPcHRpb24gfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgSU5URVJOQUxfRVJST1JfTUVTU0FHRSB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBBbGxvYyB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBEZUFsbG9jIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IFNvbWUgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgTm9uZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuZXhwb3J0IHR5cGUgRHluPFQxPiA9IEFsbG9jPFQxPiB8IERlQWxsb2M8VDE+O1xyXG5cclxuLyoqXHJcbiAqICoqKkJyaWVmKioqXHJcbiAqIEEgZHluYW1pYyByZXNvdXJjZSBtYW5hZ2VtZW50IHBhdHRlcm4sIGFsbG93aW5nIGZvclxyXG4gKiBhbGxvY2F0aW9uIGFuZCBkZWFsbG9jYXRpb24gb2YgcmVzb3VyY2VzIHdpdGggcHJvcGVyIGxpZmVjeWNsZSBoYW5kbGluZy5cclxuICogXHJcbiAqICoqKldhcm5pbmcqKipcclxuICogVGhlIGBEeW5gIHdyYXBwZXIgbXVzdCBiZSBwcm9wZXJseSBtYW5hZ2VkIHRvIGF2b2lkIG1lbW9yeSBsZWFrcy4gSWYgdGhlIHdyYXBwZXIgaXRzZWxmIGlzIGdhcmJhZ2UgY29sbGVjdGVkIFxyXG4gKiB3aXRob3V0IGl0cyBjb250ZW50IGJlaW5nIGV4cGxpY2l0bHkgZGVhbGxvY2F0ZWQsIHRoZSByZXNvdXJjZXMgaXQgbWFuYWdlcyB3aWxsIG5vdCBiZSByZWN5Y2xlZCBcclxuICogYW5kIG1hZGUgYXZhaWxhYmxlIGZvciByZXVzZS4gRW5zdXJlIGFsbCBhbGxvY2F0ZWQgcmVzb3VyY2VzIGFyZSBkZWFsbG9jYXRlZCBiZWZvcmUgdGhlIGBEeW5gIGluc3RhbmNlIGdvZXMgb3V0IG9mIHNjb3BlLlxyXG4gKiBcclxuICogKioqRXhhbXBsZSoqKlxyXG4gKiBgYGB0c1xyXG4gKiAgdHlwZSBDYXIgPSB7XHJcbiAqICAgICAgZHJpdmUoKTogdm9pZDtcclxuICogIH07XHJcbiAqIFxyXG4gKiAgY29uc3QgQ2FyOiBEeW5Db25zdHJ1Y3RvcjxDYXIsIFtfbW9kZWw6IHN0cmluZ10+ID0gRHluKFxyXG4gKiAgICAgIChfbW9kZWw6IHN0cmluZykgPT4ge1xyXG4gKiAgICAgICAgICBjb25zdHJ1Y3RvciB7XHJcbiAqICAgICAgICAgICAgICByZXR1cm4geyBkcml2ZSB9O1xyXG4gKiAgICAgICAgICB9XHJcbiAqIFxyXG4gKiAgICAgICAgICBmdW5jdGlvbiBkcml2ZSgpOiB2b2lkIHtcclxuICogICAgICAgICAgICAgIHJldHVybiBcIlZyb29tLlwiO1xyXG4gKiAgICAgICAgICB9XHJcbiAqICAgICAgfSxcclxuICogICAgICBjYXIgPT4ge1xyXG4gKiAgICAgICAgICAvLy8gUmVzZXQgY2FyIG9yIGFueSB0YXNrcyBiZWZvcmUgaXQgaXMgbWFkZSBhdmFpbGFibGUgYWdhaW4uXHJcbiAqICAgICAgICAgIC8vLyAuLi5cclxuICogICAgICAgICAgcmV0dXJuIGNhcjtcclxuICogICAgICB9LCAzMm4sIFwiTW9kZWxUXCJcclxuICogICk7XHJcbiAqIFxyXG4gKiAgbGV0IGNhcjogRHluPENhcj4gPSBDYXIoXCJNb2RlbEZcIik7XHJcbiAqICBjYXIgPSBjYXIuZGVBbGxvYygpO1xyXG4gKiAgY2FyLm1hcChjYXIgPT4ge1xyXG4gKiAgICAgIC8vLyBXaWxsIG5vdCBydW4gYmVjYXVzZSBgY2FyYCBoYXMgYmVlbiBkZWFsbG9jYXRlZC5cclxuICogICAgICAvLy8gLi4uXHJcbiAqICB9KTtcclxuICogYGBgXHJcbiAqIFxyXG4gKiAqKipFeGFtcGxlKioqXHJcbiAqIGBgYHRzXHJcbiAqICAvLy8gV2FybmluZy5cclxuICogIGxldCBjYXI6IER5bjxDYXI+ID0gQ2FyKFwiTW9kZWxCXCIpO1xyXG4gKiAgY2FyLmRlQWxsb2MoKTtcclxuICogIGNhci5tYXAoY2FyID0+IHtcclxuICogICAgICAvLy8gV2lsbCBydW4gYmVjYXVzZSB0aGUgY2FyIG11c3QgYmUgdXBkYXRlZCB0byB0aGUgbmV3IHN0YXRlLlxyXG4gKiAgICAgIC8vLyBBbHdheXMgYXNzaWduIHRoZSBgZGVBbGxvY2AgcmVzdWx0IGEgbmV3IGBEeW5gIHdyYXBwZXIgb3JcclxuICogICAgICAvLy8gaXRzZWxmLlxyXG4gKiAgICAgIC8vLyAuLi5cclxuICogIH0pO1xyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBEeW48VDEsIFQyIGV4dGVuZHMgQXJyYXk8dW5rbm93bj4+KF9jb25zdHJ1Y3RvcjogQ2xvc3VyZTxUMiwgVDE+LCBfb25EZUFsbG9jOiBDbG9zdXJlPFtUMV0sIFQxPiwgX2xvYWQ6IGJpZ2ludCwgLi4uX29uTG9hZFBheWxvYWQ6IFQyKTogQ2xvc3VyZTxUMiwgRHluPFQxPj4ge1xyXG4gICAgbGV0IF9hdmFpbGFibGU6IE1hcDxiaWdpbnQsIFQxPjtcclxuICAgIGxldCBfY291bnQ6IGJpZ2ludDtcclxuXHJcbiAgICAvKiogQGNvbnN0cnVjdG9yICovIHtcclxuICAgICAgICBfYXZhaWxhYmxlID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIF9jb3VudCA9IDBuO1xyXG4gICAgICAgIGxldCBpOiBiaWdpbnQgPSAwbjtcclxuICAgICAgICB3aGlsZSAoaSA8IF9sb2FkKSB7XHJcbiAgICAgICAgICAgIGxldCBrZXk6IGJpZ2ludCA9IF9nZW5LZXkoKTtcclxuICAgICAgICAgICAgX2F2YWlsYWJsZS5zZXQoa2V5LCBfY29uc3RydWN0b3IoLi4uX29uTG9hZFBheWxvYWQpKTtcclxuICAgICAgICAgICAgaSArKztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICguLi5wYXlsb2FkOiBUMik6IER5bjxUMT4ge1xyXG4gICAgICAgICAgICBsZXQgX2tleTogT3B0aW9uPGJpZ2ludD47XHJcbiAgICAgICAgICAgIGxldCBfdGhpczogRHluPFQxPjtcclxuICAgIFxyXG4gICAgICAgICAgICAvKiogQGNvbnN0cnVjdG9yICovIHtcclxuICAgICAgICAgICAgICAgIF9rZXkgPSBOb25lO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzID0gYWxsb2MoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gYWxsb2MoKTogQWxsb2M8VDE+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfcmVjeWNsZWRLZXkoKVxyXG4gICAgICAgICAgICAgICAgICAgIC50b1Jlc3VsdCh1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgLm1hcChrZXkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfa2V5ID0gU29tZShrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQWxsb2MoX3JlY3lsZWQoa2V5KSwgeyBkZUFsbG9jIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLnJlY292ZXIoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfa2V5ID0gU29tZShfZ2VuS2V5KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQWxsb2MoX2NvbnN0cnVjdG9yKC4uLnBheWxvYWQpLCB7IGRlQWxsb2MgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAudW5sb2NrKCk7ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICBmdW5jdGlvbiBkZUFsbG9jKCk6IERlQWxsb2M8VDE+IHtcclxuICAgICAgICAgICAgICAgIF9rZXlcclxuICAgICAgICAgICAgICAgICAgICAudG9SZXN1bHQodW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoa2V5ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8vIElmIHRoZSBrZXkgaXMgYXZhaWxhYmxlIHRoZW4gaXQgaXMgYWxsb2NhdGVkLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfa2V5ID0gTm9uZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3JlY3lsZShrZXksIF9vbkRlQWxsb2MoX3RoaXMuZXhwZWN0KFwiRHluOiBDb3VsZCBub3QgZGVhbGxvY2F0ZSByZXNvdXJjZSBidXQgdGhlIGtleSB3YXMgYXZhaWxhYmxlLlwiICsgSU5URVJOQUxfRVJST1JfTUVTU0FHRSkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzID0gRGVBbGxvYyh7IGRlQWxsb2MgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9nZW5LZXkoKTogYmlnaW50IHtcclxuICAgICAgICByZXR1cm4gX2NvdW50ICs9IDFuO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9yZWN5Y2xlZEtleSgpOiBPcHRpb248YmlnaW50PiB7XHJcbiAgICAgICAgbGV0IGtleTogYmlnaW50IHwgdW5kZWZpbmVkID0gX2F2YWlsYWJsZVxyXG4gICAgICAgICAgICAua2V5cygpXHJcbiAgICAgICAgICAgIC50b0FycmF5KClcclxuICAgICAgICAgICAgLmF0KDApO1xyXG4gICAgICAgIGlmICgha2V5KSByZXR1cm4gTm9uZTtcclxuICAgICAgICByZXR1cm4gU29tZShrZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9yZWN5bGVkKGtleTogYmlnaW50KTogVDEge1xyXG4gICAgICAgIGxldCB2YWx1ZTogVDEgPSBfYXZhaWxhYmxlLmdldChrZXkpITtcclxuICAgICAgICBfYXZhaWxhYmxlLmRlbGV0ZShrZXkpO1xyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfcmVjeWxlKGtleTogYmlnaW50LCB2YWx1ZTogVDEpOiB2b2lkIHtcclxuICAgICAgICBfYXZhaWxhYmxlLnNldChrZXksIHZhbHVlKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbn0iLCAiaW1wb3J0IHR5cGUgeyBEeW5XcmFwcGVyIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IE5vbmUgfSBmcm9tIFwiQHJvb3RcIlxyXG5cclxuZXhwb3J0IHR5cGUgRGVBbGxvYzxUMT4gPSBcclxuICAgICYgRHluV3JhcHBlcjxUMT5cclxuICAgICYgTm9uZTtcclxuXHJcbi8qKlxyXG4gKiAqKipCcmllZioqKlxyXG4gKiBUaGUgZGVhbGxvY2F0ZWQgc3RhdGUgb2YgYW4gYWxsb2NhdGVkIHJlc291cmNlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIERlQWxsb2M8VDE+KF9keW46IER5bldyYXBwZXI8VDE+KTogRGVBbGxvYzxUMT4ge1xyXG4gICAgLyoqIEBjb25zdHJ1Y3RvciAqLyB7XHJcbiAgICAgICAgcmV0dXJuIHsgLi4uIE5vbmUsIC4uLiBfZHluIH07XHJcbiAgICB9XHJcbn0iLCAiaW1wb3J0IHR5cGUgeyBEeW5XcmFwcGVyIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB0eXBlIHsgVW5sb2NrZWRXcmFwcGVyIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IFNvbWUgfSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcbmV4cG9ydCB0eXBlIEFsbG9jPFQxPiA9XHJcbiAgICAmIER5bldyYXBwZXI8VDE+XHJcbiAgICAmIFVubG9ja2VkV3JhcHBlcjxUMT5cclxuICAgICYgU29tZTxUMT47XHJcblxyXG4vKipcclxuICogKioqQnJpZWYqKipcclxuICogVGhlIGFsbG9jYXRlZCBzdGF0ZSBvZiBhbiBhbGxvY2F0ZWQgcmVzb3VyY2UuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gQWxsb2M8VDE+KF92YWx1ZTogVDEsIF9keW46IER5bldyYXBwZXI8VDE+KTogQWxsb2M8VDE+IHtcclxuICAgIC8qKiBAY29uc3RydWN0b3IgKi8ge1xyXG4gICAgICAgIHJldHVybiB7IC4uLiBTb21lKF92YWx1ZSksIC4uLiBfZHluIH07XHJcbiAgICB9XHJcbn0iLCAiaW1wb3J0IHsgT3B0aW9uIH0gZnJvbSBcIkByb290XCI7XHJcblxyXG5leHBvcnQgY29uc3QgZmxhZyA9IE9wdGlvbi5mbGFnO1xyXG5leHBvcnQgY29uc3QgYWxsTyA9IE9wdGlvbi5hbGw7XHJcbmV4cG9ydCBjb25zdCBhbnlPID0gT3B0aW9uLmFueTsiLCAiaW1wb3J0IHR5cGUgeyBGdW5jdGlvbiB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgdHlwZSB7IE9wdGlvbiB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgdHlwZSB7IFVubG9ja2VkV3JhcHBlciB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgdHlwZSB7IEJyYW5kZWQgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgTm9uZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBPayB9IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuZXhwb3J0IHR5cGUgU29tZTxUMT4gPSBcclxuICAgICYgQnJhbmRlZDxcIlNvbWVcIj5cclxuICAgICYgVW5sb2NrZWRXcmFwcGVyPFQxPlxyXG4gICAgJiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogYHNvbWVgIGNoZWNrcyBpZiB0aGUgY3VycmVudCBpbnN0YW5jZSBpcyBgU29tZWAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IG9wdGlvbjogT3B0aW9uPDIwMG4+O1xyXG4gICAgICogIGlmIChvcHRpb24uc29tZSgpKSB7XHJcbiAgICAgKiAgICAgIGxldCB2YWx1ZTogMjAwbiA9IG9wdGlvbi51bmxvY2soKTtcclxuICAgICAqICAgICAgLy8vIC4uLlxyXG4gICAgICogIH1cclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBzb21lKCk6IHRoaXMgaXMgU29tZTxUMT47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogYG5vbmVgIGNoZWNrcyBpZiB0aGUgY3VycmVudCBpbnN0YW5jZSBpcyBgTm9uZWAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IG9wdGlvbjogT3B0aW9uPDIwMG4+O1xyXG4gICAgICogIGlmIChvcHRpb24ubm9uZSgpKSB7XHJcbiAgICAgKiAgICAgIC8vLyBgT3B0aW9uYCBjYW5ub3QgYHVubG9ja2AgYmVjYXVzZSBpdCBpcyBgTm9uZWAuXHJcbiAgICAgKiAgICAgIC8vLyAuLi5cclxuICAgICAqICB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgbm9uZSgpOiB0aGlzIGlzIE5vbmU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogYGV4cGVjdGAgdGVybWluYXRlcyB3aXRoIGBwYW5pY2AgaWYgdGhlIGBPcHRpb25gIGlzIGBOb25lYC5cclxuICAgICAqIFxyXG4gICAgICogKioqV2FybmluZyoqKlxyXG4gICAgICogUmVzZXJ2ZWQgZm9yIGRlYnVnZ2luZyBvciB1bnJlY292ZXJhYmxlIGVycm9ycy5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgb3B0aW9uOiBPcHRpb248MjAwbj47XHJcbiAgICAgKiAgbGV0IHN0YXR1czogMjAwbiA9IG9wdGlvbi5leHBlY3QoXCJUaGlzIGlzIHVuZXhwZWN0ZWQgYW5kIHVucmVjb3ZlcmFibGUuXCIpO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIGV4cGVjdChfXzogdW5rbm93bik6IFQxO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIFJldHJpZXZlcyB0aGUgdmFsdWUgb2YgYSBgU29tZWAsIG9yIGZhbGxzIGJhY2sgdG8gdGhlIHByb3ZpZGVkIHZhbHVlIGlmIGl0XHUyMDE5cyBgTm9uZWAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IG9wdGlvbjogT3B0aW9uPDIwMG4+ID0gTm9uZTtcclxuICAgICAqICBsZXQgc3RhdHVzOiAyMDBuID0gb3B0aW9uLnVubG9ja09yKDIwMG4pO1xyXG4gICAgICogIGNvbnNvbGUubG9nKHN0YXR1cyk7IC8vLyAyMDBuLlxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIHVubG9ja09yKF9fOiB1bmtub3duKTogVDE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogQ2hhaW5zIGFuIHRhc2sgdW50aWwgdGhlIGZpcnN0IGBOb25lYCBpcyBlbmNvdW50ZXJlZC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgb3B0aW9uOiBPcHRpb248MjAwbj4gPSBOb25lO1xyXG4gICAgICogIG9wdGlvblxyXG4gICAgICogICAgICAuYW5kKHZhbHVlID0+IHtcclxuICAgICAqICAgICAgICAgIC8vLyBUYXNrIGlzIHNraXBwZWQgYmVjYXVzZSBgT3B0aW9uYCBpcyBgTm9uZWAuXHJcbiAgICAgKiAgICAgICAgICAvLy8gLi4uXHJcbiAgICAgKiAgICAgICAgICByZXR1cm4gU29tZSh2YWx1ZSArIDFuKTtcclxuICAgICAqICAgICAgfSlcclxuICAgICAqICAgICAgLmFuZCh2YWx1ZSA9PiB7XHJcbiAgICAgKiAgICAgICAgICAvLy8gVGFzayBpcyBza2lwcGVkIGJlY2F1c2UgYE9wdGlvbmAgaXMgYE5vbmVgLlxyXG4gICAgICogICAgICAgICAgLy8vIC4uLlxyXG4gICAgICogICAgICB9KTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBhbmQ8VDI+KHRhc2s6IEZ1bmN0aW9uPFQxLCBPcHRpb248VDI+Pik6IE9wdGlvbjxUMj47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogVHJhbnNmb3JtcyB0aGUgYFNvbWVgIHZhbHVlIGlmIHByZXNlbnQsIGJ1dCBpZiB0aGlzIGlzIGFscmVhZHkgYW4gYE5vbmVgLCBpdCByZW1haW5zIHVuY2hhbmdlZC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgb3B0aW9uMDogT3B0aW9uPDIwMG4+ID0gU29tZSgyMDBuKTtcclxuICAgICAqICBsZXQgb3B0aW9uMTogT3B0aW9uPDIwMW4+ID0gb3B0aW9uLm1hcCh2YWx1ZSA9PiB7XHJcbiAgICAgKiAgICAgIC8vLyBUYXNrIGlzIHJ1biBiZWNhdXNlIGBPcHRpb25gIGlzIGBTb21lYC5cclxuICAgICAqICAgICAgLy8vIC4uLlxyXG4gICAgICogICAgICByZXR1cm4gdmFsdWUgKyAxbjtcclxuICAgICAqICB9KTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBtYXA8VDI+KHRhc2s6IEZ1bmN0aW9uPFQxLCBUMj4pOiBTb21lPFQyPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBDb252ZXJ0cyBhbiBgT3B0aW9uPFQxPmAgdG8gYSBgUmVzdWx0PFQxLCBUMj5gLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCBvcHRpb246IE9wdGlvbjwyMDBuPjtcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj4gPSBvcHRpb24udG9SZXN1bHQoNDA0bik7XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgdG9SZXN1bHQoX186IHVua25vd24pOiBPazxUMT47XHJcbn07XHJcblxyXG4vKipcclxuICogKioqQnJpZWYqKipcclxuICogVGhlIHZhbHVlIHdpdGhpbiBhbiBgT3B0aW9uYC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBTb21lPFQxPihfdmFsdWU6IFQxKTogU29tZTxUMT4ge1xyXG4gICAgLyoqIEBjb25zdHJ1Y3RvciAqLyB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdHlwZSxcclxuICAgICAgICAgICAgc29tZSxcclxuICAgICAgICAgICAgbm9uZSxcclxuICAgICAgICAgICAgZXhwZWN0LFxyXG4gICAgICAgICAgICB1bmxvY2ssXHJcbiAgICAgICAgICAgIHVubG9ja09yLFxyXG4gICAgICAgICAgICBhbmQsXHJcbiAgICAgICAgICAgIG1hcCxcclxuICAgICAgICAgICAgdG9SZXN1bHRcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHR5cGUoKTogXCJTb21lXCIge1xyXG4gICAgICAgIHJldHVybiBcIlNvbWVcIjtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzb21lKCk6IHRoaXMgaXMgU29tZTxUMT4ge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG5vbmUoKTogdGhpcyBpcyBOb25lIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZXhwZWN0KF9fOiB1bmtub3duKTogVDEge1xyXG4gICAgICAgIHJldHVybiBfdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdW5sb2NrKCk6IFQxIHtcclxuICAgICAgICByZXR1cm4gX3ZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHVubG9ja09yKF9fOiB1bmtub3duKTogVDEge1xyXG4gICAgICAgIHJldHVybiBfdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYW5kPFQyPih0YXNrOiBGdW5jdGlvbjxUMSwgT3B0aW9uPFQyPj4pOiBPcHRpb248VDI+IHtcclxuICAgICAgICByZXR1cm4gdGFzayhfdmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG1hcDxUMj4odGFzazogRnVuY3Rpb248VDEsIFQyPik6IFNvbWU8VDI+IHtcclxuICAgICAgICByZXR1cm4gU29tZSh0YXNrKF92YWx1ZSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHRvUmVzdWx0KF9fOiB1bmtub3duKTogT2s8VDE+IHtcclxuICAgICAgICByZXR1cm4gT2soX3ZhbHVlKTtcclxuICAgIH1cclxufSIsICJpbXBvcnQgdHlwZSB7IEJyYW5kZWQgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgU29tZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBFcnIgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgRXJyb3IgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgcGFuaWMgfSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcbmV4cG9ydCB0eXBlIE5vbmUgPSBcclxuICAgICYgQnJhbmRlZDxcIk5vbmVcIj5cclxuICAgICYge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIGBzb21lYCBjaGVja3MgaWYgdGhlIGN1cnJlbnQgaW5zdGFuY2UgaXMgYFNvbWVgLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCBvcHRpb246IE9wdGlvbjwyMDBuPjtcclxuICAgICAqICBpZiAob3B0aW9uLnNvbWUoKSkge1xyXG4gICAgICogICAgICBsZXQgdmFsdWU6IDIwMG4gPSBvcHRpb24udW5sb2NrKCk7XHJcbiAgICAgKiAgICAgIC8vLyAuLi5cclxuICAgICAqICB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgc29tZSgpOiB0aGlzIGlzIFNvbWU8dW5rbm93bj47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogYG5vbmVgIGNoZWNrcyBpZiB0aGUgY3VycmVudCBpbnN0YW5jZSBpcyBgTm9uZWAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IG9wdGlvbjogT3B0aW9uPDIwMG4+O1xyXG4gICAgICogIGlmIChvcHRpb24ubm9uZSgpKSB7XHJcbiAgICAgKiAgICAgIC8vLyBgT3B0aW9uYCBjYW5ub3QgYHVubG9ja2AgYmVjYXVzZSBpdCBpcyBgTm9uZWAuXHJcbiAgICAgKiAgICAgIC8vLyAuLi5cclxuICAgICAqICB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgbm9uZSgpOiB0aGlzIGlzIE5vbmU7XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIGBleHBlY3RgIHRlcm1pbmF0ZXMgd2l0aCBgcGFuaWNgIGlmIHRoZSBgT3B0aW9uYCBpcyBgTm9uZWAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKldhcm5pbmcqKipcclxuICAgICAqIFJlc2VydmVkIGZvciBkZWJ1Z2dpbmcgb3IgdW5yZWNvdmVyYWJsZSBlcnJvcnMuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IG9wdGlvbjogT3B0aW9uPDIwMG4+O1xyXG4gICAgICogIGxldCBzdGF0dXM6IDIwMG4gPSBvcHRpb24uZXhwZWN0KFwiVGhpcyBpcyB1bmV4cGVjdGVkIGFuZCB1bnJlY292ZXJhYmxlLlwiKTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBleHBlY3QobWVzc2FnZTogc3RyaW5nKTogbmV2ZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogUmV0cmlldmVzIHRoZSB2YWx1ZSBvZiBhIGBTb21lYCwgb3IgZmFsbHMgYmFjayB0byB0aGUgcHJvdmlkZWQgdmFsdWUgaWYgaXRcdTIwMTlzIGBOb25lYC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgb3B0aW9uOiBPcHRpb248MjAwbj4gPSBOb25lO1xyXG4gICAgICogIGxldCBzdGF0dXM6IDIwMG4gPSBvcHRpb24udW5sb2NrT3IoMjAwbik7XHJcbiAgICAgKiAgY29uc29sZS5sb2coc3RhdHVzKTsgLy8vIDIwMG4uXHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgdW5sb2NrT3I8VDI+KGZhbGxiYWNrOiBUMik6IFQyO1xyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBDaGFpbnMgYW4gdGFzayB1bnRpbCB0aGUgZmlyc3QgYE5vbmVgIGlzIGVuY291bnRlcmVkLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCBvcHRpb246IE9wdGlvbjwyMDBuPiA9IE5vbmU7XHJcbiAgICAgKiAgb3B0aW9uXHJcbiAgICAgKiAgICAgIC5hbmQodmFsdWUgPT4ge1xyXG4gICAgICogICAgICAgICAgLy8vIFRhc2sgaXMgc2tpcHBlZCBiZWNhdXNlIGBPcHRpb25gIGlzIGBOb25lYC5cclxuICAgICAqICAgICAgICAgIC8vLyAuLi5cclxuICAgICAqICAgICAgICAgIHJldHVybiBTb21lKHZhbHVlICsgMW4pO1xyXG4gICAgICogICAgICB9KVxyXG4gICAgICogICAgICAuYW5kKHZhbHVlID0+IHtcclxuICAgICAqICAgICAgICAgIC8vLyBUYXNrIGlzIHNraXBwZWQgYmVjYXVzZSBgT3B0aW9uYCBpcyBgTm9uZWAuXHJcbiAgICAgKiAgICAgICAgICAvLy8gLi4uXHJcbiAgICAgKiAgICAgIH0pO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIGFuZChfXzogdW5rbm93bik6IE5vbmU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogVHJhbnNmb3JtcyB0aGUgYFNvbWVgIHZhbHVlIGlmIHByZXNlbnQsIGJ1dCBpZiB0aGlzIGlzIGFscmVhZHkgYW4gYE5vbmVgLCBpdCByZW1haW5zIHVuY2hhbmdlZC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgb3B0aW9uMDogT3B0aW9uPDIwMG4+ID0gU29tZSgyMDBuKTtcclxuICAgICAqICBsZXQgb3B0aW9uMTogT3B0aW9uPDIwMW4+ID0gb3B0aW9uLm1hcCh2YWx1ZSA9PiB7XHJcbiAgICAgKiAgICAgIC8vLyBUYXNrIGlzIHJ1biBiZWNhdXNlIGBPcHRpb25gIGlzIGBTb21lYC5cclxuICAgICAqICAgICAgLy8vIC4uLlxyXG4gICAgICogICAgICByZXR1cm4gdmFsdWUgKyAxbjtcclxuICAgICAqICB9KTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBtYXAoX186IHVua25vd24pOiBOb25lO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIENvbnZlcnRzIGFuIGBPcHRpb248VDE+YCB0byBhIGBSZXN1bHQ8VDEsIFQyPmAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IG9wdGlvbjogT3B0aW9uPDIwMG4+O1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPiA9IG9wdGlvbi50b1Jlc3VsdCg0MDRuKTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICB0b1Jlc3VsdDxUMT4oZTogVDEpOiBFcnI8VDE+O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqICoqKkJyaWVmKioqXHJcbiAqIFRoZSBhYnNlbmNlIG9mIGEgdmFsdWUgb3IgYW4gXCJlbXB0eVwiIHN0YXRlLlxyXG4gKiBcclxuICogKioqV2FybmluZyoqKlxyXG4gKiBBbnkgb3BlcmF0aW9uIGF0dGVtcHRpbmcgdG8gYWNjZXNzIGFuIGBPcHRpb25gIG11c3Qgc2FmZWx5IGhhbmRsZSB0aGUgYE5vbmVgIHN0YXRlIG9yIHRlcm1pbmF0ZSB3aXRoIGFuIGVycm9yLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IE5vbmU6IE5vbmUgPSAoKCkgPT4ge1xyXG4gICAgbGV0IF90aGlzOiBOb25lO1xyXG5cclxuICAgIC8qKiBAY29uc3RydWN0b3IgKi8ge1xyXG4gICAgICAgIHJldHVybiBfdGhpcyA9IHtcclxuICAgICAgICAgICAgdHlwZSxcclxuICAgICAgICAgICAgc29tZSxcclxuICAgICAgICAgICAgbm9uZSxcclxuICAgICAgICAgICAgZXhwZWN0LFxyXG4gICAgICAgICAgICB1bmxvY2tPcixcclxuICAgICAgICAgICAgYW5kLFxyXG4gICAgICAgICAgICBtYXAsXHJcbiAgICAgICAgICAgIHRvUmVzdWx0XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB0eXBlKCk6IFwiTm9uZVwiIHtcclxuICAgICAgICByZXR1cm4gXCJOb25lXCI7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGZ1bmN0aW9uIHNvbWUoKTogdGhpcyBpcyBTb21lPHVua25vd24+IHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbm9uZSgpOiB0aGlzIGlzIE5vbmUge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGV4cGVjdChtZXNzYWdlOiBzdHJpbmcpOiBuZXZlciB7XHJcbiAgICAgICAgcGFuaWMoRXJyb3IoXCJFUlJfVkFMVUVfUkVRVUlSRURcIiwgbWVzc2FnZSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHVubG9ja09yPFQxPihmYWxsYmFjazogVDEpOiBUMSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbGxiYWNrO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGFuZChfXzogdW5rbm93bik6IE5vbmUge1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtYXAoX186IHVua25vd24pOiBOb25lIHtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdG9SZXN1bHQ8VDE+KGU6IFQxKTogRXJyPFQxPiB7XHJcbiAgICAgICAgcmV0dXJuIEVycihlKTtcclxuICAgIH1cclxufSkoKTtcclxuXHJcblxyXG5cclxuIiwgImltcG9ydCB0eXBlIHsgUmVzdWx0IH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB0eXBlIHsgV3JhcHBlciB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgdHlwZSB7IENsb3N1cmUgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHR5cGUgeyBGcHZJc2ggfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHR5cGUgeyBGcHZFcnJvciB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBJTlRFUk5BTF9FUlJPUl9NRVNTQUdFIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IEVycm9yIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IE9rIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IEVyciB9IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuZXhwb3J0IHR5cGUgRnB2PFQxIGV4dGVuZHMgYmlnaW50ID0gMm4+ID0gXHJcbiAgICAmIFdyYXBwZXI8YmlnaW50PlxyXG4gICAgJiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogUmV0dXJucyB0aGUgcHJlY2lzaW9uIG9mIHRoZSBgRnB2YC5cclxuICAgICAqL1xyXG4gICAgcHJlY2lzaW9uKCk6IFQxO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIFJldHVybnMgdGhlIHJlcHJlc2VudGF0aW9uIGZhY3RvciBvZiB0aGUgYEZwdmAsIGJhc2VkIG9uIGl0cyBwcmVjaXNpb24uXHJcbiAgICAgKi9cclxuICAgIHJlcHJlc2VudGF0aW9uKCk6IGJpZ2ludDtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBBZGRzIGEgZ2l2ZW4gYEZwdklzaGAgdmFsdWUgdG8gdGhlIGN1cnJlbnQgYEZwdmAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKldhcm5pbmcqKipcclxuICAgICAqIEV4dHJlbWVseSBsYXJnZSB2YWx1ZXMgbWF5IGNhdXNlIHRoZSBwcm9ncmFtIHRvIHBhbmljIGR1ZSB0byBpbnN1ZmZpY2llbnQgbWVtb3J5LlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCB2YWx1ZTogYmlnaW50ID0gRnB2KDIwMG4pXHJcbiAgICAgKiAgICAgIC5leHBlY3QoXCJGYWlsZWQgdG8gaW5pdGlhbGl6ZSBGcHYuXCIpXHJcbiAgICAgKiAgICAgIC5hZGQoMTAwbilcclxuICAgICAqICAgICAgLnVud3JhcCgpO1xyXG4gICAgICogIGNvbnNvbGUubG9nKHZhbHVlKTsgLy8vIDMwMG4gPT09IDMuMDBcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBhZGQodmFsdWU6IEZwdklzaDxUMT4pOiBGcHY8VDE+O1xyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBTdWJ0cmFjdHMgYSBnaXZlbiBgRnB2SXNoYCB2YWx1ZSBmcm9tIHRoZSBjdXJyZW50IGBGcHZgLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipXYXJuaW5nKioqXHJcbiAgICAgKiBFeHRyZW1lbHkgbGFyZ2UgdmFsdWVzIG1heSBjYXVzZSB0aGUgcHJvZ3JhbSB0byBwYW5pYyBkdWUgdG8gaW5zdWZmaWNpZW50IG1lbW9yeS5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgdmFsdWU6IGJpZ2ludCA9IEZwdigyMDBuKVxyXG4gICAgICogICAgICAuZXhwZWN0KFwiRmFpbGVkIHRvIGluaXRpYWxpemUgRnB2LlwiKVxyXG4gICAgICogICAgICAuc3ViKDEwMG4pXHJcbiAgICAgKiAgICAgIC51bndyYXAoKTtcclxuICAgICAqICBjb25zb2xlLmxvZyh2YWx1ZSk7IC8vLyAxMDBuID09PSAxLjAwXHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgc3ViKHZhbHVlOiBGcHZJc2g8VDE+KTogRnB2PFQxPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBNdWx0aXBsaWVzIHRoZSBjdXJyZW50IGBGcHZgIGJ5IGEgZ2l2ZW4gYEZwdklzaGAgdmFsdWUuXHJcbiAgICAgKiBcclxuICAgICAqICoqKldhcm5pbmcqKipcclxuICAgICAqIEV4dHJlbWVseSBsYXJnZSB2YWx1ZXMgbWF5IGNhdXNlIHRoZSBwcm9ncmFtIHRvIHBhbmljIGR1ZSB0byBpbnN1ZmZpY2llbnQgbWVtb3J5LlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCB2YWx1ZTogYmlnaW50ID0gRnB2KDIwMG4pXHJcbiAgICAgKiAgICAgIC5leHBlY3QoXCJGYWlsZWQgdG8gaW5pdGlhbGl6ZSBGcHYuXCIpXHJcbiAgICAgKiAgICAgIC5tdWwoNTBuKSAvLy8gMC41MFxyXG4gICAgICogICAgICAudW53cmFwKCk7XHJcbiAgICAgKiAgY29uc29sZS5sb2codmFsdWUpOyAvLy8gMTAwbiA9PT0gMS4wMFxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIG11bCh2YWx1ZTogRnB2SXNoPFQxPik6IEZwdjxUMT47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogRGl2aWRlcyB0aGUgY3VycmVudCBgRnB2YCBieSBhIGdpdmVuIGBGcHZJc2hgIHZhbHVlLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipXYXJuaW5nKioqXHJcbiAgICAgKiBFeHRyZW1lbHkgbGFyZ2UgdmFsdWVzIG1heSBjYXVzZSB0aGUgcHJvZ3JhbSB0byBwYW5pYyBkdWUgdG8gaW5zdWZmaWNpZW50IG1lbW9yeS5cclxuICAgICAqIFxyXG4gICAgICogKioqV2FybmluZyoqKlxyXG4gICAgICogSWYgZGl2aWRpbmcgYnkgemVybywgYW4gZXJyb3Igd2lsbCBiZSByZXR1cm5lZC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgdmFsdWU6IGJpZ2ludCA9IEZwdigyMDBuKVxyXG4gICAgICogICAgICAuZXhwZWN0KFwiRmFpbGVkIHRvIGluaXRpYWxpemUgRnB2LlwiKVxyXG4gICAgICogICAgICAuZGl2KDUwbikgLy8vIDAuNTBcclxuICAgICAqICAgICAgLnVud3JhcCgpO1xyXG4gICAgICogIGNvbnNvbGUubG9nKHZhbHVlKTsgLy8vIDQwMG4gPT09IDQuMDBcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBkaXYodmFsdWU6IEZwdklzaDxUMT4pOiBSZXN1bHQ8RnB2PFQxPiwgRnB2RXJyb3I+O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqICoqKkJyaWVmKioqXHJcbiAqIENyZWF0ZXMgYSBuZXcgYEZwdmAgd2l0aCB0aGUgcHJvdmlkZWQgdmFsdWUgYW5kIHByZWNpc2lvbi5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBGcHY8VDEgZXh0ZW5kcyBiaWdpbnQgPSAybj4oX2ZwdjogRnB2SXNoPFQxPiwgX3ByZWNpc2lvbjogVDEgPSAoMm4gYXMgYW55KSk6IFJlc3VsdDxGcHY8VDE+LCBGcHZFcnJvcj4ge1xyXG4gICAgbGV0IF92YWx1ZTogYmlnaW50O1xyXG4gICAgXHJcbiAgICAvKiogQGNvbnN0cnVjdG9yICovIHtcclxuICAgICAgICBpZiAocHJlY2lzaW9uKCkgPT09IDBuKSByZXR1cm4gRXJyKEVycm9yKFwiRlBWLkVSUl9QUkVDSVNJT05fSVNfWkVST1wiLCBcIkZwdjogRG9lcyBub3Qgc3VwcG9ydCB6ZXJvIHByZWNpc2lvbi5cIikpO1xyXG4gICAgICAgIGlmIChwcmVjaXNpb24oKSA8IDBuKSByZXR1cm4gRXJyKEVycm9yKFwiRlBWLkVSUl9QUkVDSVNJT05fSVNfTkVHQVRJVkVcIiwgXCJGcHY6IERvZXMgbm90IHN1cHBvcnQgbmVnYXRpdmUgcHJlY2lzaW9uLlwiKSk7XHJcbiAgICAgICAgX3ZhbHVlID0gX3Vud3JhcChfZnB2KTtcclxuICAgICAgICByZXR1cm4gT2soe1xyXG4gICAgICAgICAgICB1bndyYXAsXHJcbiAgICAgICAgICAgIHByZWNpc2lvbixcclxuICAgICAgICAgICAgcmVwcmVzZW50YXRpb24sXHJcbiAgICAgICAgICAgIGFkZCxcclxuICAgICAgICAgICAgc3ViLFxyXG4gICAgICAgICAgICBtdWwsXHJcbiAgICAgICAgICAgIGRpdlxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBmdW5jdGlvbiB1bndyYXAoKTogYmlnaW50IHtcclxuICAgICAgICByZXR1cm4gX3ZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHByZWNpc2lvbigpOiBUMSB7XHJcbiAgICAgICAgcmV0dXJuIF9wcmVjaXNpb247XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmVwcmVzZW50YXRpb24oKTogYmlnaW50IHtcclxuICAgICAgICByZXR1cm4gMTBuKipwcmVjaXNpb24oKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBhZGQodmFsdWU6IEZwdklzaDxUMT4pOiBGcHY8VDE+IHtcclxuICAgICAgICByZXR1cm4gX3dyYXAoKCkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gX3ZhbHVlICsgX3Vud3JhcCh2YWx1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc3ViKHZhbHVlOiBGcHZJc2g8VDE+KTogRnB2PFQxPiB7XHJcbiAgICAgICAgcmV0dXJuIF93cmFwKCgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIF92YWx1ZSAtIF91bndyYXAodmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG11bCh2YWx1ZTogRnB2SXNoPFQxPik6IEZwdjxUMT4ge1xyXG4gICAgICAgIHJldHVybiBfd3JhcCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCB6OiBiaWdpbnQgPSBfdmFsdWUgKiBfdW53cmFwKHZhbHVlKTtcclxuICAgICAgICAgICAgbGV0IHE6IGJpZ2ludCA9IHogLyByZXByZXNlbnRhdGlvbigpO1xyXG4gICAgICAgICAgICByZXR1cm4gcTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkaXYodmFsdWU6IEZwdklzaDxUMT4pOiBSZXN1bHQ8RnB2PFQxPiwgRnB2RXJyb3I+IHtcclxuICAgICAgICBsZXQgbjogYmlnaW50ID0gX3Vud3JhcCh2YWx1ZSk7XHJcbiAgICAgICAgaWYgKG4gPT09IDBuKSByZXR1cm4gRXJyKEVycm9yKFwiRlBWLkVSUl9ESVZJU0lPTl9CWV9aRVJPXCIsIFwiRnB2OiBDYW5ub3QgZGl2aWRlIGJ5IHplcm8uXCIpKTtcclxuICAgICAgICByZXR1cm4gT2soX3dyYXAoKCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgejogYmlnaW50ID0gX3ZhbHVlICogcmVwcmVzZW50YXRpb24oKTtcclxuICAgICAgICAgICAgbGV0IHE6IGJpZ2ludCA9IHogLyBuO1xyXG4gICAgICAgICAgICByZXR1cm4gcTtcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX3dyYXAodGFzazogQ2xvc3VyZTxbXSwgYmlnaW50Pik6IEZwdjxUMT4ge1xyXG4gICAgICAgIHJldHVybiBGcHY8VDE+KHRhc2soKSkuZXhwZWN0KFwiRnB2OiBGYWlsZWQgdG8gd3JhcCB0aGUgdGFzayByZXN1bHQgaW50byBhbiBGcHYuXCIgKyBJTlRFUk5BTF9FUlJPUl9NRVNTQUdFKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfdW53cmFwKGZwdjogRnB2SXNoPFQxPik6IGJpZ2ludCB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBmcHYgPT09IFwiYmlnaW50XCIpIHJldHVybiBmcHY7XHJcbiAgICAgICAgcmV0dXJuIGZwdi51bndyYXAoKTtcclxuICAgIH1cclxufSIsICIvKiogXHJcbiAqICoqKkJyaWVmKioqXHJcbiAqIENvbnZlcnRzIGB1bmtub3duYCB0byBgc3RyaW5nYC5cclxuICogXHJcbiAqICoqKldhcm5pbmcqKipcclxuICogRG9lcyBub3Qgc3VwcG9ydCBjaXJjdWxhciByZWZlcmVuY2VzIGFuZCBjaXJjdWxhciBvYmplY3RzIHdpbGwgcmVzdWx0IGluIGBbb2JqZWN0IE9iamVjdF1gLlxyXG4gKiBcclxuICogKioqRXhhbXBsZSoqKlxyXG4gKiAgYGBgdHNcclxuICogIGNvbnNvbGUubG9nKHRvU3RyaW5nKDQyKSk7ICAgICAgICAgIC8vLyA0MlxyXG4gKiAgY29uc29sZS5sb2codG9TdHJpbmcodHJ1ZSkpOyAgICAgICAgLy8vIHRydWVcclxuICogIGNvbnNvbGUubG9nKHRvU3RyaW5nKG51bGwpKTsgICAgICAgIC8vLyBudWxsXHJcbiAqICBjb25zb2xlLmxvZyh0b1N0cmluZyh1bmRlZmluZWQpKTsgICAvLy8gdW5kZWZpbmVkXHJcbiAqIFxyXG4gKiAgY29uc29sZS5sb2codG9TdHJpbmcoXCJleGFtcGxlXCIpKTsgICAvLy8gZXhhbXBsZVxyXG4gKiBcclxuICogIGxldCBvYmplY3Q6IHtcclxuICogICAgICBjb2xvcjogc3RyaW5nO1xyXG4gKiAgICAgIHNwZWVkOiB7XHJcbiAqICAgICAgICAgIG1pbjogbnVtYmVyLFxyXG4gKiAgICAgICAgICBtYXg6IG51bWJlclxyXG4gKiAgICAgIH1cclxuICogIH0gPSB7XHJcbiAqICAgICAgY29sb3I6IFwiQmx1ZVwiLFxyXG4gKiAgICAgIHNwZWVkOiB7XHJcbiAqICAgICAgICAgIG1pbjogMCxcclxuICogICAgICAgICAgbWF4OiA1MDBcclxuICogICAgICB9XHJcbiAqICB9O1xyXG4gKiAgY29uc29sZS5sb2cob2JqZWN0KTsgICAgICAgICAgICAgICAgLy8vIHtcImNvbG9yXCI6XCJCbHVlXCIsXCJzcGVlZFwiOntcIm1pblwiOjAsXCJtYXhcIjo1MDB9fVxyXG4gKiBcclxuICogIGZ1bmN0aW9uIGZvbygpOiB2b2lkIHtcclxuICogICAgICBsZXQgeDogc3RyaW5nID0gNTAwO1xyXG4gKiAgICAgIHJldHVybiB4O1xyXG4gKiAgfVxyXG4gKiAgY29uc29sZS5sb2coZm9vKTsgICAgICAgICAgICAgICAgICAgLy8vIGZ1bmN0aW9uIGZvbygpIHtcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLyAgICAgeCA9IDUwMDtcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLyAgICAgcmV0dXJuIHg7XHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8gfVxyXG4gKiAgYGBgXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdG9TdHJpbmcodW5rbm93bjogdW5rbm93bik6IHN0cmluZyB7XHJcbiAgICBpZiAodW5rbm93biA9PT0gbnVsbCB8fCB1bmtub3duID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIHVua25vd24gIT09IFwib2JqZWN0XCIpIHJldHVybiBTdHJpbmcodW5rbm93bik7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh1bmtub3duKTtcclxuICAgIH1cclxuICAgIGNhdGNoIHt9XHJcbiAgICByZXR1cm4gXCJbb2JqZWN0IE9iamVjdF1cIjtcclxufSIsICJpbXBvcnQgdHlwZSB7IFJlc3VsdCB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBEb21FcnJvciB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyB3cmFwIH0gZnJvbSBcIkByb290XCI7XHJcblxyXG4vKipcclxuICogKioqQnJpZWYqKipcclxuICogQ3JlYXRlcyBhIGRlZXAgY2xvbmUgb2YgdGhlIHByb3ZpZGVkIHZhbHVlIHVzaW5nIHRoZSBzdHJ1Y3R1cmVkQ2xvbmUgQVBJLlxyXG4gKiBcclxuICogKioqRXhhbXBsZSoqKlxyXG4gKiBgYGB0c1xyXG4gKiAgY2xvbmUoKVxyXG4gKiAgICAgIC5yZXNvbHZlKGUgPT4ge1xyXG4gKiAgICAgICAgICBpZiAoZS5jb2RlID09PSBcIkRPTS5FUlJfREFUQV9DTE9ORVwiKSB7XHJcbiAqICAgICAgICAgICAgICAvLy8gLi4uXHJcbiAqICAgICAgICAgIH1cclxuICogICAgICB9KVxyXG4gKiAgICAgIC51bmxvY2soKTtcclxuICogYGBgXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2xvbmU8VDE+KHZhbHVlOiBUMSk6IFJlc3VsdDxUMSwgRG9tRXJyb3I+IHtcclxuICAgIHJldHVybiB3cmFwKCgpID0+IHtcclxuICAgICAgICByZXR1cm4gc3RydWN0dXJlZENsb25lKHZhbHVlKTtcclxuICAgIH0pLm1hcEVycih1bnNhZmUgPT4ge1xyXG4gICAgICAgIHJldHVybiB1bnNhZmVcclxuICAgICAgICAgICAgLnBhcnNlKChzZWxmKTogc2VsZiBpcyBET01FeGNlcHRpb24gPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYgIT09IG51bGxcclxuICAgICAgICAgICAgICAgICAgICAmJiBzZWxmICE9PSB1bmRlZmluZWRcclxuICAgICAgICAgICAgICAgICAgICAmJiB0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIlxyXG4gICAgICAgICAgICAgICAgICAgICYmIFwibmFtZVwiIGluIHNlbGZcclxuICAgICAgICAgICAgICAgICAgICAmJiBcImNvZGVcIiBpbiBzZWxmXHJcbiAgICAgICAgICAgICAgICAgICAgJiYgXCJtZXNzYWdlXCIgaW4gc2VsZlxyXG4gICAgICAgICAgICAgICAgICAgICYmIHR5cGVvZiBzZWxmLm5hbWUgPT09IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgICAgICAmJiB0eXBlb2Ygc2VsZi5jb2RlID09PSBcIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgJiYgdHlwZW9mIHNlbGYubWVzc2FnZSA9PT0gXCJzdHJpbmdcIjtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLm1hcChleGNlcHRpb24gPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIERvbUVycm9yKGV4Y2VwdGlvbik7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC51bmxvY2tPcihEb21FcnJvcigpKTtcclxuICAgIH0pO1xyXG59IiwgImltcG9ydCB0eXBlIHsgQnJhbmRlZFN0cnVjdCB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgdHlwZSB7IFR5cGVHdWFyZCB9IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzQnJhbmRlZFN0cnVjdDxUMSBleHRlbmRzIHN0cmluZz4odW5rbm93bjogdW5rbm93bik6IHVua25vd24gaXMgQnJhbmRlZFN0cnVjdDxhbnk+O1xyXG5leHBvcnQgZnVuY3Rpb24gaXNCcmFuZGVkU3RydWN0PFQxIGV4dGVuZHMgc3RyaW5nPih1bmtub3duOiB1bmtub3duLCB0eXBlOiBUMSk6IHVua25vd24gaXMgQnJhbmRlZFN0cnVjdDxUMT47XHJcbmV4cG9ydCBmdW5jdGlvbiBpc0JyYW5kZWRTdHJ1Y3Q8VDEgZXh0ZW5kcyBzdHJpbmc+KFxyXG4gICAgcDA6IHVua25vd24sXHJcbiAgICBwMT86IFQxXHJcbik6IHAwIGlzIEJyYW5kZWRTdHJ1Y3Q8VDE+IHtcclxuICAgIGxldCB1bmtub3duOiB1bmtub3duID0gcDA7XHJcbiAgICBsZXQgZ3VhcmQ6IFR5cGVHdWFyZDxCcmFuZGVkU3RydWN0PFQxPj4gPSAodW5rbm93bjogdW5rbm93bik6IHVua25vd24gaXMgQnJhbmRlZFN0cnVjdDxUMT4gPT4ge1xyXG4gICAgICAgIGxldCBtYXRjaDogYm9vbGVhbiA9XHJcbiAgICAgICAgICAgIHVua25vd24gIT09IG51bGxcclxuICAgICAgICAgICAgJiYgdW5rbm93biAhPT0gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgICYmIHR5cGVvZiB1bmtub3duID09PSBcIm9iamVjdFwiXHJcbiAgICAgICAgICAgICYmIFwidHlwZVwiIGluIHVua25vd25cclxuICAgICAgICAgICAgJiYgdHlwZW9mIHVua25vd24udHlwZSA9PT0gXCJzdHJpbmdcIjtcclxuICAgICAgICBpZiAobWF0Y2ggPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgaWYgKHAxICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgbGV0IHR5cGU6IFQxID0gcDE7XHJcbiAgICAgICAgICAgIG1hdGNoID1cclxuICAgICAgICAgICAgICAgIG1hdGNoXHJcbiAgICAgICAgICAgICAgICAmJiAodW5rbm93biBhcyBhbnkpLnR5cGUgPT09IHR5cGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtYXRjaDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gZ3VhcmQodW5rbm93bik7XHJcbn0iLCAiaW1wb3J0IHR5cGUgeyBCcmFuZGVkIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB0eXBlIHsgVHlwZUd1YXJkIH0gZnJvbSBcIkByb290XCI7XHJcblxyXG4vKipcclxuICogKioqQnJpZWYqKipcclxuICogQSB1dGlsaXR5IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIGFuIGB1bmtub3duYCB2YWx1ZSBjb25mb3JtcyB0byBhIHNwZWNpZmljIGJyYW5kZWQgdHlwZS5cclxuICogXHJcbiAqICoqKldhcm5pbmcqKipcclxuICogQmUgY2F1dGlvdXMgYWJvdXQgYnJhbmQgY29sbGlzaW9ucyB0aGF0IG1heSBvY2N1ciBpZiBtdWx0aXBsZSBtb2R1bGVzIFxyXG4gKiBvciBjb250ZXh0cyBkZWZpbmUgc2ltaWxhciBicmFuZGVkIHR5cGVzLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzQnJhbmRlZDxUMSBleHRlbmRzIHN0cmluZz4odW5rbm93bjogdW5rbm93bik6IHVua25vd24gaXMgQnJhbmRlZDxhbnk+O1xyXG5leHBvcnQgZnVuY3Rpb24gaXNCcmFuZGVkPFQxIGV4dGVuZHMgc3RyaW5nPih1bmtub3duOiB1bmtub3duLCB0eXBlOiBUMSk6IHVua25vd24gaXMgQnJhbmRlZDxUMT47XHJcbmV4cG9ydCBmdW5jdGlvbiBpc0JyYW5kZWQ8VDEgZXh0ZW5kcyBzdHJpbmc+KFxyXG4gICAgcDA6IHVua25vd24sXHJcbiAgICBwMT86IFQxXHJcbik6IHAwIGlzIEJyYW5kZWQ8VDE+IHtcclxuICAgIGxldCB1bmtub3duOiB1bmtub3duID0gcDA7XHJcbiAgICBsZXQgZ3VhcmQ6IFR5cGVHdWFyZDxCcmFuZGVkPFQxPj4gPSAodW5rbm93bjogdW5rbm93bik6IHVua25vd24gaXMgQnJhbmRlZDxUMT4gPT4ge1xyXG4gICAgICAgIGxldCBtYXRjaDogYm9vbGVhbiA9XHJcbiAgICAgICAgICAgIHVua25vd24gIT09IG51bGxcclxuICAgICAgICAgICAgJiYgdW5rbm93biAhPT0gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgICYmIHR5cGVvZiB1bmtub3duID09PSBcIm9iamVjdFwiXHJcbiAgICAgICAgICAgICYmIFwidHlwZVwiIGluIHVua25vd25cclxuICAgICAgICAgICAgJiYgdHlwZW9mIHVua25vd24udHlwZSA9PT0gXCJmdW5jdGlvblwiXHJcbiAgICAgICAgICAgICYmIHR5cGVvZiB1bmtub3duLnR5cGUoKSA9PT0gXCJzdHJpbmdcIjtcclxuICAgICAgICBpZiAobWF0Y2ggPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgaWYgKHAxICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgbGV0IHR5cGU6IFQxID0gcDE7XHJcbiAgICAgICAgICAgIG1hdGNoID1cclxuICAgICAgICAgICAgICAgIG1hdGNoXHJcbiAgICAgICAgICAgICAgICAmJiAodW5rbm93biBhcyBhbnkpLnR5cGUoKSA9PT0gdHlwZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBndWFyZCh1bmtub3duKTtcclxufSIsICJpbXBvcnQgeyBFcnJvciBhcyBFcnJvcjAgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgRXJyb3JIYW5kbGVyIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IGZsYWcgfSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcbi8qKlxyXG4gKiAqKipCcmllZioqKlxyXG4gKiBgcGFuaWNgIHRocm93cyBhbiBlcnJvciB3aXRoIG9wdGlvbmFsIG1lc3NhZ2UgYW5kIHN0YWNrIHRyYWNlIGxvY2F0aW9uLlxyXG4gKiBcclxuICogKioqRXhhbXBsZSoqKlxyXG4gKiBgYGB0c1xyXG4gKiAgcGFuaWMoRXJyb3IoXCJNQVRILkVSUl9ESVZJU0lPTl9CWV9aRVJPXCIpKTtcclxuICogIHBhbmljKEVycm9yKHtcclxuICogICAgICBjb2RlOiBcIk1BVEguRVJSX0RJVklTSU9OX0JZX1pFUk9cIixcclxuICogICAgICBtZXNzYWdlOiBTb21lKFwiTWF0aDogQ2Fubm90IGRpdmlkZSBieSB6ZXJvLlwiKSxcclxuICogICAgICBwYXlsb2FkOiBOb25lLFxyXG4gKiAgICAgIHN0YWNrOiBTdGFja1RyYWNlKC4uLilcclxuICogIH0pKTtcclxuICogIHBhbmljKFwiQW4gdW5yZWNvdmVyYWJsZSBlcnJvciBoYXMgb2NjdXJlZC5cIik7XHJcbiAqIGBgYFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHBhbmljPFQxIGV4dGVuZHMgc3RyaW5nPihlOiBFcnJvcjA8VDE+LCBoYW5kbGVyPzogRXJyb3JIYW5kbGVyKTogbmV2ZXI7XHJcbmV4cG9ydCBmdW5jdGlvbiBwYW5pYzxUMSBleHRlbmRzIHN0cmluZz4obWVzc2FnZTogVDEsIGxvY2F0aW9uPzogRnVuY3Rpb24sIGhhbmRsZXI/OiBFcnJvckhhbmRsZXIpOiBuZXZlcjtcclxuZXhwb3J0IGZ1bmN0aW9uIHBhbmljPFQxIGV4dGVuZHMgc3RyaW5nPihcclxuICAgIHAwOiBFcnJvcjA8VDE+IHwgVDEsXHJcbiAgICBwMT86IEVycm9ySGFuZGxlciB8IEZ1bmN0aW9uLFxyXG4gICAgcDI/OiBFcnJvckhhbmRsZXJcclxuKTogbmV2ZXIge1xyXG4gICAgaWYgKHR5cGVvZiBwMCA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgIGxldCBlOiBFcnJvcjA8VDE+ID0gcDA7XHJcbiAgICAgICAgbGV0IGhhbmRsZXI6IEVycm9ySGFuZGxlciA9IGZsYWcoKHAxIGFzIEVycm9ySGFuZGxlciB8IHVuZGVmaW5lZCkpLnVubG9ja09yKEVycm9ySGFuZGxlcik7XHJcbiAgICAgICAgdGhyb3cgW1xyXG4gICAgICAgICAgICBcIlwiLFxyXG4gICAgICAgICAgICBcIlwiLFxyXG4gICAgICAgICAgICBcIiAgICAgXCIgKyBgJHsgX3JlZChlLmNvZGUpIH0gJHsgZS5tZXNzYWdlLnVubG9ja09yKFwiPDw8IFVOQVZBSUxBQkxFID4+PlwiKSB9YCxcclxuICAgICAgICAgICAgXCJcIixcclxuICAgICAgICAgICAgXCIgICAgIFNUQUNLX1RSQUNFXCIgKyBcclxuICAgICAgICAgICAgZS5zdGFja1xyXG4gICAgICAgIF0uam9pbihcIlxcblwiKSBhcyBzdHJpbmc7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBsZXQgbWVzc2FnZTogVDEgPSBwMDtcclxuICAgICAgICBsZXQgbG9jYXRpb246IEZ1bmN0aW9uID0gZmxhZygocDEgYXMgRnVuY3Rpb24gfCB1bmRlZmluZWQpKS51bmxvY2tPcihwYW5pYyk7XHJcbiAgICAgICAgbGV0IGhhbmRsZXI6IEVycm9ySGFuZGxlciA9IGZsYWcocDIpLnVubG9ja09yKEVycm9ySGFuZGxlcik7XHJcbiAgICAgICAgbGV0IGVTdGFuZGFyZDogRXJyb3IgPSBFcnJvcigpO1xyXG4gICAgICAgIGVTdGFuZGFyZC5uYW1lID0gXCJQQU5JQ1wiO1xyXG4gICAgICAgIHRocm93IFwiUEFOSUMgXCIgKyBtZXNzYWdlICsgXCJcXG5cIiArIGhhbmRsZXIucGFyc2VTdGFja1RyYWNlKGxvY2F0aW9uKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gX3JlZChzdHJpbmc6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gXCJcXHgxYlszMW1cIiArIHN0cmluZyArIFwiXFx4MWJbMG1cIjtcclxufVxyXG5cclxuZnVuY3Rpb24gX2dyZWVuKHN0cmluZzogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBcIlxceDFiWzMybVwiICsgc3RyaW5nICsgXCJcXHgxYlswbVwiO1xyXG59IiwgImltcG9ydCB0eXBlIHsgT3B0aW9uIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB0eXBlIHsgQ2xvc3VyZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBTb21lIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IE5vbmUgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgRXJyb3IgYXMgQ3VzdG9tRXJyb3IgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgaXNCcmFuZGVkU3RydWN0IH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IGFsbE8gfSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcbmV4cG9ydCB0eXBlIEVycm9ySGFuZGxlciA9IHtcclxuICAgIG1hdGNoRXJyb3IodW5rbm93bjogdW5rbm93bik6IHVua25vd24gaXMgQ3VzdG9tRXJyb3I8YW55LCB1bmtub3duPjtcclxuICAgIG1hdGNoRXJyb3IodW5rbm93bjogdW5rbm93biwgdGFzazogQ2xvc3VyZTxbZTogQ3VzdG9tRXJyb3I8YW55LCB1bmtub3duPl0sIHZvaWQ+KTogdW5rbm93biBpcyBDdXN0b21FcnJvcjxhbnksIHVua25vd24+O1xyXG4gICAgbWF0Y2hFcnJvcjxUMSBleHRlbmRzIHN0cmluZz4odW5rbm93bjogdW5rbm93biwgY29kZTogVDEpOiB1bmtub3duIGlzIEN1c3RvbUVycm9yPFQxLCB1bmtub3duPjtcclxuICAgIG1hdGNoRXJyb3I8VDEgZXh0ZW5kcyBzdHJpbmc+KHVua25vd246IHVua25vd24sIGNvZGU6IFQxLCB0YXNrOiBDbG9zdXJlPFtlOiBDdXN0b21FcnJvcjxhbnksIHVua25vd24+XSwgdm9pZD4pOiB1bmtub3duIGlzIEN1c3RvbUVycm9yPFQxLCB1bmtub3duPjtcclxuICAgIGxvY2FsU3RhY2tUcmFjZShsb2NhdGlvbjogRnVuY3Rpb24pOiBPcHRpb248c3RyaW5nPjtcclxuICAgIHBhcnNlU3RhY2tUcmFjZShsb2NhdGlvbk9yU3RhY2s6IEZ1bmN0aW9uIHwgc3RyaW5nKTogc3RyaW5nO1xyXG4gICAgY29udmVydFRvU3RhbmRhcmRFcnJvcjxUMSBleHRlbmRzIHN0cmluZywgVDIgPSB1bmtub3duPihlOiBDdXN0b21FcnJvcjxUMSwgVDI+KTogRXJyb3I7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgRXJyb3JIYW5kbGVyOiBFcnJvckhhbmRsZXIgPSAoKCkgPT4ge1xyXG4gICAgLyoqIEBjb25zdHJ1Y3RvciAqLyB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbWF0Y2hFcnJvcixcclxuICAgICAgICAgICAgbG9jYWxTdGFja1RyYWNlLFxyXG4gICAgICAgICAgICBwYXJzZVN0YWNrVHJhY2UsXHJcbiAgICAgICAgICAgIGNvbnZlcnRUb1N0YW5kYXJkRXJyb3JcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG1hdGNoRXJyb3IodW5rbm93bjogdW5rbm93bik6IHVua25vd24gaXMgQ3VzdG9tRXJyb3I8YW55LCB1bmtub3duPjtcclxuICAgIGZ1bmN0aW9uIG1hdGNoRXJyb3IodW5rbm93bjogdW5rbm93biwgdGFzazogQ2xvc3VyZTxbZTogQ3VzdG9tRXJyb3I8YW55LCB1bmtub3duPl0sIHZvaWQ+KTogdW5rbm93biBpcyBDdXN0b21FcnJvcjxhbnksIHVua25vd24+O1xyXG4gICAgZnVuY3Rpb24gbWF0Y2hFcnJvcjxUMSBleHRlbmRzIHN0cmluZz4odW5rbm93bjogdW5rbm93biwgY29kZTogVDEpOiB1bmtub3duIGlzIEN1c3RvbUVycm9yPFQxLCB1bmtub3duPjtcclxuICAgIGZ1bmN0aW9uIG1hdGNoRXJyb3I8VDEgZXh0ZW5kcyBzdHJpbmc+KHVua25vd246IHVua25vd24sIGNvZGU6IFQxLCB0YXNrOiBDbG9zdXJlPFtlOiBDdXN0b21FcnJvcjxhbnksIHVua25vd24+XSwgdm9pZD4pOiB1bmtub3duIGlzIEN1c3RvbUVycm9yPFQxLCB1bmtub3duPjtcclxuICAgIGZ1bmN0aW9uIG1hdGNoRXJyb3I8VDEgZXh0ZW5kcyBzdHJpbmc+KFxyXG4gICAgICAgIHAwOiB1bmtub3duLFxyXG4gICAgICAgIHAxPzogVDEgfCBDbG9zdXJlPFtlOiBDdXN0b21FcnJvcjxhbnksIHVua25vd24+XSwgdm9pZD4sXHJcbiAgICAgICAgcDI/OiBDbG9zdXJlPFtlOiBDdXN0b21FcnJvcjxhbnksIHVua25vd24+XSwgdm9pZD5cclxuICAgICk6IHAwIGlzIEN1c3RvbUVycm9yPFQxLCB1bmtub3duPiB7XHJcbiAgICAgICAgbGV0IHVua25vd246IHVua25vd24gPSBwMDtcclxuICAgICAgICBsZXQgbWF0Y2g6IGJvb2xlYW4gPVxyXG4gICAgICAgICAgICB1bmtub3duICE9PSBudWxsXHJcbiAgICAgICAgICAgICYmIHVua25vd24gIT09IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAmJiB0eXBlb2YgdW5rbm93biA9PT0gXCJvYmplY3RcIlxyXG4gICAgICAgICAgICAmJiBpc0JyYW5kZWRTdHJ1Y3QodW5rbm93biwgXCJFcnJvclwiKTtcclxuICAgICAgICBpZiAoIW1hdGNoKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgaWYgKHAxICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHAxID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGxldCBjb2RlOiBzdHJpbmcgPSBwMTtcclxuICAgICAgICAgICAgbWF0Y2ggPVxyXG4gICAgICAgICAgICAgICAgbWF0Y2hcclxuICAgICAgICAgICAgICAgICYmIFwiY29kZVwiIGluICh1bmtub3duIGFzIGFueSlcclxuICAgICAgICAgICAgICAgICYmIHR5cGVvZiAodW5rbm93biBhcyBhbnkpLmNvZGUgPT09IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgICYmICh1bmtub3duIGFzIGFueSkuY29kZSA9PT0gY29kZTsgICBcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFtYXRjaCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIGxldCB0YXNrTzogT3B0aW9uPENsb3N1cmU8W2U6IEN1c3RvbUVycm9yPGFueSwgdW5rbm93bj5dLCB2b2lkPj4gPSBOb25lO1xyXG4gICAgICAgIGlmIChwMSAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBwMSA9PT0gXCJmdW5jdGlvblwiKSB0YXNrTyA9IFNvbWUocDEpO1xyXG4gICAgICAgIGlmIChwMiAhPT0gdW5kZWZpbmVkKSB0YXNrTyA9IFNvbWUocDIpO1xyXG4gICAgICAgIHRhc2tPLm1hcCh0YXNrID0+IHtcclxuICAgICAgICAgICAgdGFzaygodW5rbm93biBhcyBDdXN0b21FcnJvcjxhbnksIHVua25vd24+KSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBsb2NhbFN0YWNrVHJhY2UobG9jYXRpb246IEZ1bmN0aW9uKTogT3B0aW9uPHN0cmluZz4ge1xyXG4gICAgICAgIGxldCBlOiBFcnJvciA9IEVycm9yKCk7XHJcbiAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoZSwgbG9jYXRpb24pO1xyXG4gICAgICAgIGlmIChlLnN0YWNrKSByZXR1cm4gU29tZShlLnN0YWNrKTtcclxuICAgICAgICByZXR1cm4gTm9uZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBwYXJzZVN0YWNrVHJhY2UobG9jYXRpb25PclN0YWNrOiBGdW5jdGlvbiB8IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIF9wYXJzZVN0YWNrKF9wYXJzZVBheWxvYWQobG9jYXRpb25PclN0YWNrKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY29udmVydFRvU3RhbmRhcmRFcnJvcjxUMSBleHRlbmRzIHN0cmluZywgVDIgPSB1bmtub3duPihlOiBDdXN0b21FcnJvcjxUMSwgVDI+KTogRXJyb3Ige1xyXG4gICAgICAgIGxldCBlU3RhbmRhcmQ6IEVycm9yID0gRXJyb3IoKTtcclxuICAgICAgICBlU3RhbmRhcmQubmFtZSA9IGUuY29kZTtcclxuICAgICAgICBlU3RhbmRhcmQubWVzc2FnZSA9IGUubWVzc2FnZS51bmxvY2tPcihcIlwiKTtcclxuICAgICAgICBlU3RhbmRhcmQuc3RhY2sgPSBlLnN0YWNrLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgZVN0YW5kYXJkLmNhdXNlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHJldHVybiBlU3RhbmRhcmQ7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX3BhcnNlUGF5bG9hZChwYXlsb2FkOiBGdW5jdGlvbiB8IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBwYXlsb2FkID09PSBcInN0cmluZ1wiKSByZXR1cm4gcGF5bG9hZDtcclxuICAgICAgICByZXR1cm4gbG9jYWxTdGFja1RyYWNlKHBheWxvYWQpLnVubG9ja09yKFwiXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9wYXJzZVN0YWNrKHN0YWNrOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCByZXN1bHQ6IHN0cmluZyA9IFwiXCI7XHJcbiAgICAgICAgc3RhY2tcclxuICAgICAgICAgICAgLnNwbGl0KFwiXFxuXCIpXHJcbiAgICAgICAgICAgIC5tYXAobGluZSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX21hdGNoTGluZTxzdHJpbmc+KFxyXG4gICAgICAgICAgICAgICAgICAgIGxpbmUsIFxyXG4gICAgICAgICAgICAgICAgICAgIGxpbmUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGluZS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBfXyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5maWx0ZXIobGluZSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbGluZS5sZW5ndGggPiAwO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAubWFwKGxpbmUgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9wYXJzZUxpbmUobGluZSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5tYXAoKFtsb2NhdGlvbk8sIHBhdGhPLCBsaW5lTywgY29sdW1uT10pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfcmVwcmVzZW50TGluZShsb2NhdGlvbk8sIHBhdGhPLCBsaW5lTywgY29sdW1uTyk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5mb3JFYWNoKGxpbmUgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IFwiXFxuXCIgKyBsaW5lO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9wYXJzZUxpbmUobGluZTogc3RyaW5nKTogW2xvY2F0aW9uOiBPcHRpb248c3RyaW5nPiwgcGF0aDogT3B0aW9uPHN0cmluZz4sIGxpbmU6IE9wdGlvbjxiaWdpbnQ+LCBjb2x1bW46IE9wdGlvbjxiaWdpbnQ+XSB7XHJcbiAgICAgICAgbGV0IGxvY2F0aW9uTzogT3B0aW9uPHN0cmluZz4gPSBOb25lO1xyXG4gICAgICAgIGxldCBwYXRoTzogT3B0aW9uPHN0cmluZz4gPSBOb25lO1xyXG4gICAgICAgIGxldCBsaW5lTzogT3B0aW9uPGJpZ2ludD4gPSBOb25lO1xyXG4gICAgICAgIGxldCBjb2x1bW5POiBPcHRpb248YmlnaW50PiA9IE5vbmU7XHJcbiAgICAgICAgbGV0IHBhdHRlcm46IFJlZ0V4cCA9IC9hdCAoPzxsb2NhdGlvbj4uKj8pIFxcKCg/PHBhdGg+Lio/KTooPzxsaW5lPlxcZCspOig/PGNvbHVtbj5cXGQrKVxcKS87XHJcbiAgICAgICAgbGV0IG1hdGNoOiBSZWdFeHBFeGVjQXJyYXkgfCBudWxsID0gcGF0dGVybi5leGVjKGxpbmUpO1xyXG4gICAgICAgIGlmIChtYXRjaCAmJiBtYXRjaC5ncm91cHMpIHtcclxuICAgICAgICAgICAgbG9jYXRpb25PID0gbWF0Y2guZ3JvdXBzLmxvY2F0aW9uID8gU29tZShtYXRjaC5ncm91cHMubG9jYXRpb24pIDogTm9uZTtcclxuICAgICAgICAgICAgcGF0aE8gPSBtYXRjaC5ncm91cHMucGF0aCA/IFNvbWUobWF0Y2guZ3JvdXBzLnBhdGgpIDogTm9uZTtcclxuICAgICAgICAgICAgbGluZU8gPSBtYXRjaC5ncm91cHMubGluZSA/IFNvbWUoQmlnSW50KG1hdGNoLmdyb3Vwcy5saW5lKSkgOiBOb25lO1xyXG4gICAgICAgICAgICBjb2x1bW5PID0gbWF0Y2guZ3JvdXBzLmNvbHVtbiA/IFNvbWUoQmlnSW50KG1hdGNoLmdyb3Vwcy5jb2x1bW4pKSA6IE5vbmU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbbG9jYXRpb25PLCBwYXRoTywgbGluZU8sIGNvbHVtbk9dO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9yZXByZXNlbnRMaW5lKGxvY2F0aW9uTzogT3B0aW9uPHN0cmluZz4sIHBhdGhPOiBPcHRpb248c3RyaW5nPiwgbGluZU86IE9wdGlvbjxiaWdpbnQ+LCBjb2x1bW5POiBPcHRpb248YmlnaW50Pik6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IHN5bWJvbDogc3RyaW5nID0gXCJhdFwiO1xyXG4gICAgICAgIGxldCBtaXNzaW5nOiBzdHJpbmcgPSBcIjw8PCBVTkFWQUlMQUJMRSA+Pj5cIjtcclxuICAgICAgICByZXR1cm4gYWxsTyhsb2NhdGlvbk8sIHBhdGhPLCBsaW5lTywgY29sdW1uTylcclxuICAgICAgICAgICAgLm1hcCgoW2xvY2F0aW9uLCBwYXRoLCBsaW5lLCBjb2x1bW5dKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYCAgICAgJHsgX3JlZChzeW1ib2wpIH0gJHsgcGF0aCB9ICR7IF9yZWQobG9jYXRpb24pIH0gJHsgbGluZSB9ICR7IGNvbHVtbiB9YDtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnVubG9ja09yKFwiICAgICBcIiArIF9yZWQobWlzc2luZykpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9tYXRjaExpbmU8VDE+KGxpbmU6IHN0cmluZywgb25WYWxpZDogQ2xvc3VyZTxbbGluZTogc3RyaW5nXSwgVDE+LCBvbkludmFsaWQ6IENsb3N1cmU8W2xpbmU6IHN0cmluZ10sIFQxPik6IFQxIHtcclxuICAgICAgICBpZiAobGluZSA9PT0gXCJFcnJvclwiKSByZXR1cm4gb25JbnZhbGlkKGxpbmUpO1xyXG4gICAgICAgIHJldHVybiBvblZhbGlkKGxpbmUpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9yZWQoc3RyaW5nOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBcIlxceDFiWzMxbVwiICsgc3RyaW5nICsgXCJcXHgxYlswbVwiO1xyXG4gICAgfVxyXG59KSgpOyIsICJpbXBvcnQgdHlwZSB7IEJyYW5kZWRTdHJ1Y3QgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgRXJyb3JIYW5kbGVyIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IE9wdGlvbiB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBmbGFnIH0gZnJvbSBcIkByb290XCI7XHJcblxyXG5leHBvcnQgdHlwZSBFcnJvcjxUMSBleHRlbmRzIHN0cmluZywgVDIgPSB1bmtub3duPiA9IFxyXG4gICAgJiBCcmFuZGVkU3RydWN0PFwiRXJyb3JcIj5cclxuICAgICYge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhpcyBlcnJvci5cclxuICAgICAqL1xyXG4gICAgY29kZTogVDE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogQSBodW1hbi1yZWFkYWJsZSBtZXNzYWdlIHRoYXQgZXhwbGFpbnMgdGhlIG5hdHVyZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIG1lc3NhZ2U6IE9wdGlvbjxzdHJpbmc+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIEFuIG9wdGlvbmFsIHZhbHVlIHRoYXQgY2FuIGhvbGQgYWRkaXRpb25hbCBkYXRhIG9yIGNvbnRleHQgcmVsYXRlZCB0byB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHBheWxvYWQ6IE9wdGlvbjxUMj47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogVGhlIHN0YWNrIHRyYWNlIGFzc29jaWF0ZWQgd2l0aCB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHN0YWNrOiBzdHJpbmc7XHJcbn07XHJcblxyXG4vKipcclxuICogKioqQnJpZWYqKipcclxuICogQSBjdXN0b20gZXJyb3Igd2l0aCBhbiBvcHRpb25hbCBtZXNzYWdlIGFuZCBwYXlsb2FkIGZvciBzdHJvbmdseS10eXBlZCBlcnJvcnMuXHJcbiAqIFxyXG4gKiAqKipOb3RlKioqXHJcbiAqIFRoaXMgaXMgYSBnZW5lcmFsLXB1cnBvc2UgZXJyb3Igc3RydWN0dXJlIHRvIG1hbmFnZSBkb21haW4tc3BlY2lmaWMgZXJyb3IgY29kZXMgYW5kIHByb3ZpZGUgYmV0dGVyIGNvbnRleHQuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gRXJyb3I8VDEgZXh0ZW5kcyBzdHJpbmcsIFQyID0gdW5rbm93bj4oX2NvbmZpZ3VyYXRpb246IHtcclxuICAgIGNvZGU6IFQxO1xyXG4gICAgbWVzc2FnZT86IHN0cmluZztcclxuICAgIHBheWxvYWQ/OiBUMjtcclxuICAgIHN0YWNrPzogc3RyaW5nO1xyXG4gICAgaGFuZGxlcj86IEVycm9ySGFuZGxlcjtcclxufSk6IEVycm9yPFQxLCBUMj47XHJcbmV4cG9ydCBmdW5jdGlvbiBFcnJvcjxUMSBleHRlbmRzIHN0cmluZywgVDIgPSB1bmtub3duPihfY29kZTogVDEsIF9tZXNzYWdlPzogc3RyaW5nLCBfcGF5bG9hZD86IFQyKTogRXJyb3I8VDEsIFQyPjtcclxuZXhwb3J0IGZ1bmN0aW9uIEVycm9yPFQxIGV4dGVuZHMgc3RyaW5nLCBUMiA9IHVua25vd24+KFxyXG4gICAgX3AwOiB7XHJcbiAgICAgICAgY29kZTogVDE7XHJcbiAgICAgICAgbWVzc2FnZT86IHN0cmluZztcclxuICAgICAgICBwYXlsb2FkPzogVDI7XHJcbiAgICAgICAgc3RhY2s/OiBzdHJpbmc7XHJcbiAgICAgICAgaGFuZGxlcj86IEVycm9ySGFuZGxlcjtcclxuICAgIH0gfCBUMSxcclxuICAgIF9wMT86IHN0cmluZyxcclxuICAgIF9wMj86IFQyXHJcbik6IEVycm9yPFQxLCBUMj4ge1xyXG4gICAgLyoqIEBjb25zdHJ1Y3RvciAqLyB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBfcDAgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgbGV0IGNvbmZpZ3VyYXRpb246IHtcclxuICAgICAgICAgICAgICAgIGNvZGU6IFQxO1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZT86IHN0cmluZztcclxuICAgICAgICAgICAgICAgIHBheWxvYWQ/OiBUMjtcclxuICAgICAgICAgICAgICAgIHN0YWNrPzogc3RyaW5nO1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlcj86IEVycm9ySGFuZGxlcjtcclxuICAgICAgICAgICAgfSA9IF9wMDtcclxuICAgICAgICAgICAgbGV0IGhhbmRsZXI6IEVycm9ySGFuZGxlciA9IGZsYWcoY29uZmlndXJhdGlvbi5oYW5kbGVyKS51bmxvY2tPcihFcnJvckhhbmRsZXIpO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJFcnJvclwiLFxyXG4gICAgICAgICAgICAgICAgY29kZTogY29uZmlndXJhdGlvbi5jb2RlLFxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogZmxhZyhjb25maWd1cmF0aW9uLm1lc3NhZ2UpLFxyXG4gICAgICAgICAgICAgICAgcGF5bG9hZDogZmxhZyhjb25maWd1cmF0aW9uLnBheWxvYWQpLFxyXG4gICAgICAgICAgICAgICAgc3RhY2s6IGZsYWcoY29uZmlndXJhdGlvbi5zdGFjaykudW5sb2NrT3IoaGFuZGxlci5wYXJzZVN0YWNrVHJhY2UoRXJyb3IpKVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0eXBlOiBcIkVycm9yXCIsXHJcbiAgICAgICAgICAgIGNvZGU6IF9wMCxcclxuICAgICAgICAgICAgbWVzc2FnZTogZmxhZyhfcDEpLFxyXG4gICAgICAgICAgICBwYXlsb2FkOiBmbGFnKF9wMiksXHJcbiAgICAgICAgICAgIHN0YWNrOiBFcnJvckhhbmRsZXIucGFyc2VTdGFja1RyYWNlKEVycm9yKVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn0iLCAiaW1wb3J0IHR5cGUgeyBEb21FeGNlcHRpb25OYW1lIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB0eXBlIHsgRG9tRXJyb3JDb2RlIH0gZnJvbSBcIkByb290XCI7XHJcblxyXG5leHBvcnQgY29uc3QgRG9tRXJyb3JOYW1lVG9Db2RlTWFwOiBSZWNvcmQ8RG9tRXhjZXB0aW9uTmFtZSwgRG9tRXJyb3JDb2RlPiA9IHtcclxuICAgIFwiRW5jb2RpbmdFcnJvclwiOiBcIkRPTS5FUlJfRU5DT0RJTkdcIixcclxuICAgIFwiTm90UmVhZGFibGVFcnJvclwiOiBcIkRPTS5FUlJfTk9UX1JFQURBQkxFXCIsXHJcbiAgICBcIlVua25vd25FcnJvclwiOiBcIkRPTS5FUlJfVU5LTk9XTlwiLFxyXG4gICAgXCJDb25zdHJhaW50RXJyb3JcIjogXCJET00uRVJSX0NPTlNUUkFJTlRcIixcclxuICAgIFwiRGF0YUVycm9yXCI6IFwiRE9NLkVSUl9EQVRBXCIsXHJcbiAgICBcIlRyYW5zYWN0aW9uSW5hY3RpdmVFcnJvclwiOiBcIkRPTS5FUlJfVFJBTlNBQ1RJT05fSU5BQ1RJVkVcIixcclxuICAgIFwiUmVhZE9ubHlFcnJvclwiOiBcIkRPTS5FUlJfUkVBRF9PTkxZXCIsXHJcbiAgICBcIlZlcnNpb25FcnJvclwiOiBcIkRPTS5FUlJfVkVSU0lPTlwiLFxyXG4gICAgXCJPcGVyYXRpb25FcnJvclwiOiBcIkRPTS5FUlJfT1BFUkFUSU9OXCIsXHJcbiAgICBcIk5vdEFsbG93ZWRFcnJvclwiOiBcIkRPTS5FUlJfTk9UX0FMTE9XRURcIlxyXG59OyIsICJpbXBvcnQgdHlwZSB7IERvbUV4Y2VwdGlvbkNvZGUgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHR5cGUgeyBEb21FcnJvckNvZGUgfSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBEb21FeGNlcHRpb25Db2RlVG9Eb21FcnJvckNvZGVNYXA6IFJlY29yZDxEb21FeGNlcHRpb25Db2RlLCBEb21FcnJvckNvZGU+ID0ge1xyXG4gICAgMTogXCJET00uRVJSX0lOREVYX1NJWkVcIixcclxuICAgIDM6IFwiRE9NLkVSUl9ISUVSQVJDSFlfUkVRVUVTVFwiLFxyXG4gICAgNDogXCJET00uRVJSX1dST05HX0RPQ1VNRU5UXCIsXHJcbiAgICA1OiBcIkRPTS5FUlJfSU5WQUxJRF9DSEFSQUNURVJcIixcclxuICAgIDc6IFwiRE9NLkVSUl9OT19NT0RJRklDQVRJT05fQUxMT1dFRFwiLFxyXG4gICAgODogXCJET00uRVJSX05PVF9GT1VORFwiLFxyXG4gICAgOTogXCJET00uRVJSX05PVF9TVVBQT1JURURcIixcclxuICAgIDExOiBcIkRPTS5FUlJfSU5WQUxJRF9TVEFURVwiLFxyXG4gICAgMTI6IFwiRE9NLkVSUl9TWU5UQVhcIixcclxuICAgIDEzOiBcIkRPTS5FUlJfSU5WQUxJRF9NT0RJRklDQVRJT05cIixcclxuICAgIDE0OiBcIkRPTS5FUlJfTkFNRVNQQUNFXCIsXHJcbiAgICAxNzogXCJET00uRVJSX1RZUEVfTUlTTUFUQ0hcIixcclxuICAgIDE4OiBcIkRPTS5FUlJfU0VDVVJJVFlcIixcclxuICAgIDE5OiBcIkRPTS5FUlJfTkVUV09SS1wiLFxyXG4gICAgMjA6IFwiRE9NLkVSUl9BQk9SVFwiLFxyXG4gICAgMjE6IFwiRE9NLkVSUl9VUkxfTUlTTUFUQ0hcIixcclxuICAgIDIyOiBcIkRPTS5FUlJfUVVPVEFfRVhDRUVERURcIixcclxuICAgIDIzOiBcIkRPTS5FUlJfVElNRU9VVFwiLFxyXG4gICAgMjQ6IFwiRE9NLkVSUl9JTlZBTElEX05PREVfVFlQRVwiLFxyXG4gICAgMjU6IFwiRE9NLkVSUl9EQVRBX0NMT05FXCJcclxufTsiLCAiaW1wb3J0IHR5cGUgeyBEb21FcnJvckNvZGUgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgRG9tRXhjZXB0aW9uQ29kZVRvRG9tRXJyb3JDb2RlTWFwIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IERvbUVycm9yTmFtZVRvQ29kZU1hcCB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBFcnJvciB9IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuZXhwb3J0IHR5cGUgRG9tRXJyb3IgPSBFcnJvcjxEb21FcnJvckNvZGU+O1xyXG5cclxuLyoqXHJcbiAqICoqKkJyaWVmKioqXHJcbiAqIEEgZG9tYWluLXNwZWNpZmljIGVycm9yIHRoYXQgcHJvdmlkZXMgdGhlIGVycm9yIGNvZGUgZm9yIERPTSBleGNlcHRpb25zLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIERvbUVycm9yKCk6IERvbUVycm9yO1xyXG5leHBvcnQgZnVuY3Rpb24gRG9tRXJyb3IoX2U6IERPTUV4Y2VwdGlvbik6IERvbUVycm9yO1xyXG5leHBvcnQgZnVuY3Rpb24gRG9tRXJyb3IoXHJcbiAgICBfYXJnczA/OiBET01FeGNlcHRpb25cclxuKTogRG9tRXJyb3Ige1xyXG4gICAgLyoqIEBjb25zdHJ1Y3RvciAqLyB7XHJcbiAgICAgICAgbGV0IGU6IERPTUV4Y2VwdGlvbiB8IHVuZGVmaW5lZCA9IF9hcmdzMDtcclxuICAgICAgICBpZiAoZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gRXJyb3IoXCJET00uRVJSX1VOS05PV05cIik7XHJcbiAgICAgICAgcmV0dXJuIEVycm9yKF9tYXRjaChlKSwgZS5tZXNzYWdlKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfbWF0Y2goZTogRE9NRXhjZXB0aW9uKTogRG9tRXJyb3JDb2RlIHtcclxuICAgICAgICBsZXQgY29kZTogRG9tRXJyb3JDb2RlID0gXCJET00uRVJSX1VOS05PV05cIjtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIGUuY29kZSA9PT0gMVxyXG4gICAgICAgICAgICB8fCBlLmNvZGUgPT09IDNcclxuICAgICAgICAgICAgfHwgZS5jb2RlID09PSA0XHJcbiAgICAgICAgICAgIHx8IGUuY29kZSA9PT0gNVxyXG4gICAgICAgICAgICB8fCBlLmNvZGUgPT09IDdcclxuICAgICAgICAgICAgfHwgZS5jb2RlID09PSA4XHJcbiAgICAgICAgICAgIHx8IGUuY29kZSA9PT0gOVxyXG4gICAgICAgICAgICB8fCBlLmNvZGUgPT09IDExXHJcbiAgICAgICAgICAgIHx8IGUuY29kZSA9PT0gMTJcclxuICAgICAgICAgICAgfHwgZS5jb2RlID09PSAxM1xyXG4gICAgICAgICAgICB8fCBlLmNvZGUgPT09IDE0XHJcbiAgICAgICAgICAgIHx8IGUuY29kZSA9PT0gMTdcclxuICAgICAgICAgICAgfHwgZS5jb2RlID09PSAxOFxyXG4gICAgICAgICAgICB8fCBlLmNvZGUgPT09IDE5XHJcbiAgICAgICAgICAgIHx8IGUuY29kZSA9PT0gMjBcclxuICAgICAgICAgICAgfHwgZS5jb2RlID09PSAyMVxyXG4gICAgICAgICAgICB8fCBlLmNvZGUgPT09IDIyXHJcbiAgICAgICAgICAgIHx8IGUuY29kZSA9PT0gMjNcclxuICAgICAgICAgICAgfHwgZS5jb2RlID09PSAyNFxyXG4gICAgICAgICAgICB8fCBlLmNvZGUgPT09IDI1XHJcbiAgICAgICAgKSBjb2RlID0gRG9tRXhjZXB0aW9uQ29kZVRvRG9tRXJyb3JDb2RlTWFwW2UuY29kZV07XHJcbiAgICAgICAgZWxzZSBpZiAoXHJcbiAgICAgICAgICAgIGUubmFtZSA9PT0gXCJFbmNvZGluZ0Vycm9yXCJcclxuICAgICAgICAgICAgfHwgZS5uYW1lID09PSBcIk5vdFJlYWRhYmxlRXJyb3JcIlxyXG4gICAgICAgICAgICB8fCBlLm5hbWUgPT09IFwiVW5rbm93bkVycm9yXCJcclxuICAgICAgICAgICAgfHwgZS5uYW1lID09PSBcIkNvbnN0cmFpbnRFcnJvclwiXHJcbiAgICAgICAgICAgIHx8IGUubmFtZSA9PT0gXCJEYXRhRXJyb3JcIlxyXG4gICAgICAgICAgICB8fCBlLm5hbWUgPT09IFwiVHJhbnNhY3Rpb25JbmFjdGl2ZUVycm9yXCJcclxuICAgICAgICAgICAgfHwgZS5uYW1lID09PSBcIlJlYWRPbmx5RXJyb3JcIlxyXG4gICAgICAgICAgICB8fCBlLm5hbWUgPT09IFwiVmVyc2lvbkVycm9yXCJcclxuICAgICAgICAgICAgfHwgZS5uYW1lID09PSBcIk9wZXJhdGlvbkVycm9yXCJcclxuICAgICAgICAgICAgfHwgZS5uYW1lID09PSBcIk5vdEFsbG93ZWRFcnJvclwiXHJcbiAgICAgICAgKSBjb2RlID0gRG9tRXJyb3JOYW1lVG9Db2RlTWFwW2UubmFtZV07XHJcbiAgICAgICAgcmV0dXJuIGNvZGU7XHJcbiAgICB9XHJcbn0iLCAiZXhwb3J0IGNvbnN0IElOVEVSTkFMX0VSUk9SX01FU1NBR0U6IHN0cmluZyA9XHJcbiAgICBcIlxcblwiICsgXCJVaC1vaCwgbG9va3MgbGlrZSBSZWxpcSB0b29rIGEgd3JvbmcgdHVybiFcIiArIFxyXG4gICAgXCJcXG5cIiArIFwiRG9uJ3Qgd29ycnksIGl0J3Mgbm90IHlvdS1pdCdzIHVzLlwiICsgXHJcbiAgICBcIlxcblwiICsgXCJQbGVhc2UgcmVwb3J0IHRoaXMgYXQgZHJlYW1jYXRjaGVyX2ZvdW5kYXRpb25AcHJvdG9uLm1lXCIgK1xyXG4gICAgXCJcXG5cIjsiXSwKICAibWFwcGluZ3MiOiAibWJBQUEsSUFBQUEsR0FBQSxHQUFBQyxHQUFBRCxHQUFBLFdBQUFFLEVBQUEsWUFBQUMsRUFBQSxhQUFBQyxFQUFBLFFBQUFDLEVBQUEsUUFBQUMsRUFBQSxVQUFBQyxFQUFBLFFBQUFDLEVBQUEsU0FBQUMsRUFBQSxPQUFBQyxFQUFBLFFBQUFDLEVBQUEsU0FBQUMsRUFBQSxXQUFBQyxFQUFBLFNBQUFDLEVBQUEsU0FBQUMsRUFBQSxTQUFBQyxFQUFBLFNBQUFDLEVBQUEsVUFBQUMsRUFBQSxjQUFBQyxFQUFBLG9CQUFBQyxFQUFBLFVBQUFDLEVBQUEsYUFBQUMsRUFBQSxTQUFBQyxFQUFBLGNB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WEEsRUFBRSxPQUFTLGFBQ1hBLEVBQUUsT0FBUyw0QkFDWEEsRUFBRSxPQUFTLGlCQUNYQSxFQUFFLE9BQVMsZ0JBQ1hBLEVBQUUsT0FBUyxrQkFDWEEsRUFBRSxPQUFTLHFCQUNoQkcsRUFBT0UsRUFBc0JMLEVBQUUsSUFBSSxHQUM5QkcsQ0FDWCxDQUNKLENDNURPLElBQU1HLEVBQ1Q7QUFBQTtBQUFBO0FBQUE7IiwKICAibmFtZXMiOiBbIm1vZF9leHBvcnRzIiwgIl9fZXhwb3J0IiwgIkFsbG9jIiwgIkRlQWxsb2MiLCAiRG9tRXJyb3IiLCAiRHluIiwgIkVyciIsICJFcnJvciIsICJGcHYiLCAiTm9uZSIsICJPayIsICJSZWYiLCAiU29tZSIsICJVbnNhZmUiLCAiYWxsTyIsICJhbGxSIiwgImFueU8iLCAiYW55UiIsICJjbG9uZSIsICJpc0JyYW5kZWQiLCAiaXNCcmFuZGVkU3RydWN0IiwgInBhbmljIiwgInRvU3RyaW5nIiwgIndyYXAiLCAid3JhcEFzeW5jIiwgIl9fdG9Db21tb25KUyIsICJSZXN1bHQiLCAiYWxsIiwgImFueSIsICJ3cmFwIiwgIndyYXBBc3luYyIsICJyZXN1bHRzIiwgIm91dCIsICJpIiwgInJlc3VsdCIsICJPayIsICJ3cmFwcGVyIiwgIkVyciIsICJ0YXNrIiwgInBheWxvYWQiLCAiZSIsICJVbnNhZmUiLCAiT3B0aW9uIiwgImZsYWciLCAiYWxsIiwgImFueSIsICJ2YWx1ZSIsICJOb25lIiwgIlNvbWUiLCAib3B0aW9ucyIsICJvdXQiLCAiaSIsICJvcHRpb24iLCAiVW5zYWZlIiwgIl92YWx1ZSIsICJ1bndyYXAiLCAicGFyc2UiLCAiZ3VhcmQiLCAiU29tZSIsICJOb25lIiwgImFsbFIiLCAiUmVzdWx0IiwgImFueVIiLCAid3JhcCIsICJ3cmFwQXN5bmMiLCAiT2siLCAiX3ZhbHVlIiwgIl90aGlzIiwgIm9rIiwgImVyciIsICJleHBlY3QiLCAiZXhwZWN0RXJyIiwgInVubG9jayIsICJ1bmxvY2tPciIsICJhbmQiLCAibWFwIiwgIm1hcEVyciIsICJyZWNvdmVyIiwgImRlZ3JhZGUiLCAidG9PcHRpb24iLCAiX18iLCAibWVzc2FnZSIsICJwYW5pYyIsICJFcnJvciIsICJ0YXNrIiwgIkVyciIsICJTb21lIiwgIkVyciIsICJfcDAiLCAiX3AxIiwgIkVycm9ySGFuZGxlciIsICJfdGhpcyIsICJfc3RhY2siLCAiX3ZhbHVlIiwgIl9oYW5kbGVyIiwgIm9rIiwgImVyciIsICJpbnNwZWN0IiwgInN0YWNrIiwgImV4cGVjdCIsICJleHBlY3RFcnIiLCAidW5sb2NrT3IiLCAiYW5kIiwgIm1hcCIsICJtYXBFcnIiLCAicmVjb3ZlciIsICJkZWdyYWRlIiwgInRvT3B0aW9uIiwgIm1lc3NhZ2UiLCAiZSIsICJ0cmFuc2llbnRFTyIsICJOb25lIiwgImN1c3RvbUUiLCAiRXJyb3IiLCAiU29tZSIsICJtZXNzYWdlMCIsICJ0cmFuc2llbnRFIiwgInBhbmljIiwgIl9fIiwgImZhbGxiYWNrIiwgInRhc2siLCAiT2siLCAiUmVmIiwgIl92YWx1ZSIsICJfdGhpcyIsICJfY291bnQiLCAiX3Rhc2tNYXAiLCAidW53cmFwIiwgIm11dCIsICJvbkNoYW5nZSIsICJ2YWx1ZSIsICJvbGRWYWx1ZSIsICJuZXdWYWx1ZSIsICJ0YXNrIiwgImtleSIsICJfZ2VuS2V5IiwgIkR5biIsICJfY29uc3RydWN0b3IiLCAiX29uRGVBbGxvYyIsICJfbG9hZCIsICJfb25Mb2FkUGF5bG9hZCIsICJfYXZhaWxhYmxlIiwgIl9jb3VudCIsICJrZXkiLCAiX2dlbktleSIsICJwYXlsb2FkIiwgIl9rZXkiLCAiX3RoaXMiLCAiTm9uZSIsICJhbGxvYyIsICJfcmVjeWNsZWRLZXkiLCAiU29tZSIsICJBbGxvYyIsICJfcmVjeWxlZCIsICJkZUFsbG9jIiwgIl9yZWN5bGUiLCAiSU5URVJOQUxfRVJST1JfTUVTU0FHRSIsICJEZUFsbG9jIiwgInZhbHVlIiwgIkRlQWxsb2MiLCAiX2R5biIsICJOb25lIiwgIkFsbG9jIiwgIl92YWx1ZSIsICJfZHluIiwgIlNvbWUiLCAiZmxhZyIsICJPcHRpb24iLCAiYWxsTyIsICJhbnlPIiwgIlNvbWUiLCAiX3ZhbHVlIiwgInR5cGUiLCAic29tZSIsICJub25lIiwgImV4cGVjdCIsICJ1bmxvY2siLCAidW5sb2NrT3IiLCAiYW5kIiwgIm1hcCIsICJ0b1Jlc3VsdCIsICJfXyIsICJ0YXNrIiwgIk9rIiwgIk5vbmUiLCAiX3RoaXMiLCAidHlwZSIsICJzb21lIiwgIm5vbmUiLCAiZXhwZWN0IiwgInVubG9ja09yIiwgImFuZCIsICJtYXAiLCAidG9SZXN1bHQiLCAibWVzc2FnZSIsICJwYW5pYyIsICJFcnJvciIsICJmYWxsYmFjayIsICJfXyIsICJlIiwgIkVyciIsICJGcHYiLCAiX2ZwdiIsICJfcHJlY2lzaW9uIiwgIl92YWx1ZSIsICJwcmVjaXNpb24iLCAiRXJyIiwgIkVycm9yIiwgIl91bndyYXAiLCAiT2siLCAidW53cmFwIiwgInJlcHJlc2VudGF0aW9uIiwgImFkZCIsICJzdWIiLCAibXVsIiwgImRpdiIsICJ2YWx1ZSIsICJfd3JhcCIsICJuIiwgInRhc2siLCAiSU5URVJOQUxfRVJST1JfTUVTU0FHRSIsICJmcHYiLCAidG9TdHJpbmciLCAidW5rbm93biIsICJjbG9uZSIsICJ2YWx1ZSIsICJ3cmFwIiwgInVuc2FmZSIsICJzZWxmIiwgImV4Y2VwdGlvbiIsICJEb21FcnJvciIsICJpc0JyYW5kZWRTdHJ1Y3QiLCAicDAiLCAicDEiLCAidW5rbm93biIsICJtYXRjaCIsICJ0eXBlIiwgImlzQnJhbmRlZCIsICJwMCIsICJwMSIsICJ1bmtub3duIiwgIm1hdGNoIiwgInR5cGUiLCAicGFuaWMiLCAicDAiLCAicDEiLCAicDIiLCAiaGFuZGxlciIsICJmbGFnIiwgIkVycm9ySGFuZGxlciIsICJfcmVkIiwgIm1lc3NhZ2UiLCAibG9jYXRpb24iLCAiZVN0YW5kYXJkIiwgInN0cmluZyIsICJFcnJvckhhbmRsZXIiLCAibWF0Y2hFcnJvciIsICJsb2NhbFN0YWNrVHJhY2UiLCAicGFyc2VTdGFja1RyYWNlIiwgImNvbnZlcnRUb1N0YW5kYXJkRXJyb3IiLCAicDAiLCAicDEiLCAicDIiLCAidW5rbm93biIsICJtYXRjaCIsICJpc0JyYW5kZWRTdHJ1Y3QiLCAiY29kZSIsICJ0YXNrTyIsICJOb25lIiwgIlNvbWUiLCAidGFzayIsICJsb2NhdGlvbiIsICJlIiwgImxvY2F0aW9uT3JTdGFjayIsICJfcGFyc2VTdGFjayIsICJfcGFyc2VQYXlsb2FkIiwgImVTdGFuZGFyZCIsICJwYXlsb2FkIiwgInN0YWNrIiwgInJlc3VsdCIsICJsaW5lIiwgIl9tYXRjaExpbmUiLCAiX18iLCAiX3BhcnNlTGluZSIsICJsb2NhdGlvbk8iLCAicGF0aE8iLCAibGluZU8iLCAiY29sdW1uTyIsICJfcmVwcmVzZW50TGluZSIsICJzeW1ib2wiLCAiYWxsTyIsICJwYXRoIiwgImNvbHVtbiIsICJfcmVkIiwgIm9uVmFsaWQiLCAib25JbnZhbGlkIiwgInN0cmluZyIsICJFcnJvciIsICJfcDAiLCAiX3AxIiwgIl9wMiIsICJjb25maWd1cmF0aW9uIiwgImhhbmRsZXIiLCAiZmxhZyIsICJFcnJvckhhbmRsZXIiLCAiRG9tRXJyb3JOYW1lVG9Db2RlTWFwIiwgIkRvbUV4Y2VwdGlvbkNvZGVUb0RvbUVycm9yQ29kZU1hcCIsICJEb21FcnJvciIsICJfYXJnczAiLCAiZSIsICJFcnJvciIsICJfbWF0Y2giLCAiY29kZSIsICJEb21FeGNlcHRpb25Db2RlVG9Eb21FcnJvckNvZGVNYXAiLCAiRG9tRXJyb3JOYW1lVG9Db2RlTWFwIiwgIklOVEVSTkFMX0VSUk9SX01FU1NBR0UiXQp9Cg==