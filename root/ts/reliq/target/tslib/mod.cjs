"use strict";var R=Object.defineProperty;var V=Object.getOwnPropertyDescriptor;var N=Object.getOwnPropertyNames;var F=Object.prototype.hasOwnProperty;var C=(n,r)=>{for(var p in r)R(n,p,{get:r[p],enumerable:!0})},Y=(n,r,p,e)=>{if(r&&typeof r=="object"||typeof r=="function")for(let o of N(r))!F.call(n,o)&&o!==p&&R(n,o,{get:()=>r[o],enumerable:!(e=V(r,o))||e.enumerable});return n};var $=n=>Y(R({},"__esModule",{value:!0}),n);var I={};C(I,{Assert:()=>X,Err:()=>O,None:()=>y,Ok:()=>x,Option:()=>E,Restorable:()=>U,Result:()=>k,Some:()=>c,Unsafe:()=>g,assert:()=>b,copy:()=>A,err:()=>P,flag:()=>z,flagAsync:()=>B,mapErr:()=>j,none:()=>G,ok:()=>H,panic:()=>S,require:()=>_,some:()=>D,toString:()=>d,wrap:()=>q,wrapAsync:()=>J});module.exports=$(I);var X=(()=>{return{some:n,none:r,mapErr:p};function n(e){return e!=null}function r(e){return e===null&&e===void 0}function p(e,o,s){return e!=null&&typeof e=="object"&&"message"in e&&typeof e.message=="string"&&e.message===o?c(s()):y}})();function b(n,r){if(n)return;let p=Error(r);throw Error.captureStackTrace(p,b),p}function S(n){let r=Error(n);throw Error.captureStackTrace(r,S),r}function _(n,r){if(n)return;let p=Error(r);throw Error.captureStackTrace(p,_),p}function U(n){return{get:r,mut:p,mutAsync:e};function r(){return n}function p(o){let s=A(n);try{o(r())}catch(l){throw n=s,l}}async function e(o){let s=A(n);try{await o(r())}catch(l){throw n=s,l}}}var j=X.mapErr;var k=(()=>{return{match:n,ok:r,err:p,all:e,any:o,wrap:s,wrapAsync:l};function n(t){return r(t)||p(t)}function r(t){return t!=null&&typeof t=="object"&&"ok"in t&&"err"in t&&"val"in t&&"expect"in t&&"expectErr"in t&&"unwrap"in t&&"unwrapOr"in t&&"unwrapSafely"in t&&"andThen"in t&&"map"in t&&"mapErr"in t&&"toOption"in t&&"toString"in t&&typeof t.ok=="function"&&typeof t.err=="function"&&typeof t.val=="function"&&typeof t.expect=="function"&&typeof t.expectErr=="function"&&typeof t.unwrap=="function"&&typeof t.unwrapOr=="function"&&typeof t.unwrapSafely=="function"&&typeof t.andThen=="function"&&typeof t.map=="function"&&typeof t.mapErr=="function"&&typeof t.toOption=="function"&&typeof t.toString=="function"&&typeof t.ok()=="boolean"&&typeof t.err()=="boolean"&&typeof t.toString()=="string"&&t.ok()===!0&&t.err()===!1}function p(t){return t!=null&&typeof t=="object"&&"ok"in t&&"err"in t&&"val"in t&&"stack"in t&&"expect"in t&&"expectErr"in t&&"unwrap"in t&&"unwrapOr"in t&&"andThen"in t&&"map"in t&&"mapErr"in t&&"toOption"in t&&"toString"in t&&typeof t.ok=="function"&&typeof t.err=="function"&&typeof t.val=="function"&&typeof t.stack=="function"&&typeof t.expect=="function"&&typeof t.expectErr=="function"&&typeof t.unwrap=="function"&&typeof t.unwrapOr=="function"&&typeof t.andThen=="function"&&typeof t.map=="function"&&typeof t.mapErr=="function"&&typeof t.toOption=="function"&&typeof t.toString=="function"&&typeof t.ok()=="boolean"&&typeof t.err()=="boolean"&&typeof t.toString()=="string"&&t.ok()===!1&&t.err()===!0}function e(...t){let i=[],u=0n;for(;u<t.length;){let f=t[Number(u)];if(f.ok())i.push(f.val());else return f;u++}return x(i)}function o(...t){let i=[],u=0n;for(;u<t.length;){let f=t[Number(u)];if(f.ok())return f;i.push(f.val()),u++}return O(i)}function s(t,...i){try{return x(t(...i))}catch(u){return O(g(u))}}async function l(t,...i){try{return x(await t(...i))}catch(u){return O(g(u))}}})();function O(n){let r,p;{r={ok:e,err:o,val:s,stack:l,expect:t,expectErr:i,unwrap:u,unwrapOr:f,andThen:h,map:a,mapErr:w,toOption:v,toString:T};let m=Error().stack.split(`
`).slice(2);return m&&m.length>0&&m[0].includes("Err")&&m.shift(),p=m.join(`
`),r}function e(){return!1}function o(){return!0}function s(){return n}function l(){return p}function t(m){throw`${m}
${l()}`}function i(m){return s()}function u(){throw`${s()}
${l()}`}function f(m){return m}function h(m){return r}function a(m){return r}function w(m){return O(m(s()))}function v(){return y}function T(){return`Err(${d(s())})`}}var y=(()=>{let n;return n={some:r,none:p,expect:e,unwrap:o,unwrapOr:s,andThen:l,map:t,toResult:i,toString:u},n;function r(){return!1}function p(){return!0}function e(f){throw`${f}`}function o(){throw`NONE
${Error().stack}`}function s(f){return f}function l(f){return n}function t(f){return n}function i(f){return O(f)}function u(){return"NONE"}})();function x(n){let r;return r={ok:p,err:e,val:o,expect:s,expectErr:l,unwrap:t,unwrapOr:i,unwrapSafely:u,andThen:f,map:h,mapErr:a,toOption:w,toString:v},r;function p(){return!0}function e(){return!1}function o(){return n}function s(T){return o()}function l(T){return S(T)}function t(){return o()}function i(T){return o()}function u(){return o()}function f(T){return T(o())}function h(T){return x(T(o()))}function a(T){return r}function w(){return c(o())}function v(){return`Ok(${d(o())})`}}var E=(()=>{return{match:n,some:r,none:p,all:e,any:o,wrap:s,wrapAsync:l};function n(t){return r(t)||p(t)}function r(t){return t!=null&&typeof t=="object"&&"some"in t&&"none"in t&&"val"in t&&"expect"in t&&"unwrap"in t&&"unwrapOr"in t&&"unwrapSafely"in t&&"andThen"in t&&"map"in t&&"toResult"in t&&"toString"in t&&typeof t.some=="function"&&typeof t.none=="function"&&typeof t.val=="function"&&typeof t.expect=="function"&&typeof t.unwrap=="function"&&typeof t.unwrapOr=="function"&&typeof t.unwrapSafely=="function"&&typeof t.andThen=="function"&&typeof t.map=="function"&&typeof t.toResult=="function"&&typeof t.toString=="function"&&typeof t.some()=="boolean"&&typeof t.none()=="boolean"&&typeof t.toString()=="string"&&t.some()===!0&&t.none()===!1}function p(t){return t!=null&&typeof t=="object"&&"some"in t&&"none"in t&&"val"in t&&"expect"in t&&"unwrap"in t&&"unwrapOr"in t&&"unwrapSafely"in t&&"andThen"in t&&"map"in t&&"toResult"in t&&"toString"in t&&typeof t.some=="function"&&typeof t.none=="function"&&typeof t.val=="function"&&typeof t.expect=="function"&&typeof t.unwrap=="function"&&typeof t.unwrapOr=="function"&&typeof t.unwrapSafely=="function"&&typeof t.andThen=="function"&&typeof t.map=="function"&&typeof t.toResult=="function"&&typeof t.toString=="function"&&typeof t.some()=="boolean"&&typeof t.none()=="boolean"&&typeof t.toString()=="string"&&t.some()===!1&&t.none()===!0}function e(...t){let i=[],u=0n;for(;u<t.length;){let f=t[Number(u)];if(f.some())i.push(f.val());else return f;u++}return c(i)}function o(...t){let i=0n;for(;i<t.length;){let u=t[Number(i)];return u.some(),u}return y}function s(t,...i){try{return c(t(...i))}catch{return y}}async function l(t,...i){try{return c(await t(...i))}catch{return y}}})();function c(n){return{some:r,none:p,val:e,expect:o,unwrap:s,unwrapOr:l,unwrapSafely:t,andThen:i,map:u,toResult:f,toString:h};function r(){return!0}function p(){return!1}function e(){return n}function o(a){return e()}function s(){return e()}function l(a){return e()}function t(){return e()}function i(a){return a(e())}function u(a){return c(a(e()))}function f(a){return x(e())}function h(){return`Some(${d(e())})`}}function g(n){return{unwrap:r};function r(){return n}}function A(n){return structuredClone(n)}function d(n){let r=String(n);if(r==="[object Object]")try{r=JSON.stringify(n)}catch{}return r}var H=k.ok,P=k.err,q=k.wrap,J=k.wrapAsync,z=E.wrap,B=E.wrapAsync,D=E.some,G=E.none;0&&(module.exports={Assert,Err,None,Ok,Option,Restorable,Result,Some,Unsafe,assert,copy,err,flag,flagAsync,mapErr,none,ok,panic,require,some,toString,wrap,wrapAsync});
//# sourceMappingURL=data:application/json;base64,