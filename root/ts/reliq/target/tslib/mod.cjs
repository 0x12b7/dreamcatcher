"use strict";var U=Object.defineProperty;var or=Object.getOwnPropertyDescriptor;var nr=Object.getOwnPropertyNames;var er=Object.prototype.hasOwnProperty;var ir=(t,o)=>{for(var r in o)U(t,r,{get:o[r],enumerable:!0})},pr=(t,o,r,i)=>{if(o&&typeof o=="object"||typeof o=="function")for(let n of nr(o))!er.call(t,n)&&n!==r&&U(t,n,{get:()=>o[n],enumerable:!(i=or(o,n))||i.enumerable});return t};var ur=t=>pr(U({},"__esModule",{value:!0}),t);var ar={};ir(ar,{Alloc:()=>h,DeAlloc:()=>v,DomError:()=>N,Dyn:()=>H,Err:()=>y,Error:()=>k,Fpv:()=>q,None:()=>c,Ok:()=>x,Some:()=>T,StackTrace:()=>w,StackTraceLine:()=>W,Unsafe:()=>A,allO:()=>K,allR:()=>B,anyO:()=>Y,anyR:()=>j,clone:()=>X,isBranded:()=>_,isErr:()=>M,isNone:()=>V,isOk:()=>C,isOption:()=>J,isResult:()=>Q,isSome:()=>I,isWrapper:()=>Z,panic:()=>S,toString:()=>$,wrap:()=>b,wrapAsync:()=>z});module.exports=ur(ar);var D=(()=>{return{all:t,any:o,wrap:r,wrapAsync:i};function t(n){let p=[],e=0;for(;e<n.length;){let a=n.at(e);if(a.ok())p.push(a.unlock());else return a;e++}return x(p)}function o(n){let p=[],e=0;for(;e<n.length;){let a=n.at(e);if(a.ok())return a;p.push(a.inspect()),e++}return y(p)}function r(n,...p){try{return x(n(...p))}catch(e){return y(A(e))}}async function i(n,...p){try{return x(await n(...p))}catch(e){return y(A(e))}}})();var P=(()=>{return{all:t,any:o};function t(r){let i=[],n=0;for(;n<r.length;){let p=r.at(n);if(p.none())return p;i.push(p.unlock()),n++}return T(i)}function o(r){let i=0;for(;i<r.length;){let n=r.at(i);if(n.some())return n}return c}})();function A(t){return{unwrap:o,parse:r};function o(){return t}function r(i){return i(o())?T(o()):c}}var B=D.all,j=D.any,b=D.wrap,z=D.wrapAsync;function x(t){let o;return o={ok:r,err:i,expect:n,expectErr:p,unlock:e,unlockOr:a,and:m,map:E,mapErr:s,recover:l,degrade:u,toOption:d};function r(){return!0}function i(){return!1}function n(f){return e()}function p(f){S(k("",f))}function e(){return t}function a(f){return e()}function m(f){return f(e())}function E(f){return x(f(e()))}function s(f){return o}function l(f){return o}function u(f){return y(f(e()))}function d(){return T(e())}}function y(t){let o,r;return r=w(y),o={ok:i,err:n,inspect:p,stack:e,expect:a,expectErr:m,unlockOr:E,and:s,map:l,mapErr:u,recover:d,degrade:f,toOption:g};function i(){return!1}function n(){return!0}function p(){return t}function e(){return r}function a(O){let R=p(),G=c;R!=null&&typeof R=="object"&&"code"in R&&typeof R.code=="string"&&(G=T(R.code)),S(k({code:G.unlockOr("ERR_TRIED_UNWRAP_ERR"),message:T(["Fatal Error >>> Tried to unwrap an error value.","",O].join(`
`)),payload:c,stack:e()}))}function m(O){return p()}function E(O){return O}function s(O){return o}function l(O){return o}function u(O){return y(O(p()))}function d(O){return x(O(p()))}function f(O){return o}function g(){return c}}function H(t,o,r,...i){let n,p;{n=new Map,p=0n;let s=0n;for(;s<r;){let l=e();n.set(l,t(...i)),s++}return function(...l){let u,d;return u=c,d=f();function f(){return a().toResult(void 0).map(O=>(u=T(O),h(m(O),{deAlloc:g}))).recover(()=>(u=T(e()),h(t(...l),{deAlloc:g}))).unlock()}function g(){return u.toResult(void 0).map(O=>{u=c,E(O,o(d.expect("Dyn: Could not deallocate resource but the key was available."+F)))}),d=v({deAlloc:g})}}}function e(){return p+=1n}function a(){let s=n.keys().toArray().at(0);return s?T(s):c}function m(s){let l=n.get(s);return n.delete(s),l}function E(s,l){n.set(s,l)}}function v(t){return{...c,...t}}function h(t,o){return{...T(t),...o}}var K=P.all,Y=P.any;function T(t){return{some:o,none:r,expect:i,unlock:n,unlockOr:p,and:e,map:a,toResult:m};function o(){return!0}function r(){return!1}function i(E){return t}function n(){return t}function p(E){return t}function e(E){return E(t)}function a(E){return T(E(t))}function m(E){return x(t)}}var c=(()=>{let t;return t={some:o,none:r,expect:i,unlockOr:n,and:p,map:e,toResult:a};function o(){return!1}function r(){return!0}function i(m){S(k("NONE.ERR_MISSING_VALUE",m))}function n(m){return m}function p(m){return t}function e(m){return t}function a(m){return y(m)}})();function q(t,o=2n){let r;return n()===0n?y(k("FPV.ERR_PRECISION_IS_ZERO","Fpv: Does not support zero precision.")):n()<0n?y(k("FPV.ERR_PRECISION_IS_NEGATIVE","Fpv: Does not support negative precision.")):(r=l(t),x({unwrap:i,precision:n,representation:p,add:e,sub:a,mul:m,div:E}));function i(){return r}function n(){return o}function p(){return 10n**n()}function e(u){return s(()=>r+l(u))}function a(u){return s(()=>r-l(u))}function m(u){return s(()=>r*l(u)/p())}function E(u){let d=l(u);return d===0n?y(k("FPV.ERR_DIVISION_BY_ZERO","Fpv: Cannot divide by zero.")):x(s(()=>r*p()/d))}function s(u){return q(u()).expect("Fpv: Failed to wrap the task result into an Fpv."+F)}function l(u){return typeof u=="bigint"?u:u.unwrap()}}function $(t){if(t==null||typeof t!="object")return String(t);try{return JSON.stringify(t)}catch{}return"[object Object]"}function X(t){return b(()=>structuredClone(t)).mapErr(o=>o.parse(r=>r!=null&&typeof r=="object"&&"name"in r&&"code"in r&&"message"in r&&typeof r.name=="string"&&typeof r.code=="number"&&typeof r.message=="string").map(r=>N(r)).unlockOr(N()))}function Z(t){return(r=>r!=null&&typeof r=="object"&&"unwrap"in r&&typeof r.unwrap=="function")(t)}function I(t){return _(t,"Some")}function Q(t){return C(t)||M(t)}function J(t){return I(t)||V(t)}function C(t){return(r=>_(r,"Ok"))(t)}function V(t){return(r=>_(r,"None"))(t)}function M(t){return(r=>_(r,"Err"))(t)}function _(t,o){return(i=>i!=null&&typeof i=="object"&&"type"in i&&typeof i.type=="function"&&typeof i.type()=="string"&&i.type()===o)(t)}function L(t){let o=Error();return Error.captureStackTrace(o,t),o.stack?T(o.stack):c}function W(t){let o,r,i,n;{o=c,r=c,i=c,n=c;let s=t.split(" "),l=s.shift();if(l&&l.trim().length!==0){let u=s.shift(),d=s.shift();if(u&&u.trim().length!==0&&(o=T(u)),d&&d.trim().length!==0){let f=d.replaceAll("(","").replaceAll(")","").split(":"),g=f.shift(),O=f.at(f.length-1),R=f.at(f.length-2);g&&g.trim().length!==0&&(r=T(g)),O&&O.trim().length!==0&&(n=T(BigInt(O))),R&&R.trim().length!==0&&(i=T(BigInt(R)))}}return{toString:p,location:e,path:a,line:m,column:E}}function p(s){let l="",u="???",d=e().unlockOr(u),f=a().unlockOr(u),g=m().unlockOr(u),O=E().unlockOr(u);return s&&(l=s+" |>"),`${l} ${d} ${f} ${g} ${O}`}function e(){return o}function a(){return r}function m(){return i}function E(){return n}}function w(t){let o;return typeof t=="string"&&(o=n(t)),typeof t=="function"&&(o=n(L(t).unlockOr(""))),Array.isArray(t)&&(o=t),{toString:r,lines:i};function r(){let p="";return i().map((e,a)=>e.toString(BigInt(a))).forEach(e=>p+=e),p}function i(){return o}function n(p){return p.split(`
`).map(e=>e.trim()).filter(e=>e.length>0).map(e=>W(e))}}w(`
    Error: Something went wrong
        at someFunction (/path/to/file.js:10:15)
        <<< STACK_TRACE_LINE.ERR_LOCATION_UNAVAILABLEE >>>
        at anotherFunction (/path/to/otherfile.js:20:25)
        at main (/path/to/mainfile.js:30:35)
`);function S(t,o){let r=o||S;if(typeof t=="object"){let p=t,e=p.code,a="";p.message.map(E=>a=E);let m=Error();throw m.name=e,m.message=a,m.stack=p.stack.toString(),m.cause=void 0,m}let i=t,n=Error();throw n.name="",n.message=i,n.cause=void 0,n.stack=L(r).toResult(void 0).recover(()=>"").unlock(),n}function k(t,o,r){{if(typeof t=="object")return t;let i=t,n=c,p=o;p&&(n=T(p));let e=c,a=r;return a&&(e=T(a)),k({code:i,message:n,payload:e,stack:w(k)})}}var rr={EncodingError:"DOM.ERR_ENCODING",NotReadableError:"DOM.ERR_NOT_READABLE",UnknownError:"DOM.ERR_UNKNOWN",ConstraintError:"DOM.ERR_CONSTRAINT",DataError:"DOM.ERR_DATA",TransactionInactiveError:"DOM.ERR_TRANSACTION_INACTIVE",ReadOnlyError:"DOM.ERR_READ_ONLY",VersionError:"DOM.ERR_VERSION",OperationError:"DOM.ERR_OPERATION",NotAllowedError:"DOM.ERR_NOT_ALLOWED"};var tr={1:"DOM.ERR_INDEX_SIZE",3:"DOM.ERR_HIERARCHY_REQUEST",4:"DOM.ERR_WRONG_DOCUMENT",5:"DOM.ERR_INVALID_CHARACTER",7:"DOM.ERR_NO_MODIFICATION_ALLOWED",8:"DOM.ERR_NOT_FOUND",9:"DOM.ERR_NOT_SUPPORTED",11:"DOM.ERR_INVALID_STATE",12:"DOM.ERR_SYNTAX",13:"DOM.ERR_INVALID_MODIFICATION",14:"DOM.ERR_NAMESPACE",17:"DOM.ERR_TYPE_MISMATCH",18:"DOM.ERR_SECURITY",19:"DOM.ERR_NETWORK",20:"DOM.ERR_ABORT",21:"DOM.ERR_URL_MISMATCH",22:"DOM.ERR_QUOTA_EXCEEDED",23:"DOM.ERR_TIMEOUT",24:"DOM.ERR_INVALID_NODE_TYPE",25:"DOM.ERR_DATA_CLONE"};function N(t){{let r=t;return r===void 0?k("DOM.ERR_UNKNOWN"):k(o(r),r.message)}function o(r){let i="DOM.ERR_UNKNOWN";return r.code===1||r.code===3||r.code===4||r.code===5||r.code===7||r.code===8||r.code===9||r.code===11||r.code===12||r.code===13||r.code===14||r.code===17||r.code===18||r.code===19||r.code===20||r.code===21||r.code===22||r.code===23||r.code===24||r.code===25?i=tr[r.code]:(r.name==="EncodingError"||r.name==="NotReadableError"||r.name==="UnknownError"||r.name==="ConstraintError"||r.name==="DataError"||r.name==="TransactionInactiveError"||r.name==="ReadOnlyError"||r.name==="VersionError"||r.name==="OperationError"||r.name==="NotAllowedError")&&(i=rr[r.name]),i}}var F=`
Uh-oh, looks like Reliq took a wrong turn!
Don't worry, it's not you-it's us.
Please report this at dreamcatcher_foundation@proton.me
`;0&&(module.exports={Alloc,DeAlloc,DomError,Dyn,Err,Error,Fpv,None,Ok,Some,StackTrace,StackTraceLine,Unsafe,allO,allR,anyO,anyR,clone,isBranded,isErr,isNone,isOk,isOption,isResult,isSome,isWrapper,panic,toString,wrap,wrapAsync});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL2NvcmUvbW9kLnRzIiwgIi4uLy4uL3NyYy9jb3JlL3dyYXBwZXIvcmVzdWx0L3Jlc3VsdC50cyIsICIuLi8uLi9zcmMvY29yZS93cmFwcGVyL29wdGlvbi9vcHRpb24udHMiLCAiLi4vLi4vc3JjL2NvcmUvd3JhcHBlci91bnNhZmUvdW5zYWZlLnRzIiwgIi4uLy4uL3NyYy9jb3JlL3dyYXBwZXIvcmVzdWx0L3V0aWwvc2hvcnRoYW5kLnRzIiwgIi4uLy4uL3NyYy9jb3JlL3dyYXBwZXIvcmVzdWx0L29rL29rLnRzIiwgIi4uLy4uL3NyYy9jb3JlL3dyYXBwZXIvcmVzdWx0L2Vyci9lcnIudHMiLCAiLi4vLi4vc3JjL2NvcmUvd3JhcHBlci9wZXJmb3JtYW5jZS9keW4vZHluLnRzIiwgIi4uLy4uL3NyYy9jb3JlL3dyYXBwZXIvcGVyZm9ybWFuY2UvZHluL2RlX2FsbG9jLnRzIiwgIi4uLy4uL3NyYy9jb3JlL3dyYXBwZXIvcGVyZm9ybWFuY2UvZHluL2FsbG9jLnRzIiwgIi4uLy4uL3NyYy9jb3JlL3dyYXBwZXIvb3B0aW9uL3V0aWwvc2hvcnRoYW5kLnRzIiwgIi4uLy4uL3NyYy9jb3JlL3dyYXBwZXIvb3B0aW9uL3NvbWUvc29tZS50cyIsICIuLi8uLi9zcmMvY29yZS93cmFwcGVyL29wdGlvbi9ub25lL25vbmUudHMiLCAiLi4vLi4vc3JjL2NvcmUvd3JhcHBlci9mcHYvZnB2LnRzIiwgIi4uLy4uL3NyYy9jb3JlL3V0aWwvdG9fc3RyaW5nLnRzIiwgIi4uLy4uL3NyYy9jb3JlL3V0aWwvY2xvbmUudHMiLCAiLi4vLi4vc3JjL2NvcmUvZ3VhcmQvaXNfd3JhcHBlci50cyIsICIuLi8uLi9zcmMvY29yZS9ndWFyZC9pc19zb21lLnRzIiwgIi4uLy4uL3NyYy9jb3JlL2d1YXJkL2lzX3Jlc3VsdC50cyIsICIuLi8uLi9zcmMvY29yZS9ndWFyZC9pc19vcHRpb24udHMiLCAiLi4vLi4vc3JjL2NvcmUvZ3VhcmQvaXNfb2sudHMiLCAiLi4vLi4vc3JjL2NvcmUvZ3VhcmQvaXNfbm9uZS50cyIsICIuLi8uLi9zcmMvY29yZS9ndWFyZC9pc19lcnIudHMiLCAiLi4vLi4vc3JjL2NvcmUvZ3VhcmQvaXNfYnJhbmRlZC50cyIsICIuLi8uLi9zcmMvY29yZS9lcnJvci91dGlsL2xvY2FsX3N0YWNrX3RyYWNlLnRzIiwgIi4uLy4uL3NyYy9jb3JlL2Vycm9yL3N0YWNrL3N0YWNrX3RyYWNlX2xpbmUudHMiLCAiLi4vLi4vc3JjL2NvcmUvZXJyb3Ivc3RhY2svc3RhY2tfdHJhY2UudHMiLCAiLi4vLi4vc3JjL2NvcmUvZXJyb3IvcGFuaWMudHMiLCAiLi4vLi4vc3JjL2NvcmUvZXJyb3IvZXJyb3IudHMiLCAiLi4vLi4vc3JjL2NvcmUvZXJyb3IvZG9tL2V4Y2VwdGlvbi9kb21fZXhjZXB0aW9uX25hbWVfdG9fZG9tX2Vycm9yX2NvZGVfbWFwLnRzIiwgIi4uLy4uL3NyYy9jb3JlL2Vycm9yL2RvbS9leGNlcHRpb24vZG9tX2V4Y2VwdGlvbl9jb2RlX3RvX2RvbV9lcnJvcl9jb2RlX21hcC50cyIsICIuLi8uLi9zcmMvY29yZS9lcnJvci9kb20vZG9tX2Vycm9yLnRzIiwgIi4uLy4uL3NyYy9jb3JlL2NvbnN0YW50L2ludGVybmFsX2Vycm9yX21lc3NhZ2UudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImV4cG9ydCB7XHJcbiAgICB0eXBlIEFzeW5jQ2xvc3VyZSxcclxuICAgIHR5cGUgQXN5bmNGdW5jdGlvbixcclxuICAgIHR5cGUgQ2xvc3VyZSxcclxuICAgIHR5cGUgRnVuY3Rpb24sXHJcbiAgICB0eXBlIE1heWJlQXN5bmMsXHJcbiAgICB0eXBlIFR5cGVHdWFyZCxcclxuICAgIHR5cGUgQnJhbmRlZCxcclxuICAgIHR5cGUgUGFyc2FibGUsXHJcbiAgICB0eXBlIFNlcmlhbGl6YWJsZVxyXG59IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuZXhwb3J0IHtcclxuICAgIFN0YWNrVHJhY2VMaW5lLFxyXG4gICAgU3RhY2tUcmFjZSxcclxuICAgIEVycm9yLFxyXG4gICAgcGFuaWMsXHJcbn0gZnJvbSBcIkByb290XCI7XHJcblxyXG5leHBvcnQgeyBcclxuICAgIHR5cGUgRG9tRXJyb3JDb2RlLFxyXG4gICAgRG9tRXJyb3JcclxufSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcbmV4cG9ydCB7XHJcbiAgICBjbG9uZSxcclxuICAgIHRvU3RyaW5nXHJcbn0gZnJvbSBcIkByb290XCI7XHJcblxyXG5leHBvcnQge1xyXG4gICAgaXNCcmFuZGVkLFxyXG4gICAgaXNFcnIsXHJcbiAgICBpc05vbmUsXHJcbiAgICBpc09rLFxyXG4gICAgaXNPcHRpb24sXHJcbiAgICBpc1Jlc3VsdCxcclxuICAgIGlzU29tZSxcclxuICAgIGlzV3JhcHBlclxyXG59IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuZXhwb3J0IHtcclxuICAgIHR5cGUgUmVzdWx0SGFuZGxlcixcclxuICAgIHR5cGUgUmVzdWx0LFxyXG5cclxuICAgIHR5cGUgRXJyT2ZBbGwsXHJcbiAgICB0eXBlIEVyck9mLFxyXG4gICAgdHlwZSBFcnJWYWxPZkFsbCxcclxuICAgIHR5cGUgRXJyVmFsT2YsXHJcbiAgICBFcnIsXHJcblxyXG4gICAgdHlwZSBPa09mQWxsLFxyXG4gICAgdHlwZSBPa09mLFxyXG4gICAgdHlwZSBPa1ZhbE9mQWxsLFxyXG4gICAgdHlwZSBPa1ZhbE9mLFxyXG4gICAgT2ssXHJcblxyXG4gICAgYWxsUixcclxuICAgIGFueVIsXHJcbiAgICB3cmFwLFxyXG4gICAgd3JhcEFzeW5jXHJcbn0gZnJvbSBcIkByb290XCI7XHJcblxyXG5leHBvcnQge1xyXG4gICAgdHlwZSBPcHRpb25IYW5kbGVyLFxyXG4gICAgdHlwZSBPcHRpb24sXHJcblxyXG4gICAgTm9uZSxcclxuXHJcbiAgICB0eXBlIFNvbWVPZkFsbCxcclxuICAgIHR5cGUgU29tZU9mLFxyXG4gICAgdHlwZSBTb21lVmFsT2ZBbGwsXHJcbiAgICB0eXBlIFNvbWVWYWxPZixcclxuICAgIFNvbWUsXHJcblxyXG4gICAgYWxsTyxcclxuICAgIGFueU9cclxufSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcbmV4cG9ydCB7XHJcbiAgICBVbnNhZmVcclxufSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcbmV4cG9ydCB7XHJcbiAgICB0eXBlIEZwdkVycm9yQ29kZSxcclxuICAgIHR5cGUgRnB2RXJyb3IsXHJcbiAgICB0eXBlIEZwdklzaCxcclxuICAgIEZwdlxyXG59IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuZXhwb3J0IHtcclxuICAgIHR5cGUgRHluQ29uc3RydWN0b3IsXHJcbiAgICB0eXBlIER5bldyYXBwZXIsXHJcbiAgICBBbGxvYyxcclxuICAgIERlQWxsb2MsXHJcbiAgICBEeW5cclxufSBmcm9tIFwiQHJvb3RcIjsiLCAiXCJyYWlzZSAxXCI7XHJcblxyXG5pbXBvcnQgdHlwZSB7IEVyclZhbE9mQWxsIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB0eXBlIHsgT2tWYWxPZkFsbCB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgdHlwZSB7IFJlc3VsdEhhbmRsZXIgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHR5cGUgeyBDbG9zdXJlIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB0eXBlIHsgQXN5bmNDbG9zdXJlIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IE9rIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IEVyciB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBVbnNhZmUgfSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcbi8qKlxyXG4gKiAqKipCcmllZioqKlxyXG4gKiBBIHdyYXBwZXIgdGhhdCBlbmNhcHN1bGF0ZXMgZWl0aGVyIGEgc3VjY2Vzc2Z1bCBvdXRjb21lIGBPazxUMT5gIG9yIGEgZmFpbHVyZSBgRXJyPFQyPmAuXHJcbiAqIFxyXG4gKiAqKipFeGFtcGxlKioqXHJcbiAqIGBgYHRzXHJcbiAqICBmdW5jdGlvbiBmb28oKTogUmVzdWx0PDIwMG4sIDQwNG4+IHtcclxuICogICAgICBpZiAoKSByZXR1cm4gT2soMjAwbik7XHJcbiAqICAgICAgcmV0dXJuIEVycig0MDRuKTtcclxuICogIH1cclxuICogXHJcbiAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj4gPSBmb28oKTtcclxuICogIGlmIChyZXN1bHQub2soKSkge1xyXG4gKiAgICAgIGxldCB2YWx1ZTogMjAwbiA9IHJlc3VsdC51bmxvY2soKTtcclxuICogICAgICAvLy8gLi4uXHJcbiAqICB9XHJcbiAqIGBgYFxyXG4gKi9cclxuZXhwb3J0IHR5cGUgUmVzdWx0PFQxLCBUMj4gPSBPazxUMT4gfCBFcnI8VDI+O1xyXG5cclxuZXhwb3J0IGNvbnN0IFJlc3VsdDogUmVzdWx0SGFuZGxlciA9ICgoKSA9PiB7XHJcbiAgICAvKiogQGNvbnN0cnVjdG9yICovIHtcclxuICAgICAgICByZXR1cm4geyBhbGwsIGFueSwgd3JhcCwgd3JhcEFzeW5jIH07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYWxsPFQxIGV4dGVuZHMgQXJyYXk8UmVzdWx0PHVua25vd24sIHVua25vd24+Pj4ocmVzdWx0czogVDEpOiBSZXN1bHQ8T2tWYWxPZkFsbDxUMT4sIEVyclZhbE9mQWxsPFQxPltudW1iZXJdPiB7XHJcbiAgICAgICAgbGV0IG91dDogQXJyYXk8dW5rbm93bj4gPSBbXTtcclxuICAgICAgICBsZXQgaTogbnVtYmVyID0gMDtcclxuICAgICAgICB3aGlsZSAoaSA8IHJlc3VsdHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQ6IFJlc3VsdDx1bmtub3duLCB1bmtub3duPiA9IHJlc3VsdHMuYXQoaSkhO1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0Lm9rKCkpIG91dC5wdXNoKHJlc3VsdC51bmxvY2soKSk7XHJcbiAgICAgICAgICAgIGVsc2UgcmV0dXJuIHJlc3VsdCBhcyBFcnI8RXJyVmFsT2ZBbGw8VDE+W251bWJlcl0+O1xyXG4gICAgICAgICAgICBpICsrO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gT2soKG91dCBhcyBPa1ZhbE9mQWxsPFQxPikpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGFueTxUMSBleHRlbmRzIEFycmF5PFJlc3VsdDx1bmtub3duLCB1bmtub3duPj4+KHJlc3VsdHM6IFQxKTogUmVzdWx0PE9rVmFsT2ZBbGw8VDE+W251bWJlcl0sIEVyclZhbE9mQWxsPFQxPj4ge1xyXG4gICAgICAgIGxldCBvdXQ6IEFycmF5PHVua25vd24+ID0gW107XHJcbiAgICAgICAgbGV0IGk6IG51bWJlciA9IDA7XHJcbiAgICAgICAgd2hpbGUgKGkgPCByZXN1bHRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBsZXQgd3JhcHBlcjogUmVzdWx0PHVua25vd24sIHVua25vd24+ID0gcmVzdWx0cy5hdChpKSE7XHJcbiAgICAgICAgICAgIGlmICh3cmFwcGVyLm9rKCkpIHJldHVybiB3cmFwcGVyIGFzIE9rPE9rVmFsT2ZBbGw8VDE+W251bWJlcl0+O1xyXG4gICAgICAgICAgICBlbHNlIG91dC5wdXNoKHdyYXBwZXIuaW5zcGVjdCgpKTtcclxuICAgICAgICAgICAgaSArKztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIEVycigob3V0IGFzIEVyclZhbE9mQWxsPFQxPikpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBmdW5jdGlvbiB3cmFwPFQxLCBUMiwgVDMgZXh0ZW5kcyBBcnJheTxUMj4+KHRhc2s6IENsb3N1cmU8VDMsIFQxPiwgLi4ucGF5bG9hZDogVDMpOiBSZXN1bHQ8VDEsIFVuc2FmZT4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJldHVybiBPayh0YXNrKC4uLnBheWxvYWQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEVycihVbnNhZmUoZSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBmdW5jdGlvbiB3cmFwQXN5bmM8VDEsIFQyLCBUMyBleHRlbmRzIEFycmF5PFQyPj4odGFzazogQXN5bmNDbG9zdXJlPFQzLCBUMT4sIC4uLnBheWxvYWQ6IFQzKTogUHJvbWlzZTxSZXN1bHQ8VDEsIFVuc2FmZT4+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXR1cm4gT2soKGF3YWl0IHRhc2soLi4ucGF5bG9hZCkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEVycihVbnNhZmUoZSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSkoKTsiLCAiXCJyYWlzZSAxXCI7XHJcblxyXG5pbXBvcnQgdHlwZSB7IE9wdGlvbkhhbmRsZXIgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHR5cGUgeyBTb21lVmFsT2ZBbGwgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgU29tZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBOb25lIH0gZnJvbSBcIkByb290XCI7XHJcblxyXG4vKipcclxuICogKioqQnJpZWYqKipcclxuICogQSB0eXBlIHRoYXQgcmVwcmVzZW50cyBhbiBvcHRpb25hbCB2YWx1ZSwgZW5jYXBzdWxhdGluZyBlaXRoZXIgYSB2YWx1ZSBgU29tZWAgXHJcbiAqIG9yIHRoZSBhYnNlbmNlIG9mIGEgdmFsdWUgYE5vbmVgLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgT3B0aW9uPFQxPiA9IFNvbWU8VDE+IHwgTm9uZTtcclxuXHJcbmV4cG9ydCBjb25zdCBPcHRpb246IE9wdGlvbkhhbmRsZXIgPSAoKCkgPT4ge1xyXG4gICAgLyoqIEBjb25zdHJ1Y3RvciAqLyB7XHJcbiAgICAgICAgcmV0dXJuIHsgYWxsLCBhbnkgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBhbGw8VDEgZXh0ZW5kcyBBcnJheTxPcHRpb248dW5rbm93bj4+PihvcHRpb25zOiBUMSk6IE9wdGlvbjxTb21lVmFsT2ZBbGw8VDE+PiB7XHJcbiAgICAgICAgbGV0IG91dDogQXJyYXk8dW5rbm93bj4gPSBbXTtcclxuICAgICAgICBsZXQgaTogbnVtYmVyID0gMDtcclxuICAgICAgICB3aGlsZSAoaSA8IG9wdGlvbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGxldCBvcHRpb246IE9wdGlvbjx1bmtub3duPiA9IG9wdGlvbnMuYXQoaSkhO1xyXG4gICAgICAgICAgICBpZiAob3B0aW9uLm5vbmUoKSkgcmV0dXJuIG9wdGlvbiBhcyBOb25lO1xyXG4gICAgICAgICAgICBvdXQucHVzaChvcHRpb24udW5sb2NrKCkpO1xyXG4gICAgICAgICAgICBpICsrO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gU29tZShvdXQgYXMgU29tZVZhbE9mQWxsPFQxPik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYW55PFQxIGV4dGVuZHMgQXJyYXk8T3B0aW9uPHVua25vd24+Pj4ob3B0aW9uczogVDEpOiBPcHRpb248U29tZVZhbE9mQWxsPFQxPltudW1iZXJdPiB7XHJcbiAgICAgICAgbGV0IGk6IG51bWJlciA9IDA7XHJcbiAgICAgICAgd2hpbGUgKGkgPCBvcHRpb25zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBsZXQgb3B0aW9uOiBPcHRpb248dW5rbm93bj4gPSBvcHRpb25zLmF0KGkpITtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbi5zb21lKCkpIHJldHVybiBvcHRpb24gYXMgU29tZTxTb21lVmFsT2ZBbGw8VDE+W251bWJlcl0+O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gTm9uZTtcclxuICAgIH1cclxufSkoKTsiLCAiaW1wb3J0IHR5cGUgeyBXcmFwcGVyIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB0eXBlIHsgUGFyc2FibGUgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHR5cGUgeyBUeXBlR3VhcmQgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHR5cGUgeyBPcHRpb24gfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgU29tZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBOb25lIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IHRvU3RyaW5nIGFzIHRvU3RyaW5nMCB9IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuZXhwb3J0IHR5cGUgVW5zYWZlID1cclxuICAgICYgV3JhcHBlcjx1bmtub3duPlxyXG4gICAgJiBQYXJzYWJsZTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBVbnNhZmUoX3ZhbHVlOiB1bmtub3duKTogVW5zYWZlIHtcclxuICAgIC8qKiBAY29uc3RydWN0b3IgKi8ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHVud3JhcCxcclxuICAgICAgICAgICAgcGFyc2UsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB1bndyYXAoKTogdW5rbm93biB7XHJcbiAgICAgICAgcmV0dXJuIF92YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBwYXJzZTxUMT4oZ3VhcmQ6IFR5cGVHdWFyZDxUMT4pOiBPcHRpb248VDE+IHtcclxuICAgICAgICBpZiAoIWd1YXJkKHVud3JhcCgpKSkgcmV0dXJuIE5vbmU7XHJcbiAgICAgICAgcmV0dXJuIFNvbWUoKHVud3JhcCgpIGFzIFQxKSk7XHJcbiAgICB9XHJcbn0iLCAiaW1wb3J0IHsgUmVzdWx0IH0gZnJvbSBcIkByb290XCI7XHJcblxyXG5leHBvcnQgY29uc3QgYWxsUiA9IFJlc3VsdC5hbGw7XHJcbmV4cG9ydCBjb25zdCBhbnlSID0gUmVzdWx0LmFueTtcclxuZXhwb3J0IGNvbnN0IHdyYXAgPSBSZXN1bHQud3JhcDtcclxuZXhwb3J0IGNvbnN0IHdyYXBBc3luYyA9IFJlc3VsdC53cmFwQXN5bmM7IiwgImltcG9ydCB0eXBlIHsgRnVuY3Rpb24gfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHR5cGUgeyBVbmxvY2tlZFdyYXBwZXIgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHR5cGUgeyBPcHRpb24gfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHR5cGUgeyBSZXN1bHQgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgRXJyb3IgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgRXJyIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IFNvbWUgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgcGFuaWMgfSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcbmV4cG9ydCB0eXBlIE9rPFQxPiA9IFxyXG4gICAgJiBVbmxvY2tlZFdyYXBwZXI8VDE+XHJcbiAgICAmIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBgb2tgIGNoZWNrcyBpZiB0aGUgY3VycmVudCBpbnN0YW5jZSBpcyBgT2tgLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPjtcclxuICAgICAqICBpZiAocmVzdWx0Lm9rKCkpIHtcclxuICAgICAqICAgICAgbGV0IHZhbHVlOiAyMDBuID0gcmVzdWx0LnVubG9jaygpO1xyXG4gICAgICogICAgICAvLy8gLi4uXHJcbiAgICAgKiAgfVxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIG9rKCk6IHRoaXMgaXMgT2s8VDE+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIGBlcnJgIGNoZWNrcyBpZiB0aGUgY3VycmVudCBpbnN0YW5jZSBpcyBgRXJyYC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj47XHJcbiAgICAgKiAgaWYgKHJlc3VsdC5lcnIoKSkge1xyXG4gICAgICogICAgICBsZXQgZTogNDA0biA9IHJlc3VsdC5pbnNwZWN0KCk7XHJcbiAgICAgKiAgICAgIC8vLyAuLi5cclxuICAgICAqICB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgZXJyKCk6IHRoaXMgaXMgRXJyPHVua25vd24+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIGBleHBlY3RgIHRlcm1pbmF0ZXMgd2l0aCBgcGFuaWNgIGlmIHRoZSBgUmVzdWx0YCBpcyBgRXJyYC5cclxuICAgICAqIFxyXG4gICAgICogKioqV2FybmluZyoqKlxyXG4gICAgICogUmVzZXJ2ZWQgZm9yIGRlYnVnZ2luZyBvciB1bnJlY292ZXJhYmxlIGVycm9ycy5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj47XHJcbiAgICAgKiAgbGV0IHN0YXR1czogMjAwbiA9IHJlc3VsdC5leHBlY3QoXCJUaGlzIGlzIHVuZXhwZWN0ZWQgYW5kIHVucmVjb3ZlcmFibGUuXCIpO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIGV4cGVjdChfXzogdW5rbm93bik6IFQxO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIEVuc3VyZXMgdGhhdCB0aGUgYFJlc3VsdGAgaXMgYW4gYEVycmAgYW5kIHJldHJpZXZlcyB0aGUgZXJyb3IgdmFsdWUgaW5zaWRlLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipXYXJuaW5nKioqXHJcbiAgICAgKiBSZXNlcnZlZCBmb3IgZGVidWdnaW5nIG9yIHVucmVjb3ZlcmFibGUgZXJyb3JzLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPjtcclxuICAgICAqICBsZXQgc3RhdHVzOiA0MDRuID0gcmVzdWx0LmV4cGVjdEVycihcIlRoaXMgaXMgdW5leHBlY3RlZCBhbmQgdW5yZWNvdmVyYWJsZS5cIik7XHJcbiAgICAgKiBgYGBcclxuICAgICovXHJcbiAgICBleHBlY3RFcnIoX186IHVua25vd24pOiBuZXZlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIHZhbHVlIG9mIGFuIGBPa2AsIG9yIGZhbGxzIGJhY2sgdG8gdGhlIHByb3ZpZGVkIHZhbHVlIGlmIGl0XHUyMDE5cyBhbiBgRXJyYC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj4gPSBFcnIoNDA0bik7XHJcbiAgICAgKiAgbGV0IHN0YXR1czogMjAwbiA9IHJlc3VsdC51bmxvY2tPcigyMDBuKTtcclxuICAgICAqICBjb25zb2xlLmxvZyhzdGF0dXMpOyAvLy8gMjAwbi5cclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICB1bmxvY2tPcihfXzogdW5rbm93bik6IFQxO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIFJlY292ZXJzIGZyb20gdGhlIGN1cnJlbnQgZXJyb3IgYnkgYXBwbHlpbmcgYSByZWNvdmVyeSBmdW5jdGlvbiwgdHJhbnNmb3JtaW5nIHRoZSBgRXJyYCBpbnRvIGFuIGBPa2AuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+ID0gRXJyKDQwNG4pO1xyXG4gICAgICogIGxldCBzdGF0dXM6IDIwMG4gPSByZXN1bHRcclxuICAgICAqICAgICAgLnJlY292ZXIoKCkgPT4ge1xyXG4gICAgICogICAgICAgICAgcmV0dXJuIDIwMG47XHJcbiAgICAgKiAgICAgIH0pXHJcbiAgICAgKiAgICAgIC51bmxvY2soKTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICByZWNvdmVyKF9fOiB1bmtub3duKTogT2s8VDE+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIEFwcGxpZXMgYSB0cmFuc2Zvcm1hdGlvbiB0byB0aGUgYE9rYCB2YWx1ZSBhbmQgcmV0dXJucyBhbiBgRXJyYCBpbnN0YW5jZSB3aXRoIHRoZSB0cmFuc2Zvcm1lZCB2YWx1ZS5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj4gPSBPaygyMDBuKTtcclxuICAgICAqICBsZXQgZTogNDA0biA9IHJlc3VsdFxyXG4gICAgICogICAgICAuZGVncmFkZSgoKSA9PiB7XHJcbiAgICAgKiAgICAgICAgICByZXR1cm4gNDA0bjtcclxuICAgICAqICAgICAgfSlcclxuICAgICAqICAgICAgLmluc3BlY3QoKTtcclxuICAgICAqICBjb25zb2xlLmxvZyhlKTsgLy8vIDQwNG4uXHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgZGVncmFkZTxUMj4odGFzazogRnVuY3Rpb248VDEsIFQyPik6IEVycjxUMj47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogQ2hhaW5zIGFuIHRhc2sgdW50aWwgdGhlIGZpcnN0IGBFcnJgIGlzIGVuY291bnRlcmVkLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPiA9IEVycig0MDRuKTtcclxuICAgICAqICByZXN1bHRcclxuICAgICAqICAgICAgLmFuZCh2YWx1ZSA9PiB7XHJcbiAgICAgKiAgICAgICAgICAvLy8gVGFzayBpcyBza2lwcGVkIGJlY2F1c2UgYFJlc3VsdGAgaXMgYW4gYEVycmAuXHJcbiAgICAgKiAgICAgICAgICAvLy8gLi4uXHJcbiAgICAgKiAgICAgICAgICByZXR1cm4gT2sodmFsdWUgKyAxbik7XHJcbiAgICAgKiAgICAgIH0pXHJcbiAgICAgKiAgICAgIC5hbmQodmFsdWUgPT4ge1xyXG4gICAgICogICAgICAgICAgLy8vIFRhc2sgaXMgc2tpcHBlZCBiZWNhdXNlIGBSZXN1bHRgIGlzIGFuIGBFcnJgLlxyXG4gICAgICogICAgICAgICAgLy8vIC4uLlxyXG4gICAgICogICAgICB9KTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBhbmQ8VDI+KHRhc2s6IEZ1bmN0aW9uPFQxLCBPazxUMj4+KTogT2s8VDI+O1xyXG4gICAgYW5kPFQyPih0YXNrOiBGdW5jdGlvbjxUMSwgRXJyPFQyPj4pOiBSZXN1bHQ8VDEsIFQyPjtcclxuICAgIGFuZDxUMiwgVDM+KHRhc2s6IEZ1bmN0aW9uPFQxLCBSZXN1bHQ8VDIsIFQzPj4pOiBSZXN1bHQ8VDIsIFQzPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBUcmFuc2Zvcm1zIHRoZSBgT2tgIHZhbHVlIGlmIHByZXNlbnQsIGJ1dCBpZiB0aGlzIGlzIGFscmVhZHkgYW4gYEVycmAsIGl0IHJlbWFpbnMgdW5jaGFuZ2VkLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQwOiBSZXN1bHQ8MjAwbiwgNDA0bj4gPSBPaygyMDBuKTtcclxuICAgICAqICBsZXQgcmVzdWx0MTogUmVzdWx0PDIwMW4sIDQwNG4+ID0gcmVzdWx0Lm1hcCh2YWx1ZSA9PiB7XHJcbiAgICAgKiAgICAgIC8vLyBUYXNrIGlzIHJ1biBiZWNhdXNlIGBSZXN1bHRgIGlzIGBPa2AuXHJcbiAgICAgKiAgICAgIC8vLyAuLi5cclxuICAgICAqICAgICAgcmV0dXJuIHZhbHVlICsgMW47XHJcbiAgICAgKiAgfSk7XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgbWFwPFQyPih0YXNrOiBGdW5jdGlvbjxUMSwgVDI+KTogT2s8VDI+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIFRyYW5zZm9ybXMgdGhlIGVycm9yIGNvbnRhaW5lZCBpbiB0aGUgYEVycmAgdXNpbmcgdGhlIHByb3ZpZGVkIGB0YXNrYCBmdW5jdGlvbi5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj4gPSBFcnIoNDA0bik7XHJcbiAgICAgKiAgcmVzdWx0XHJcbiAgICAgKiAgICAgIC5tYXBFcnIoZSA9PiB7XHJcbiAgICAgKiAgICAgICAgICByZXR1cm4gZSArIDFuO1xyXG4gICAgICogICAgICB9KVxyXG4gICAgICogICAgICAuaW5zcGVjdCgpOyAvLy8gNDA1bi5cclxuICAgICAqIGBgYFxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPiA9IE9rKDIwMG4pO1xyXG4gICAgICogIHJlc3VsdFxyXG4gICAgICogICAgICAubWFwRXJyKGUgPT4ge1xyXG4gICAgICogICAgICAgICAgLy8vIFRhc2sgaXMgcnVuIGJlY2F1c2UgYFJlc3VsdGAgaXMgYE9rYC5cclxuICAgICAqICAgICAgICAgIC8vLyAuLi5cclxuICAgICAqICAgICAgfSk7XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgbWFwRXJyKF9fOiB1bmtub3duKTogT2s8VDE+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIENvbnZlcnRzIGEgYFJlc3VsdDxUMSwgVDI+YCB0byBhbiBgT3B0aW9uPFQxPmAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+O1xyXG4gICAgICogIGxldCBvcHRpb246IE9wdGlvbjwyMDBuPiA9IHJlc3VsdC50b09wdGlvbigpO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIHRvT3B0aW9uKCk6IE9wdGlvbjxUMT47XHJcbn07XHJcblxyXG4vKipcclxuICogKioqQnJpZWYqKipcclxuICogVGhlIHN1Y2Nlc3NmdWwgdmFsdWUgd2l0aGluIGEgYFJlc3VsdGAuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gT2s8VDE+KF92YWx1ZTogVDEpOiBPazxUMT4ge1xyXG4gICAgbGV0IF90aGlzOiBPazxUMT47XHJcblxyXG4gICAgLyoqIEBjb25zdHJ1Y3RvciAqLyB7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzID0ge1xyXG4gICAgICAgICAgICBvayxcclxuICAgICAgICAgICAgZXJyLFxyXG4gICAgICAgICAgICBleHBlY3QsXHJcbiAgICAgICAgICAgIGV4cGVjdEVycixcclxuICAgICAgICAgICAgdW5sb2NrLFxyXG4gICAgICAgICAgICB1bmxvY2tPcixcclxuICAgICAgICAgICAgYW5kLFxyXG4gICAgICAgICAgICBtYXAsXHJcbiAgICAgICAgICAgIG1hcEVycixcclxuICAgICAgICAgICAgcmVjb3ZlcixcclxuICAgICAgICAgICAgZGVncmFkZSxcclxuICAgICAgICAgICAgdG9PcHRpb25cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG9rKCk6IHRoaXMgaXMgT2s8VDE+IHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBlcnIoKTogdGhpcyBpcyBFcnI8dW5rbm93bj4ge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBleHBlY3QoX186IHVua25vd24pOiBUMSB7XHJcbiAgICAgICAgcmV0dXJuIHVubG9jaygpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGV4cGVjdEVycihtZXNzYWdlOiBzdHJpbmcpOiBuZXZlciB7XHJcbiAgICAgICAgcGFuaWMoRXJyb3IoXCJcIiwgbWVzc2FnZSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHVubG9jaygpOiBUMSB7XHJcbiAgICAgICAgcmV0dXJuIF92YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB1bmxvY2tPcihfXzogdW5rbm93bik6IFQxIHtcclxuICAgICAgICByZXR1cm4gdW5sb2NrKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYW5kPFQyPih0YXNrOiBGdW5jdGlvbjxUMSwgT2s8VDI+Pik6IE9rPFQyPjtcclxuICAgIGZ1bmN0aW9uIGFuZDxUMj4odGFzazogRnVuY3Rpb248VDEsIEVycjxUMj4+KTogUmVzdWx0PFQxLCBUMj47XHJcbiAgICBmdW5jdGlvbiBhbmQ8VDIsIFQzPih0YXNrOiBGdW5jdGlvbjxUMSwgUmVzdWx0PFQyLCBUMz4+KTogUmVzdWx0PFQyLCBUMz47XHJcbiAgICBmdW5jdGlvbiBhbmQ8VDIsIFQzPih0YXNrOiBGdW5jdGlvbjxUMSwgUmVzdWx0PFQyLCBUMz4+KTogUmVzdWx0PFQyLCBUMz4ge1xyXG4gICAgICAgIHJldHVybiB0YXNrKHVubG9jaygpKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtYXA8VDI+KHRhc2s6IEZ1bmN0aW9uPFQxLCBUMj4pOiBPazxUMj4ge1xyXG4gICAgICAgIHJldHVybiBPayh0YXNrKHVubG9jaygpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbWFwRXJyKF9fOiB1bmtub3duKTogT2s8VDE+IHtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmVjb3ZlcihfXzogdW5rbm93bik6IE9rPFQxPiB7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRlZ3JhZGU8VDI+KHRhc2s6IEZ1bmN0aW9uPFQxLCBUMj4pOiBFcnI8VDI+IHtcclxuICAgICAgICByZXR1cm4gRXJyKHRhc2sodW5sb2NrKCkpKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB0b09wdGlvbigpOiBPcHRpb248VDE+IHtcclxuICAgICAgICByZXR1cm4gU29tZSh1bmxvY2soKSk7XHJcbiAgICB9XHJcbn0iLCAiaW1wb3J0IHR5cGUgeyBGdW5jdGlvbiB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgdHlwZSB7IE9wdGlvbiB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBTdGFja1RyYWNlIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IEVycm9yIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IE9rIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IE5vbmUgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgU29tZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBwYW5pYyB9IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuZXhwb3J0IHR5cGUgRXJyPFQxPiA9IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBgb2tgIGNoZWNrcyBpZiB0aGUgY3VycmVudCBpbnN0YW5jZSBpcyBgT2tgLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPjtcclxuICAgICAqICBpZiAocmVzdWx0Lm9rKCkpIHtcclxuICAgICAqICAgICAgbGV0IHZhbHVlOiAyMDBuID0gcmVzdWx0LnVubG9jaygpO1xyXG4gICAgICogICAgICAvLy8gLi4uXHJcbiAgICAgKiAgfVxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIG9rKCk6IHRoaXMgaXMgT2s8dW5rbm93bj47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogYGVycmAgY2hlY2tzIGlmIHRoZSBjdXJyZW50IGluc3RhbmNlIGlzIGBFcnJgLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPjtcclxuICAgICAqICBpZiAocmVzdWx0LmVycigpKSB7XHJcbiAgICAgKiAgICAgIGxldCBlOiA0MDRuID0gcmVzdWx0Lmluc3BlY3QoKTtcclxuICAgICAqICAgICAgLy8vIC4uLlxyXG4gICAgICogIH1cclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBlcnIoKTogdGhpcyBpcyBFcnI8VDE+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIFJldHJpZXZlcyB0aGUgZXJyb3IgdmFsdWUgZW5jYXBzdWxhdGVkIGJ5IHRoZSBgRXJyYCBpbnN0YW5jZS5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj47XHJcbiAgICAgKiAgaWYgKHJlc3VsdC5lcnIoKSkge1xyXG4gICAgICogICAgICBsZXQgZTogNDA0biA9IHJlc3VsdC5pbnNwZWN0KCk7XHJcbiAgICAgKiAgICAgIC8vLyAuLi5cclxuICAgICAqICB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgaW5zcGVjdCgpOiBUMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIHN0YWNrIHRyYWNlIG9mIHRoZSBlcnJvciwgZ2VuZXJhdGVkIGF0IHRoZSB0aW1lIHRoZSBgRXJyYCBpbnN0YW5jZSB3YXMgY3JlYXRlZC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj47XHJcbiAgICAgKiAgaWYgKHJlc3VsdC5lcnIoKSkge1xyXG4gICAgICogICAgICByZXN1bHRcclxuICAgICAqICAgICAgICAgIC5zdGFjaygpXHJcbiAgICAgKiAgICAgICAgICAubGluZXMoKVxyXG4gICAgICogICAgICAgICAgLmZvckVhY2gobGluZSA9PiB7XHJcbiAgICAgKiAgICAgICAgICAgICAgbGV0IGxpbmVSZXByZXNlbnRhdGlvbjogc3RyaW5nID0gbGluZS50b1N0cmluZygpO1xyXG4gICAgICogICAgICAgICAgICAgIC8vLyAuLi5cclxuICAgICAqICAgICAgICAgICAgICByZXR1cm47IFxyXG4gICAgICogICAgICAgICAgfSk7XHJcbiAgICAgKiAgfVxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIHN0YWNrKCk6IFN0YWNrVHJhY2U7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogYGV4cGVjdGAgdGVybWluYXRlcyB3aXRoIGBwYW5pY2AgaWYgdGhlIGBSZXN1bHRgIGlzIGBFcnJgLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipXYXJuaW5nKioqXHJcbiAgICAgKiBSZXNlcnZlZCBmb3IgZGVidWdnaW5nIG9yIHVucmVjb3ZlcmFibGUgZXJyb3JzLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPjtcclxuICAgICAqICBsZXQgc3RhdHVzOiAyMDBuID0gcmVzdWx0LmV4cGVjdChcIlRoaXMgaXMgdW5leHBlY3RlZCBhbmQgdW5yZWNvdmVyYWJsZS5cIik7XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgZXhwZWN0KG1lc3NhZ2U6IHN0cmluZyk6IG5ldmVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIEVuc3VyZXMgdGhhdCB0aGUgYFJlc3VsdGAgaXMgYW4gYEVycmAgYW5kIHJldHJpZXZlcyB0aGUgZXJyb3IgdmFsdWUgaW5zaWRlLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipXYXJuaW5nKioqXHJcbiAgICAgKiBSZXNlcnZlZCBmb3IgZGVidWdnaW5nIG9yIHVucmVjb3ZlcmFibGUgZXJyb3JzLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPjtcclxuICAgICAqICBsZXQgc3RhdHVzOiA0MDRuID0gcmVzdWx0LmV4cGVjdEVycihcIlRoaXMgaXMgdW5leHBlY3RlZCBhbmQgdW5yZWNvdmVyYWJsZS5cIik7XHJcbiAgICAgKiBgYGBcclxuICAgICovXHJcbiAgICBleHBlY3RFcnIoX186IHVua25vd24pOiBUMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIHZhbHVlIG9mIGFuIGBPa2AsIG9yIGZhbGxzIGJhY2sgdG8gdGhlIHByb3ZpZGVkIHZhbHVlIGlmIGl0XHUyMDE5cyBhbiBgRXJyYC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj4gPSBFcnIoNDA0bik7XHJcbiAgICAgKiAgbGV0IHN0YXR1czogMjAwbiA9IHJlc3VsdC51bmxvY2tPcigyMDBuKTtcclxuICAgICAqICBjb25zb2xlLmxvZyhzdGF0dXMpOyAvLy8gMjAwbi5cclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICB1bmxvY2tPcjxUMj4oZmFsbGJhY2s6IFQyKTogVDI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogQ2hhaW5zIGFuIHRhc2sgdW50aWwgdGhlIGZpcnN0IGBFcnJgIGlzIGVuY291bnRlcmVkLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPiA9IEVycig0MDRuKTtcclxuICAgICAqICByZXN1bHRcclxuICAgICAqICAgICAgLmFuZCh2YWx1ZSA9PiB7XHJcbiAgICAgKiAgICAgICAgICAvLy8gVGFzayBpcyBza2lwcGVkIGJlY2F1c2UgYFJlc3VsdGAgaXMgYW4gYEVycmAuXHJcbiAgICAgKiAgICAgICAgICAvLy8gLi4uXHJcbiAgICAgKiAgICAgICAgICByZXR1cm4gT2sodmFsdWUgKyAxbik7XHJcbiAgICAgKiAgICAgIH0pXHJcbiAgICAgKiAgICAgIC5hbmQodmFsdWUgPT4ge1xyXG4gICAgICogICAgICAgICAgLy8vIFRhc2sgaXMgc2tpcHBlZCBiZWNhdXNlIGBSZXN1bHRgIGlzIGFuIGBFcnJgLlxyXG4gICAgICogICAgICAgICAgLy8vIC4uLlxyXG4gICAgICogICAgICB9KTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBhbmQoX186IHVua25vd24pOiBFcnI8VDE+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIFRyYW5zZm9ybXMgdGhlIGBPa2AgdmFsdWUgaWYgcHJlc2VudCwgYnV0IGlmIHRoaXMgaXMgYWxyZWFkeSBhbiBgRXJyYCwgaXQgcmVtYWlucyB1bmNoYW5nZWQuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDA6IFJlc3VsdDwyMDBuLCA0MDRuPiA9IE9rKDIwMG4pO1xyXG4gICAgICogIGxldCByZXN1bHQxOiBSZXN1bHQ8MjAxbiwgNDA0bj4gPSByZXN1bHQubWFwKHZhbHVlID0+IHtcclxuICAgICAqICAgICAgLy8vIFRhc2sgaXMgcnVuIGJlY2F1c2UgYFJlc3VsdGAgaXMgYE9rYC5cclxuICAgICAqICAgICAgLy8vIC4uLlxyXG4gICAgICogICAgICByZXR1cm4gdmFsdWUgKyAxbjtcclxuICAgICAqICB9KTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBtYXAoX186IHVua25vd24pOiBFcnI8VDE+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIFRyYW5zZm9ybXMgdGhlIGVycm9yIGNvbnRhaW5lZCBpbiB0aGUgYEVycmAgdXNpbmcgdGhlIHByb3ZpZGVkIGB0YXNrYCBmdW5jdGlvbi5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj4gPSBFcnIoNDA0bik7XHJcbiAgICAgKiAgcmVzdWx0XHJcbiAgICAgKiAgICAgIC5tYXBFcnIoZSA9PiB7XHJcbiAgICAgKiAgICAgICAgICByZXR1cm4gZSArIDFuO1xyXG4gICAgICogICAgICB9KVxyXG4gICAgICogICAgICAuaW5zcGVjdCgpOyAvLy8gNDA1bi5cclxuICAgICAqIGBgYFxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPiA9IE9rKDIwMG4pO1xyXG4gICAgICogIHJlc3VsdFxyXG4gICAgICogICAgICAubWFwRXJyKGUgPT4ge1xyXG4gICAgICogICAgICAgICAgLy8vIFRhc2sgaXMgcnVuIGJlY2F1c2UgYFJlc3VsdGAgaXMgYE9rYC5cclxuICAgICAqICAgICAgICAgIC8vLyAuLi5cclxuICAgICAqICAgICAgfSk7XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgbWFwRXJyPFQyPih0YXNrOiBGdW5jdGlvbjxUMSwgVDI+KTogRXJyPFQyPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBSZWNvdmVycyBmcm9tIHRoZSBjdXJyZW50IGVycm9yIGJ5IGFwcGx5aW5nIGEgcmVjb3ZlcnkgZnVuY3Rpb24sIHRyYW5zZm9ybWluZyB0aGUgYEVycmAgaW50byBhbiBgT2tgLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPiA9IEVycig0MDRuKTtcclxuICAgICAqICBsZXQgc3RhdHVzOiAyMDBuID0gcmVzdWx0XHJcbiAgICAgKiAgICAgIC5yZWNvdmVyKCgpID0+IHtcclxuICAgICAqICAgICAgICAgIHJldHVybiAyMDBuO1xyXG4gICAgICogICAgICB9KVxyXG4gICAgICogICAgICAudW5sb2NrKCk7XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgcmVjb3ZlcjxUMj4odGFzazogRnVuY3Rpb248VDEsIFQyPik6IE9rPFQyPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBBcHBsaWVzIGEgdHJhbnNmb3JtYXRpb24gdG8gdGhlIGBPa2AgdmFsdWUgYW5kIHJldHVybnMgYW4gYEVycmAgaW5zdGFuY2Ugd2l0aCB0aGUgdHJhbnNmb3JtZWQgdmFsdWUuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+ID0gT2soMjAwbik7XHJcbiAgICAgKiAgbGV0IGU6IDQwNG4gPSByZXN1bHRcclxuICAgICAqICAgICAgLmRlZ3JhZGUoKCkgPT4ge1xyXG4gICAgICogICAgICAgICAgcmV0dXJuIDQwNG47XHJcbiAgICAgKiAgICAgIH0pXHJcbiAgICAgKiAgICAgIC5pbnNwZWN0KCk7XHJcbiAgICAgKiAgY29uc29sZS5sb2coZSk7IC8vLyA0MDRuLlxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIGRlZ3JhZGUoX186IHVua25vd24pOiBFcnI8VDE+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIENvbnZlcnRzIGEgYFJlc3VsdDxUMSwgVDI+YCB0byBhbiBgT3B0aW9uPFQxPmAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+O1xyXG4gICAgICogIGxldCBvcHRpb246IE9wdGlvbjwyMDBuPiA9IHJlc3VsdC50b09wdGlvbigpO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIHRvT3B0aW9uKCk6IE9wdGlvbjxuZXZlcj47XHJcbn07XHJcblxyXG4vKipcclxuICogKioqQnJpZWYqKipcclxuICogVGhlIGZhaWxlZCBzdGF0ZSBvZiBhIGBSZXN1bHRgLlxyXG4gKiBcclxuICogKioqV2FybmluZyoqKlxyXG4gKiBBbnkgb3BlcmF0aW9uIGF0dGVtcHRpbmcgdG8gYWNjZXNzIGEgYFJlc3VsdGAgbXVzdCBzYWZlbHkgaGFuZGxlIHRoZSBgRXJyYCBzdGF0ZSBvciB0ZXJtaW5hdGUgd2l0aCBhbiBlcnJvci5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBFcnI8VDE+KF92YWx1ZTogVDEpOiBFcnI8VDE+IHtcclxuICAgIGxldCBfdGhpczogRXJyPFQxPjtcclxuICAgIGxldCBfc3RhY2s6IFN0YWNrVHJhY2U7XHJcbiAgICBcclxuICAgIC8qKiBAY29uc3RydWN0b3IgKi8ge1xyXG4gICAgICAgIF9zdGFjayA9IFN0YWNrVHJhY2UoRXJyKTtcclxuICAgICAgICByZXR1cm4gX3RoaXMgPSB7XHJcbiAgICAgICAgICAgIG9rLFxyXG4gICAgICAgICAgICBlcnIsXHJcbiAgICAgICAgICAgIGluc3BlY3QsXHJcbiAgICAgICAgICAgIHN0YWNrLFxyXG4gICAgICAgICAgICBleHBlY3QsXHJcbiAgICAgICAgICAgIGV4cGVjdEVycixcclxuICAgICAgICAgICAgdW5sb2NrT3IsXHJcbiAgICAgICAgICAgIGFuZCxcclxuICAgICAgICAgICAgbWFwLFxyXG4gICAgICAgICAgICBtYXBFcnIsXHJcbiAgICAgICAgICAgIHJlY292ZXIsXHJcbiAgICAgICAgICAgIGRlZ3JhZGUsXHJcbiAgICAgICAgICAgIHRvT3B0aW9uXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBvaygpOiB0aGlzIGlzIE9rPHVua25vd24+IHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZXJyKCk6IHRoaXMgaXMgRXJyPFQxPiB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaW5zcGVjdCgpOiBUMSB7XHJcbiAgICAgICAgcmV0dXJuIF92YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzdGFjaygpOiBTdGFja1RyYWNlIHtcclxuICAgICAgICByZXR1cm4gX3N0YWNrO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGV4cGVjdChtZXNzYWdlOiBzdHJpbmcpOiBuZXZlciB7XHJcbiAgICAgICAgbGV0IGU6IFQxID0gaW5zcGVjdCgpO1xyXG4gICAgICAgIGxldCBjb2RlTzogT3B0aW9uPHN0cmluZz4gPSBOb25lO1xyXG4gICAgICAgIGlmIChlICE9PSBudWxsICYmIGUgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZSA9PT0gXCJvYmplY3RcIiAmJiBcImNvZGVcIiBpbiBlICYmIHR5cGVvZiBlLmNvZGUgPT09IFwic3RyaW5nXCIpIGNvZGVPID0gU29tZShlLmNvZGUpO1xyXG4gICAgICAgIHBhbmljKEVycm9yKHtcclxuICAgICAgICAgICAgY29kZTogY29kZU8udW5sb2NrT3IoXCJFUlJfVFJJRURfVU5XUkFQX0VSUlwiKSxcclxuICAgICAgICAgICAgbWVzc2FnZTogU29tZShbXHJcbiAgICAgICAgICAgICAgICBcIkZhdGFsIEVycm9yXCIgKyBcIiA+Pj4gXCIgKyBcIlRyaWVkIHRvIHVud3JhcCBhbiBlcnJvciB2YWx1ZS5cIixcclxuICAgICAgICAgICAgICAgIFwiXCIsXHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlXHJcbiAgICAgICAgICAgIF0uam9pbihcIlxcblwiKSksXHJcbiAgICAgICAgICAgIHBheWxvYWQ6IE5vbmUsXHJcbiAgICAgICAgICAgIHN0YWNrOiBzdGFjaygpXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGV4cGVjdEVycihfXzogdW5rbm93bik6IFQxIHtcclxuICAgICAgICByZXR1cm4gaW5zcGVjdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHVubG9ja09yPFQyPihmYWxsYmFjazogVDIpOiBUMiB7XHJcbiAgICAgICAgcmV0dXJuIGZhbGxiYWNrO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGFuZChfXzogdW5rbm93bik6IEVycjxUMT4ge1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtYXAoX186IHVua25vd24pOiBFcnI8VDE+IHtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbWFwRXJyPFQyPih0YXNrOiBGdW5jdGlvbjxUMSwgVDI+KTogRXJyPFQyPiB7XHJcbiAgICAgICAgcmV0dXJuIEVycih0YXNrKGluc3BlY3QoKSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJlY292ZXI8VDI+KHRhc2s6IEZ1bmN0aW9uPFQxLCBUMj4pOiBPazxUMj4ge1xyXG4gICAgICAgIHJldHVybiBPayh0YXNrKGluc3BlY3QoKSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRlZ3JhZGUoX186IHVua25vd24pOiBFcnI8VDE+IHtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdG9PcHRpb24oKTogT3B0aW9uPG5ldmVyPiB7XHJcbiAgICAgICAgcmV0dXJuIE5vbmU7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4iLCAiaW1wb3J0IHR5cGUgeyBDbG9zdXJlIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB0eXBlIHsgT3B0aW9uIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IElOVEVSTkFMX0VSUk9SX01FU1NBR0UgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgQWxsb2MgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgRGVBbGxvYyB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBTb21lIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IE5vbmUgfSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcbmV4cG9ydCB0eXBlIER5bjxUMT4gPSBBbGxvYzxUMT4gfCBEZUFsbG9jPFQxPjtcclxuXHJcbi8qKlxyXG4gKiAqKipCcmllZioqKlxyXG4gKiBBIGR5bmFtaWMgcmVzb3VyY2UgbWFuYWdlbWVudCBwYXR0ZXJuLCBhbGxvd2luZyBmb3JcclxuICogYWxsb2NhdGlvbiBhbmQgZGVhbGxvY2F0aW9uIG9mIHJlc291cmNlcyB3aXRoIHByb3BlciBsaWZlY3ljbGUgaGFuZGxpbmcuXHJcbiAqIFxyXG4gKiAqKipXYXJuaW5nKioqXHJcbiAqIFRoZSBgRHluYCB3cmFwcGVyIG11c3QgYmUgcHJvcGVybHkgbWFuYWdlZCB0byBhdm9pZCBtZW1vcnkgbGVha3MuIElmIHRoZSB3cmFwcGVyIGl0c2VsZiBpcyBnYXJiYWdlIGNvbGxlY3RlZCBcclxuICogd2l0aG91dCBpdHMgY29udGVudCBiZWluZyBleHBsaWNpdGx5IGRlYWxsb2NhdGVkLCB0aGUgcmVzb3VyY2VzIGl0IG1hbmFnZXMgd2lsbCBub3QgYmUgcmVjeWNsZWQgXHJcbiAqIGFuZCBtYWRlIGF2YWlsYWJsZSBmb3IgcmV1c2UuIEVuc3VyZSBhbGwgYWxsb2NhdGVkIHJlc291cmNlcyBhcmUgZGVhbGxvY2F0ZWQgYmVmb3JlIHRoZSBgRHluYCBpbnN0YW5jZSBnb2VzIG91dCBvZiBzY29wZS5cclxuICogXHJcbiAqICoqKkV4YW1wbGUqKipcclxuICogYGBgdHNcclxuICogIHR5cGUgQ2FyID0ge1xyXG4gKiAgICAgIGRyaXZlKCk6IHZvaWQ7XHJcbiAqICB9O1xyXG4gKiBcclxuICogIGNvbnN0IENhcjogRHluQ29uc3RydWN0b3I8Q2FyLCBbX21vZGVsOiBzdHJpbmddPiA9IER5bihcclxuICogICAgICAoX21vZGVsOiBzdHJpbmcpID0+IHtcclxuICogICAgICAgICAgY29uc3RydWN0b3Ige1xyXG4gKiAgICAgICAgICAgICAgcmV0dXJuIHsgZHJpdmUgfTtcclxuICogICAgICAgICAgfVxyXG4gKiBcclxuICogICAgICAgICAgZnVuY3Rpb24gZHJpdmUoKTogdm9pZCB7XHJcbiAqICAgICAgICAgICAgICByZXR1cm4gXCJWcm9vbS5cIjtcclxuICogICAgICAgICAgfVxyXG4gKiAgICAgIH0sXHJcbiAqICAgICAgY2FyID0+IHtcclxuICogICAgICAgICAgLy8vIFJlc2V0IGNhciBvciBhbnkgdGFza3MgYmVmb3JlIGl0IGlzIG1hZGUgYXZhaWxhYmxlIGFnYWluLlxyXG4gKiAgICAgICAgICAvLy8gLi4uXHJcbiAqICAgICAgICAgIHJldHVybiBjYXI7XHJcbiAqICAgICAgfSwgMzJuLCBcIk1vZGVsVFwiXHJcbiAqICApO1xyXG4gKiBcclxuICogIGxldCBjYXI6IER5bjxDYXI+ID0gQ2FyKFwiTW9kZWxGXCIpO1xyXG4gKiAgY2FyLmRlQWxsb2MoKTtcclxuICogIGNhci5tYXAoY2FyID0+IHtcclxuICogICAgICAvLy8gV2lsbCBub3QgcnVuIGJlY2F1c2UgYGNhcmAgaGFzIGJlZW4gZGVhbGxvY2F0ZWQuXHJcbiAqICAgICAgLy8vIC4uLlxyXG4gKiAgfSk7XHJcbiAqIGBgYFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIER5bjxUMSwgVDIgZXh0ZW5kcyBBcnJheTx1bmtub3duPj4oX2NvbnN0cnVjdG9yOiBDbG9zdXJlPFQyLCBUMT4sIF9vbkRlQWxsb2M6IENsb3N1cmU8W1QxXSwgVDE+LCBfbG9hZDogYmlnaW50LCAuLi5fb25Mb2FkUGF5bG9hZDogVDIpOiBDbG9zdXJlPFQyLCBEeW48VDE+PiB7XHJcbiAgICBsZXQgX2F2YWlsYWJsZTogTWFwPGJpZ2ludCwgVDE+O1xyXG4gICAgbGV0IF9jb3VudDogYmlnaW50O1xyXG5cclxuICAgIC8qKiBAY29uc3RydWN0b3IgKi8ge1xyXG4gICAgICAgIF9hdmFpbGFibGUgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgX2NvdW50ID0gMG47XHJcbiAgICAgICAgbGV0IGk6IGJpZ2ludCA9IDBuO1xyXG4gICAgICAgIHdoaWxlIChpIDwgX2xvYWQpIHtcclxuICAgICAgICAgICAgbGV0IGtleTogYmlnaW50ID0gX2dlbktleSgpO1xyXG4gICAgICAgICAgICBfYXZhaWxhYmxlLnNldChrZXksIF9jb25zdHJ1Y3RvciguLi5fb25Mb2FkUGF5bG9hZCkpO1xyXG4gICAgICAgICAgICBpICsrO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKC4uLnBheWxvYWQ6IFQyKTogRHluPFQxPiB7XHJcbiAgICAgICAgICAgIGxldCBfa2V5OiBPcHRpb248YmlnaW50PjtcclxuICAgICAgICAgICAgbGV0IF90aGlzOiBEeW48VDE+O1xyXG4gICAgXHJcbiAgICAgICAgICAgIC8qKiBAY29uc3RydWN0b3IgKi8ge1xyXG4gICAgICAgICAgICAgICAgX2tleSA9IE5vbmU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMgPSBhbGxvYygpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBhbGxvYygpOiBBbGxvYzxUMT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9yZWN5Y2xlZEtleSgpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRvUmVzdWx0KHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICAubWFwKGtleSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9rZXkgPSBTb21lKGtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBBbGxvYyhfcmVjeWxlZChrZXkpLCB7IGRlQWxsb2MgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAucmVjb3ZlcigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9rZXkgPSBTb21lKF9nZW5LZXkoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBBbGxvYyhfY29uc3RydWN0b3IoLi4ucGF5bG9hZCksIHsgZGVBbGxvYyB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC51bmxvY2soKTsgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGRlQWxsb2MoKTogRGVBbGxvYzxUMT4ge1xyXG4gICAgICAgICAgICAgICAgX2tleVxyXG4gICAgICAgICAgICAgICAgICAgIC50b1Jlc3VsdCh1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgLm1hcChrZXkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLy8gSWYgdGhlIGtleSBpcyBhdmFpbGFibGUgdGhlbiBpdCBpcyBhbGxvY2F0ZWQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9rZXkgPSBOb25lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfcmVjeWxlKGtleSwgX29uRGVBbGxvYyhfdGhpcy5leHBlY3QoXCJEeW46IENvdWxkIG5vdCBkZWFsbG9jYXRlIHJlc291cmNlIGJ1dCB0aGUga2V5IHdhcyBhdmFpbGFibGUuXCIgKyBJTlRFUk5BTF9FUlJPUl9NRVNTQUdFKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcyA9IERlQWxsb2MoeyBkZUFsbG9jIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfZ2VuS2V5KCk6IGJpZ2ludCB7XHJcbiAgICAgICAgcmV0dXJuIF9jb3VudCArPSAxbjtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfcmVjeWNsZWRLZXkoKTogT3B0aW9uPGJpZ2ludD4ge1xyXG4gICAgICAgIGxldCBrZXk6IGJpZ2ludCB8IHVuZGVmaW5lZCA9IF9hdmFpbGFibGVcclxuICAgICAgICAgICAgLmtleXMoKVxyXG4gICAgICAgICAgICAudG9BcnJheSgpXHJcbiAgICAgICAgICAgIC5hdCgwKTtcclxuICAgICAgICBpZiAoIWtleSkgcmV0dXJuIE5vbmU7XHJcbiAgICAgICAgcmV0dXJuIFNvbWUoa2V5KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfcmVjeWxlZChrZXk6IGJpZ2ludCk6IFQxIHtcclxuICAgICAgICBsZXQgdmFsdWU6IFQxID0gX2F2YWlsYWJsZS5nZXQoa2V5KSE7XHJcbiAgICAgICAgX2F2YWlsYWJsZS5kZWxldGUoa2V5KTtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX3JlY3lsZShrZXk6IGJpZ2ludCwgdmFsdWU6IFQxKTogdm9pZCB7XHJcbiAgICAgICAgX2F2YWlsYWJsZS5zZXQoa2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG59IiwgImltcG9ydCB0eXBlIHsgRHluV3JhcHBlciB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBOb25lIH0gZnJvbSBcIkByb290XCJcclxuXHJcbmV4cG9ydCB0eXBlIERlQWxsb2M8VDE+ID0gXHJcbiAgICAmIER5bldyYXBwZXI8VDE+XHJcbiAgICAmIE5vbmU7XHJcblxyXG4vKipcclxuICogKioqQnJpZWYqKipcclxuICogVGhlIGRlYWxsb2NhdGVkIHN0YXRlIG9mIGFuIGFsbG9jYXRlZCByZXNvdXJjZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBEZUFsbG9jPFQxPihfZHluOiBEeW5XcmFwcGVyPFQxPik6IERlQWxsb2M8VDE+IHtcclxuICAgIC8qKiBAY29uc3RydWN0b3IgKi8ge1xyXG4gICAgICAgIHJldHVybiB7IC4uLiBOb25lLCAuLi4gX2R5biB9O1xyXG4gICAgfVxyXG59IiwgImltcG9ydCB0eXBlIHsgRHluV3JhcHBlciB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgdHlwZSB7IFVubG9ja2VkV3JhcHBlciB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBTb21lIH0gZnJvbSBcIkByb290XCI7XHJcblxyXG5leHBvcnQgdHlwZSBBbGxvYzxUMT4gPVxyXG4gICAgJiBEeW5XcmFwcGVyPFQxPlxyXG4gICAgJiBVbmxvY2tlZFdyYXBwZXI8VDE+XHJcbiAgICAmIFNvbWU8VDE+O1xyXG5cclxuLyoqXHJcbiAqICoqKkJyaWVmKioqXHJcbiAqIFRoZSBhbGxvY2F0ZWQgc3RhdGUgb2YgYW4gYWxsb2NhdGVkIHJlc291cmNlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIEFsbG9jPFQxPihfdmFsdWU6IFQxLCBfZHluOiBEeW5XcmFwcGVyPFQxPik6IEFsbG9jPFQxPiB7XHJcbiAgICAvKiogQGNvbnN0cnVjdG9yICovIHtcclxuICAgICAgICByZXR1cm4geyAuLi4gU29tZShfdmFsdWUpLCAuLi4gX2R5biB9O1xyXG4gICAgfVxyXG59IiwgImltcG9ydCB7IE9wdGlvbiB9IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGFsbE8gPSBPcHRpb24uYWxsO1xyXG5leHBvcnQgY29uc3QgYW55TyA9IE9wdGlvbi5hbnk7IiwgImltcG9ydCB0eXBlIHsgRnVuY3Rpb24gfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHR5cGUgeyBPcHRpb24gfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHR5cGUgeyBVbmxvY2tlZFdyYXBwZXIgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgTm9uZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBPayB9IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuZXhwb3J0IHR5cGUgU29tZTxUMT4gPSBcclxuICAgICYgVW5sb2NrZWRXcmFwcGVyPFQxPlxyXG4gICAgJiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogYHNvbWVgIGNoZWNrcyBpZiB0aGUgY3VycmVudCBpbnN0YW5jZSBpcyBgU29tZWAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IG9wdGlvbjogT3B0aW9uPDIwMG4+O1xyXG4gICAgICogIGlmIChvcHRpb24uc29tZSgpKSB7XHJcbiAgICAgKiAgICAgIGxldCB2YWx1ZTogMjAwbiA9IG9wdGlvbi51bmxvY2soKTtcclxuICAgICAqICAgICAgLy8vIC4uLlxyXG4gICAgICogIH1cclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBzb21lKCk6IHRoaXMgaXMgU29tZTxUMT47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogYG5vbmVgIGNoZWNrcyBpZiB0aGUgY3VycmVudCBpbnN0YW5jZSBpcyBgTm9uZWAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IG9wdGlvbjogT3B0aW9uPDIwMG4+O1xyXG4gICAgICogIGlmIChvcHRpb24ubm9uZSgpKSB7XHJcbiAgICAgKiAgICAgIC8vLyBgT3B0aW9uYCBjYW5ub3QgYHVubG9ja2AgYmVjYXVzZSBpdCBpcyBgTm9uZWAuXHJcbiAgICAgKiAgICAgIC8vLyAuLi5cclxuICAgICAqICB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgbm9uZSgpOiB0aGlzIGlzIE5vbmU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogYGV4cGVjdGAgdGVybWluYXRlcyB3aXRoIGBwYW5pY2AgaWYgdGhlIGBPcHRpb25gIGlzIGBOb25lYC5cclxuICAgICAqIFxyXG4gICAgICogKioqV2FybmluZyoqKlxyXG4gICAgICogUmVzZXJ2ZWQgZm9yIGRlYnVnZ2luZyBvciB1bnJlY292ZXJhYmxlIGVycm9ycy5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgb3B0aW9uOiBPcHRpb248MjAwbj47XHJcbiAgICAgKiAgbGV0IHN0YXR1czogMjAwbiA9IG9wdGlvbi5leHBlY3QoXCJUaGlzIGlzIHVuZXhwZWN0ZWQgYW5kIHVucmVjb3ZlcmFibGUuXCIpO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIGV4cGVjdChfXzogdW5rbm93bik6IFQxO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIFJldHJpZXZlcyB0aGUgdmFsdWUgb2YgYSBgU29tZWAsIG9yIGZhbGxzIGJhY2sgdG8gdGhlIHByb3ZpZGVkIHZhbHVlIGlmIGl0XHUyMDE5cyBgTm9uZWAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IG9wdGlvbjogT3B0aW9uPDIwMG4+ID0gTm9uZTtcclxuICAgICAqICBsZXQgc3RhdHVzOiAyMDBuID0gb3B0aW9uLnVubG9ja09yKDIwMG4pO1xyXG4gICAgICogIGNvbnNvbGUubG9nKHN0YXR1cyk7IC8vLyAyMDBuLlxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIHVubG9ja09yKF9fOiB1bmtub3duKTogVDE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogQ2hhaW5zIGFuIHRhc2sgdW50aWwgdGhlIGZpcnN0IGBOb25lYCBpcyBlbmNvdW50ZXJlZC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgb3B0aW9uOiBPcHRpb248MjAwbj4gPSBOb25lO1xyXG4gICAgICogIG9wdGlvblxyXG4gICAgICogICAgICAuYW5kKHZhbHVlID0+IHtcclxuICAgICAqICAgICAgICAgIC8vLyBUYXNrIGlzIHNraXBwZWQgYmVjYXVzZSBgT3B0aW9uYCBpcyBgTm9uZWAuXHJcbiAgICAgKiAgICAgICAgICAvLy8gLi4uXHJcbiAgICAgKiAgICAgICAgICByZXR1cm4gU29tZSh2YWx1ZSArIDFuKTtcclxuICAgICAqICAgICAgfSlcclxuICAgICAqICAgICAgLmFuZCh2YWx1ZSA9PiB7XHJcbiAgICAgKiAgICAgICAgICAvLy8gVGFzayBpcyBza2lwcGVkIGJlY2F1c2UgYE9wdGlvbmAgaXMgYE5vbmVgLlxyXG4gICAgICogICAgICAgICAgLy8vIC4uLlxyXG4gICAgICogICAgICB9KTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBhbmQ8VDI+KHRhc2s6IEZ1bmN0aW9uPFQxLCBPcHRpb248VDI+Pik6IE9wdGlvbjxUMj47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogVHJhbnNmb3JtcyB0aGUgYFNvbWVgIHZhbHVlIGlmIHByZXNlbnQsIGJ1dCBpZiB0aGlzIGlzIGFscmVhZHkgYW4gYE5vbmVgLCBpdCByZW1haW5zIHVuY2hhbmdlZC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgb3B0aW9uMDogT3B0aW9uPDIwMG4+ID0gU29tZSgyMDBuKTtcclxuICAgICAqICBsZXQgb3B0aW9uMTogT3B0aW9uPDIwMW4+ID0gb3B0aW9uLm1hcCh2YWx1ZSA9PiB7XHJcbiAgICAgKiAgICAgIC8vLyBUYXNrIGlzIHJ1biBiZWNhdXNlIGBPcHRpb25gIGlzIGBTb21lYC5cclxuICAgICAqICAgICAgLy8vIC4uLlxyXG4gICAgICogICAgICByZXR1cm4gdmFsdWUgKyAxbjtcclxuICAgICAqICB9KTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBtYXA8VDI+KHRhc2s6IEZ1bmN0aW9uPFQxLCBUMj4pOiBTb21lPFQyPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBDb252ZXJ0cyBhbiBgT3B0aW9uPFQxPmAgdG8gYSBgUmVzdWx0PFQxLCBUMj5gLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCBvcHRpb246IE9wdGlvbjwyMDBuPjtcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj4gPSBvcHRpb24udG9SZXN1bHQoNDA0bik7XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgdG9SZXN1bHQoX186IHVua25vd24pOiBPazxUMT47XHJcbn07XHJcblxyXG4vKipcclxuICogKioqQnJpZWYqKipcclxuICogVGhlIHZhbHVlIHdpdGhpbiBhbiBgT3B0aW9uYC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBTb21lPFQxPihfdmFsdWU6IFQxKTogU29tZTxUMT4ge1xyXG4gICAgLyoqIEBjb25zdHJ1Y3RvciAqLyB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc29tZSxcclxuICAgICAgICAgICAgbm9uZSxcclxuICAgICAgICAgICAgZXhwZWN0LFxyXG4gICAgICAgICAgICB1bmxvY2ssXHJcbiAgICAgICAgICAgIHVubG9ja09yLFxyXG4gICAgICAgICAgICBhbmQsXHJcbiAgICAgICAgICAgIG1hcCxcclxuICAgICAgICAgICAgdG9SZXN1bHRcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNvbWUoKTogdGhpcyBpcyBTb21lPFQxPiB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbm9uZSgpOiB0aGlzIGlzIE5vbmUge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBleHBlY3QoX186IHVua25vd24pOiBUMSB7XHJcbiAgICAgICAgcmV0dXJuIF92YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB1bmxvY2soKTogVDEge1xyXG4gICAgICAgIHJldHVybiBfdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdW5sb2NrT3IoX186IHVua25vd24pOiBUMSB7XHJcbiAgICAgICAgcmV0dXJuIF92YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBhbmQ8VDI+KHRhc2s6IEZ1bmN0aW9uPFQxLCBPcHRpb248VDI+Pik6IE9wdGlvbjxUMj4ge1xyXG4gICAgICAgIHJldHVybiB0YXNrKF92YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbWFwPFQyPih0YXNrOiBGdW5jdGlvbjxUMSwgVDI+KTogU29tZTxUMj4ge1xyXG4gICAgICAgIHJldHVybiBTb21lKHRhc2soX3ZhbHVlKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdG9SZXN1bHQoX186IHVua25vd24pOiBPazxUMT4ge1xyXG4gICAgICAgIHJldHVybiBPayhfdmFsdWUpO1xyXG4gICAgfVxyXG59IiwgImltcG9ydCB7IFNvbWUgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgRXJyIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IEVycm9yIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IHBhbmljIH0gZnJvbSBcIkByb290XCI7XHJcblxyXG5leHBvcnQgdHlwZSBOb25lID0ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIGBzb21lYCBjaGVja3MgaWYgdGhlIGN1cnJlbnQgaW5zdGFuY2UgaXMgYFNvbWVgLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCBvcHRpb246IE9wdGlvbjwyMDBuPjtcclxuICAgICAqICBpZiAob3B0aW9uLnNvbWUoKSkge1xyXG4gICAgICogICAgICBsZXQgdmFsdWU6IDIwMG4gPSBvcHRpb24udW5sb2NrKCk7XHJcbiAgICAgKiAgICAgIC8vLyAuLi5cclxuICAgICAqICB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgc29tZSgpOiB0aGlzIGlzIFNvbWU8dW5rbm93bj47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogYG5vbmVgIGNoZWNrcyBpZiB0aGUgY3VycmVudCBpbnN0YW5jZSBpcyBgTm9uZWAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IG9wdGlvbjogT3B0aW9uPDIwMG4+O1xyXG4gICAgICogIGlmIChvcHRpb24ubm9uZSgpKSB7XHJcbiAgICAgKiAgICAgIC8vLyBgT3B0aW9uYCBjYW5ub3QgYHVubG9ja2AgYmVjYXVzZSBpdCBpcyBgTm9uZWAuXHJcbiAgICAgKiAgICAgIC8vLyAuLi5cclxuICAgICAqICB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgbm9uZSgpOiB0aGlzIGlzIE5vbmU7XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIGBleHBlY3RgIHRlcm1pbmF0ZXMgd2l0aCBgcGFuaWNgIGlmIHRoZSBgT3B0aW9uYCBpcyBgTm9uZWAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKldhcm5pbmcqKipcclxuICAgICAqIFJlc2VydmVkIGZvciBkZWJ1Z2dpbmcgb3IgdW5yZWNvdmVyYWJsZSBlcnJvcnMuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IG9wdGlvbjogT3B0aW9uPDIwMG4+O1xyXG4gICAgICogIGxldCBzdGF0dXM6IDIwMG4gPSBvcHRpb24uZXhwZWN0KFwiVGhpcyBpcyB1bmV4cGVjdGVkIGFuZCB1bnJlY292ZXJhYmxlLlwiKTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBleHBlY3QobWVzc2FnZTogc3RyaW5nKTogbmV2ZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogUmV0cmlldmVzIHRoZSB2YWx1ZSBvZiBhIGBTb21lYCwgb3IgZmFsbHMgYmFjayB0byB0aGUgcHJvdmlkZWQgdmFsdWUgaWYgaXRcdTIwMTlzIGBOb25lYC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgb3B0aW9uOiBPcHRpb248MjAwbj4gPSBOb25lO1xyXG4gICAgICogIGxldCBzdGF0dXM6IDIwMG4gPSBvcHRpb24udW5sb2NrT3IoMjAwbik7XHJcbiAgICAgKiAgY29uc29sZS5sb2coc3RhdHVzKTsgLy8vIDIwMG4uXHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgdW5sb2NrT3I8VDI+KGZhbGxiYWNrOiBUMik6IFQyO1xyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBDaGFpbnMgYW4gdGFzayB1bnRpbCB0aGUgZmlyc3QgYE5vbmVgIGlzIGVuY291bnRlcmVkLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCBvcHRpb246IE9wdGlvbjwyMDBuPiA9IE5vbmU7XHJcbiAgICAgKiAgb3B0aW9uXHJcbiAgICAgKiAgICAgIC5hbmQodmFsdWUgPT4ge1xyXG4gICAgICogICAgICAgICAgLy8vIFRhc2sgaXMgc2tpcHBlZCBiZWNhdXNlIGBPcHRpb25gIGlzIGBOb25lYC5cclxuICAgICAqICAgICAgICAgIC8vLyAuLi5cclxuICAgICAqICAgICAgICAgIHJldHVybiBTb21lKHZhbHVlICsgMW4pO1xyXG4gICAgICogICAgICB9KVxyXG4gICAgICogICAgICAuYW5kKHZhbHVlID0+IHtcclxuICAgICAqICAgICAgICAgIC8vLyBUYXNrIGlzIHNraXBwZWQgYmVjYXVzZSBgT3B0aW9uYCBpcyBgTm9uZWAuXHJcbiAgICAgKiAgICAgICAgICAvLy8gLi4uXHJcbiAgICAgKiAgICAgIH0pO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIGFuZChfXzogdW5rbm93bik6IE5vbmU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogVHJhbnNmb3JtcyB0aGUgYFNvbWVgIHZhbHVlIGlmIHByZXNlbnQsIGJ1dCBpZiB0aGlzIGlzIGFscmVhZHkgYW4gYE5vbmVgLCBpdCByZW1haW5zIHVuY2hhbmdlZC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgb3B0aW9uMDogT3B0aW9uPDIwMG4+ID0gU29tZSgyMDBuKTtcclxuICAgICAqICBsZXQgb3B0aW9uMTogT3B0aW9uPDIwMW4+ID0gb3B0aW9uLm1hcCh2YWx1ZSA9PiB7XHJcbiAgICAgKiAgICAgIC8vLyBUYXNrIGlzIHJ1biBiZWNhdXNlIGBPcHRpb25gIGlzIGBTb21lYC5cclxuICAgICAqICAgICAgLy8vIC4uLlxyXG4gICAgICogICAgICByZXR1cm4gdmFsdWUgKyAxbjtcclxuICAgICAqICB9KTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBtYXAoX186IHVua25vd24pOiBOb25lO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIENvbnZlcnRzIGFuIGBPcHRpb248VDE+YCB0byBhIGBSZXN1bHQ8VDEsIFQyPmAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IG9wdGlvbjogT3B0aW9uPDIwMG4+O1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPiA9IG9wdGlvbi50b1Jlc3VsdCg0MDRuKTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICB0b1Jlc3VsdDxUMT4oZTogVDEpOiBFcnI8VDE+O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqICoqKkJyaWVmKioqXHJcbiAqIFRoZSBhYnNlbmNlIG9mIGEgdmFsdWUgb3IgYW4gXCJlbXB0eVwiIHN0YXRlLlxyXG4gKiBcclxuICogKioqV2FybmluZyoqKlxyXG4gKiBBbnkgb3BlcmF0aW9uIGF0dGVtcHRpbmcgdG8gYWNjZXNzIGFuIGBPcHRpb25gIG11c3Qgc2FmZWx5IGhhbmRsZSB0aGUgYE5vbmVgIHN0YXRlIG9yIHRlcm1pbmF0ZSB3aXRoIGFuIGVycm9yLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IE5vbmU6IE5vbmUgPSAoKCkgPT4ge1xyXG4gICAgbGV0IF90aGlzOiBOb25lO1xyXG5cclxuICAgIC8qKiBAY29uc3RydWN0b3IgKi8ge1xyXG4gICAgICAgIHJldHVybiBfdGhpcyA9IHtcclxuICAgICAgICAgICAgc29tZSxcclxuICAgICAgICAgICAgbm9uZSxcclxuICAgICAgICAgICAgZXhwZWN0LFxyXG4gICAgICAgICAgICB1bmxvY2tPcixcclxuICAgICAgICAgICAgYW5kLFxyXG4gICAgICAgICAgICBtYXAsXHJcbiAgICAgICAgICAgIHRvUmVzdWx0XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZnVuY3Rpb24gc29tZSgpOiB0aGlzIGlzIFNvbWU8dW5rbm93bj4ge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBub25lKCk6IHRoaXMgaXMgTm9uZSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZXhwZWN0KG1lc3NhZ2U6IHN0cmluZyk6IG5ldmVyIHtcclxuICAgICAgICBwYW5pYyhFcnJvcihcIk5PTkUuRVJSX01JU1NJTkdfVkFMVUVcIiwgbWVzc2FnZSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHVubG9ja09yPFQxPihmYWxsYmFjazogVDEpOiBUMSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbGxiYWNrO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGFuZChfXzogdW5rbm93bik6IE5vbmUge1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtYXAoX186IHVua25vd24pOiBOb25lIHtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdG9SZXN1bHQ8VDE+KGU6IFQxKTogRXJyPFQxPiB7XHJcbiAgICAgICAgcmV0dXJuIEVycihlKTtcclxuICAgIH1cclxufSkoKTtcclxuXHJcblxyXG5cclxuIiwgImltcG9ydCB0eXBlIHsgUmVzdWx0IH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB0eXBlIHsgV3JhcHBlciB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgdHlwZSB7IENsb3N1cmUgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHR5cGUgeyBGcHZJc2ggfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHR5cGUgeyBGcHZFcnJvciB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBJTlRFUk5BTF9FUlJPUl9NRVNTQUdFIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IEVycm9yIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IE9rIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IEVyciB9IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuZXhwb3J0IHR5cGUgRnB2PFQxIGV4dGVuZHMgYmlnaW50ID0gMm4+ID0gXHJcbiAgICAmIFdyYXBwZXI8YmlnaW50PlxyXG4gICAgJiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogUmV0dXJucyB0aGUgcHJlY2lzaW9uIG9mIHRoZSBgRnB2YC5cclxuICAgICAqL1xyXG4gICAgcHJlY2lzaW9uKCk6IFQxO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIFJldHVybnMgdGhlIHJlcHJlc2VudGF0aW9uIGZhY3RvciBvZiB0aGUgYEZwdmAsIGJhc2VkIG9uIGl0cyBwcmVjaXNpb24uXHJcbiAgICAgKi9cclxuICAgIHJlcHJlc2VudGF0aW9uKCk6IGJpZ2ludDtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBBZGRzIGEgZ2l2ZW4gYEZwdklzaGAgdmFsdWUgdG8gdGhlIGN1cnJlbnQgYEZwdmAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKldhcm5pbmcqKipcclxuICAgICAqIEV4dHJlbWVseSBsYXJnZSB2YWx1ZXMgbWF5IGNhdXNlIHRoZSBwcm9ncmFtIHRvIHBhbmljIGR1ZSB0byBpbnN1ZmZpY2llbnQgbWVtb3J5LlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCB2YWx1ZTogYmlnaW50ID0gRnB2KDIwMG4pXHJcbiAgICAgKiAgICAgIC5leHBlY3QoXCJGYWlsZWQgdG8gaW5pdGlhbGl6ZSBGcHYuXCIpXHJcbiAgICAgKiAgICAgIC5hZGQoMTAwbilcclxuICAgICAqICAgICAgLnVud3JhcCgpO1xyXG4gICAgICogIGNvbnNvbGUubG9nKHZhbHVlKTsgLy8vIDMwMG4gPT09IDMuMDBcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBhZGQodmFsdWU6IEZwdklzaDxUMT4pOiBGcHY8VDE+O1xyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBTdWJ0cmFjdHMgYSBnaXZlbiBgRnB2SXNoYCB2YWx1ZSBmcm9tIHRoZSBjdXJyZW50IGBGcHZgLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipXYXJuaW5nKioqXHJcbiAgICAgKiBFeHRyZW1lbHkgbGFyZ2UgdmFsdWVzIG1heSBjYXVzZSB0aGUgcHJvZ3JhbSB0byBwYW5pYyBkdWUgdG8gaW5zdWZmaWNpZW50IG1lbW9yeS5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgdmFsdWU6IGJpZ2ludCA9IEZwdigyMDBuKVxyXG4gICAgICogICAgICAuZXhwZWN0KFwiRmFpbGVkIHRvIGluaXRpYWxpemUgRnB2LlwiKVxyXG4gICAgICogICAgICAuc3ViKDEwMG4pXHJcbiAgICAgKiAgICAgIC51bndyYXAoKTtcclxuICAgICAqICBjb25zb2xlLmxvZyh2YWx1ZSk7IC8vLyAxMDBuID09PSAxLjAwXHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgc3ViKHZhbHVlOiBGcHZJc2g8VDE+KTogRnB2PFQxPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBNdWx0aXBsaWVzIHRoZSBjdXJyZW50IGBGcHZgIGJ5IGEgZ2l2ZW4gYEZwdklzaGAgdmFsdWUuXHJcbiAgICAgKiBcclxuICAgICAqICoqKldhcm5pbmcqKipcclxuICAgICAqIEV4dHJlbWVseSBsYXJnZSB2YWx1ZXMgbWF5IGNhdXNlIHRoZSBwcm9ncmFtIHRvIHBhbmljIGR1ZSB0byBpbnN1ZmZpY2llbnQgbWVtb3J5LlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCB2YWx1ZTogYmlnaW50ID0gRnB2KDIwMG4pXHJcbiAgICAgKiAgICAgIC5leHBlY3QoXCJGYWlsZWQgdG8gaW5pdGlhbGl6ZSBGcHYuXCIpXHJcbiAgICAgKiAgICAgIC5tdWwoNTBuKSAvLy8gMC41MFxyXG4gICAgICogICAgICAudW53cmFwKCk7XHJcbiAgICAgKiAgY29uc29sZS5sb2codmFsdWUpOyAvLy8gMTAwbiA9PT0gMS4wMFxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIG11bCh2YWx1ZTogRnB2SXNoPFQxPik6IEZwdjxUMT47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogRGl2aWRlcyB0aGUgY3VycmVudCBgRnB2YCBieSBhIGdpdmVuIGBGcHZJc2hgIHZhbHVlLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipXYXJuaW5nKioqXHJcbiAgICAgKiBFeHRyZW1lbHkgbGFyZ2UgdmFsdWVzIG1heSBjYXVzZSB0aGUgcHJvZ3JhbSB0byBwYW5pYyBkdWUgdG8gaW5zdWZmaWNpZW50IG1lbW9yeS5cclxuICAgICAqIFxyXG4gICAgICogKioqV2FybmluZyoqKlxyXG4gICAgICogSWYgZGl2aWRpbmcgYnkgemVybywgYW4gZXJyb3Igd2lsbCBiZSByZXR1cm5lZC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgdmFsdWU6IGJpZ2ludCA9IEZwdigyMDBuKVxyXG4gICAgICogICAgICAuZXhwZWN0KFwiRmFpbGVkIHRvIGluaXRpYWxpemUgRnB2LlwiKVxyXG4gICAgICogICAgICAuZGl2KDUwbikgLy8vIDAuNTBcclxuICAgICAqICAgICAgLnVud3JhcCgpO1xyXG4gICAgICogIGNvbnNvbGUubG9nKHZhbHVlKTsgLy8vIDQwMG4gPT09IDQuMDBcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBkaXYodmFsdWU6IEZwdklzaDxUMT4pOiBSZXN1bHQ8RnB2PFQxPiwgRnB2RXJyb3I+O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqICoqKkJyaWVmKioqXHJcbiAqIENyZWF0ZXMgYSBuZXcgYEZwdmAgd2l0aCB0aGUgcHJvdmlkZWQgdmFsdWUgYW5kIHByZWNpc2lvbi5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBGcHY8VDEgZXh0ZW5kcyBiaWdpbnQgPSAybj4oX2ZwdjogRnB2SXNoPFQxPiwgX3ByZWNpc2lvbjogVDEgPSAoMm4gYXMgYW55KSk6IFJlc3VsdDxGcHY8VDE+LCBGcHZFcnJvcj4ge1xyXG4gICAgbGV0IF92YWx1ZTogYmlnaW50O1xyXG4gICAgXHJcbiAgICAvKiogQGNvbnN0cnVjdG9yICovIHtcclxuICAgICAgICBpZiAocHJlY2lzaW9uKCkgPT09IDBuKSByZXR1cm4gRXJyKEVycm9yKFwiRlBWLkVSUl9QUkVDSVNJT05fSVNfWkVST1wiLCBcIkZwdjogRG9lcyBub3Qgc3VwcG9ydCB6ZXJvIHByZWNpc2lvbi5cIikpO1xyXG4gICAgICAgIGlmIChwcmVjaXNpb24oKSA8IDBuKSByZXR1cm4gRXJyKEVycm9yKFwiRlBWLkVSUl9QUkVDSVNJT05fSVNfTkVHQVRJVkVcIiwgXCJGcHY6IERvZXMgbm90IHN1cHBvcnQgbmVnYXRpdmUgcHJlY2lzaW9uLlwiKSk7XHJcbiAgICAgICAgX3ZhbHVlID0gX3Vud3JhcChfZnB2KTtcclxuICAgICAgICByZXR1cm4gT2soe1xyXG4gICAgICAgICAgICB1bndyYXAsXHJcbiAgICAgICAgICAgIHByZWNpc2lvbixcclxuICAgICAgICAgICAgcmVwcmVzZW50YXRpb24sXHJcbiAgICAgICAgICAgIGFkZCxcclxuICAgICAgICAgICAgc3ViLFxyXG4gICAgICAgICAgICBtdWwsXHJcbiAgICAgICAgICAgIGRpdlxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBmdW5jdGlvbiB1bndyYXAoKTogYmlnaW50IHtcclxuICAgICAgICByZXR1cm4gX3ZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHByZWNpc2lvbigpOiBUMSB7XHJcbiAgICAgICAgcmV0dXJuIF9wcmVjaXNpb247XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmVwcmVzZW50YXRpb24oKTogYmlnaW50IHtcclxuICAgICAgICByZXR1cm4gMTBuKipwcmVjaXNpb24oKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBhZGQodmFsdWU6IEZwdklzaDxUMT4pOiBGcHY8VDE+IHtcclxuICAgICAgICByZXR1cm4gX3dyYXAoKCkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gX3ZhbHVlICsgX3Vud3JhcCh2YWx1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc3ViKHZhbHVlOiBGcHZJc2g8VDE+KTogRnB2PFQxPiB7XHJcbiAgICAgICAgcmV0dXJuIF93cmFwKCgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIF92YWx1ZSAtIF91bndyYXAodmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG11bCh2YWx1ZTogRnB2SXNoPFQxPik6IEZwdjxUMT4ge1xyXG4gICAgICAgIHJldHVybiBfd3JhcCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCB6OiBiaWdpbnQgPSBfdmFsdWUgKiBfdW53cmFwKHZhbHVlKTtcclxuICAgICAgICAgICAgbGV0IHE6IGJpZ2ludCA9IHogLyByZXByZXNlbnRhdGlvbigpO1xyXG4gICAgICAgICAgICByZXR1cm4gcTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkaXYodmFsdWU6IEZwdklzaDxUMT4pOiBSZXN1bHQ8RnB2PFQxPiwgRnB2RXJyb3I+IHtcclxuICAgICAgICBsZXQgbjogYmlnaW50ID0gX3Vud3JhcCh2YWx1ZSk7XHJcbiAgICAgICAgaWYgKG4gPT09IDBuKSByZXR1cm4gRXJyKEVycm9yKFwiRlBWLkVSUl9ESVZJU0lPTl9CWV9aRVJPXCIsIFwiRnB2OiBDYW5ub3QgZGl2aWRlIGJ5IHplcm8uXCIpKTtcclxuICAgICAgICByZXR1cm4gT2soX3dyYXAoKCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgejogYmlnaW50ID0gX3ZhbHVlICogcmVwcmVzZW50YXRpb24oKTtcclxuICAgICAgICAgICAgbGV0IHE6IGJpZ2ludCA9IHogLyBuO1xyXG4gICAgICAgICAgICByZXR1cm4gcTtcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX3dyYXAodGFzazogQ2xvc3VyZTxbXSwgYmlnaW50Pik6IEZwdjxUMT4ge1xyXG4gICAgICAgIHJldHVybiBGcHY8VDE+KHRhc2soKSkuZXhwZWN0KFwiRnB2OiBGYWlsZWQgdG8gd3JhcCB0aGUgdGFzayByZXN1bHQgaW50byBhbiBGcHYuXCIgKyBJTlRFUk5BTF9FUlJPUl9NRVNTQUdFKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfdW53cmFwKGZwdjogRnB2SXNoPFQxPik6IGJpZ2ludCB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBmcHYgPT09IFwiYmlnaW50XCIpIHJldHVybiBmcHY7XHJcbiAgICAgICAgcmV0dXJuIGZwdi51bndyYXAoKTtcclxuICAgIH1cclxufSIsICIvKiogXHJcbiAqICoqKkJyaWVmKioqXHJcbiAqIENvbnZlcnRzIGB1bmtub3duYCB0byBgc3RyaW5nYC5cclxuICogXHJcbiAqICoqKldhcm5pbmcqKipcclxuICogRG9lcyBub3Qgc3VwcG9ydCBjaXJjdWxhciByZWZlcmVuY2VzIGFuZCBjaXJjdWxhciBvYmplY3RzIHdpbGwgcmVzdWx0IGluIGBbb2JqZWN0IE9iamVjdF1gLlxyXG4gKiBcclxuICogKioqRXhhbXBsZSoqKlxyXG4gKiAgYGBgdHNcclxuICogIGNvbnNvbGUubG9nKHRvU3RyaW5nKDQyKSk7ICAgICAgICAgIC8vLyA0MlxyXG4gKiAgY29uc29sZS5sb2codG9TdHJpbmcodHJ1ZSkpOyAgICAgICAgLy8vIHRydWVcclxuICogIGNvbnNvbGUubG9nKHRvU3RyaW5nKG51bGwpKTsgICAgICAgIC8vLyBudWxsXHJcbiAqICBjb25zb2xlLmxvZyh0b1N0cmluZyh1bmRlZmluZWQpKTsgICAvLy8gdW5kZWZpbmVkXHJcbiAqIFxyXG4gKiAgY29uc29sZS5sb2codG9TdHJpbmcoXCJleGFtcGxlXCIpKTsgICAvLy8gZXhhbXBsZVxyXG4gKiBcclxuICogIGxldCBvYmplY3Q6IHtcclxuICogICAgICBjb2xvcjogc3RyaW5nO1xyXG4gKiAgICAgIHNwZWVkOiB7XHJcbiAqICAgICAgICAgIG1pbjogbnVtYmVyLFxyXG4gKiAgICAgICAgICBtYXg6IG51bWJlclxyXG4gKiAgICAgIH1cclxuICogIH0gPSB7XHJcbiAqICAgICAgY29sb3I6IFwiQmx1ZVwiLFxyXG4gKiAgICAgIHNwZWVkOiB7XHJcbiAqICAgICAgICAgIG1pbjogMCxcclxuICogICAgICAgICAgbWF4OiA1MDBcclxuICogICAgICB9XHJcbiAqICB9O1xyXG4gKiAgY29uc29sZS5sb2cob2JqZWN0KTsgICAgICAgICAgICAgICAgLy8vIHtcImNvbG9yXCI6XCJCbHVlXCIsXCJzcGVlZFwiOntcIm1pblwiOjAsXCJtYXhcIjo1MDB9fVxyXG4gKiBcclxuICogIGZ1bmN0aW9uIGZvbygpOiB2b2lkIHtcclxuICogICAgICBsZXQgeDogc3RyaW5nID0gNTAwO1xyXG4gKiAgICAgIHJldHVybiB4O1xyXG4gKiAgfVxyXG4gKiAgY29uc29sZS5sb2coZm9vKTsgICAgICAgICAgICAgICAgICAgLy8vIGZ1bmN0aW9uIGZvbygpIHtcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLyAgICAgeCA9IDUwMDtcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLyAgICAgcmV0dXJuIHg7XHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8gfVxyXG4gKiAgYGBgXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdG9TdHJpbmcodW5rbm93bjogdW5rbm93bik6IHN0cmluZyB7XHJcbiAgICBpZiAodW5rbm93biA9PT0gbnVsbCB8fCB1bmtub3duID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIHVua25vd24gIT09IFwib2JqZWN0XCIpIHJldHVybiBTdHJpbmcodW5rbm93bik7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh1bmtub3duKTtcclxuICAgIH1cclxuICAgIGNhdGNoIHt9XHJcbiAgICByZXR1cm4gXCJbb2JqZWN0IE9iamVjdF1cIjtcclxufSIsICJpbXBvcnQgdHlwZSB7IFJlc3VsdCB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBEb21FcnJvciB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyB3cmFwIH0gZnJvbSBcIkByb290XCI7XHJcblxyXG4vKipcclxuICogKioqQnJpZWYqKipcclxuICogQ3JlYXRlcyBhIGRlZXAgY2xvbmUgb2YgdGhlIHByb3ZpZGVkIHZhbHVlIHVzaW5nIHRoZSBzdHJ1Y3R1cmVkQ2xvbmUgQVBJLlxyXG4gKiBcclxuICogKioqRXhhbXBsZSoqKlxyXG4gKiBgYGB0c1xyXG4gKiAgY2xvbmUoKVxyXG4gKiAgICAgIC5yZXNvbHZlKGUgPT4ge1xyXG4gKiAgICAgICAgICBpZiAoZS5jb2RlID09PSBcIkRPTS5FUlJfREFUQV9DTE9ORVwiKSB7XHJcbiAqICAgICAgICAgICAgICAvLy8gLi4uXHJcbiAqICAgICAgICAgIH1cclxuICogICAgICB9KVxyXG4gKiAgICAgIC51bmxvY2soKTtcclxuICogYGBgXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2xvbmU8VDE+KHZhbHVlOiBUMSk6IFJlc3VsdDxUMSwgRG9tRXJyb3I+IHtcclxuICAgIHJldHVybiB3cmFwKCgpID0+IHtcclxuICAgICAgICByZXR1cm4gc3RydWN0dXJlZENsb25lKHZhbHVlKTtcclxuICAgIH0pLm1hcEVycih1bnNhZmUgPT4ge1xyXG4gICAgICAgIHJldHVybiB1bnNhZmVcclxuICAgICAgICAgICAgLnBhcnNlKChzZWxmKTogc2VsZiBpcyBET01FeGNlcHRpb24gPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYgIT09IG51bGxcclxuICAgICAgICAgICAgICAgICAgICAmJiBzZWxmICE9PSB1bmRlZmluZWRcclxuICAgICAgICAgICAgICAgICAgICAmJiB0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIlxyXG4gICAgICAgICAgICAgICAgICAgICYmIFwibmFtZVwiIGluIHNlbGZcclxuICAgICAgICAgICAgICAgICAgICAmJiBcImNvZGVcIiBpbiBzZWxmXHJcbiAgICAgICAgICAgICAgICAgICAgJiYgXCJtZXNzYWdlXCIgaW4gc2VsZlxyXG4gICAgICAgICAgICAgICAgICAgICYmIHR5cGVvZiBzZWxmLm5hbWUgPT09IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgICAgICAmJiB0eXBlb2Ygc2VsZi5jb2RlID09PSBcIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgJiYgdHlwZW9mIHNlbGYubWVzc2FnZSA9PT0gXCJzdHJpbmdcIjtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLm1hcChleGNlcHRpb24gPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIERvbUVycm9yKGV4Y2VwdGlvbik7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC51bmxvY2tPcihEb21FcnJvcigpKTtcclxuICAgIH0pO1xyXG59IiwgImltcG9ydCB7XHJcbiAgICB0eXBlIFR5cGVHdWFyZCxcclxuICAgIHR5cGUgV3JhcHBlclxyXG59IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzV3JhcHBlcjxUMT4odW5rbm93bjogdW5rbm93bik6IHVua25vd24gaXMgV3JhcHBlcjxUMT4ge1xyXG4gICAgbGV0IGd1YXJkOiBUeXBlR3VhcmQ8V3JhcHBlcjxUMT4+ID0gKHVua25vd246IHVua25vd24pOiB1bmtub3duIGlzIFdyYXBwZXI8VDE+ID0+IHtcclxuICAgICAgICByZXR1cm4gdW5rbm93biAhPT0gbnVsbFxyXG4gICAgICAgICAgICAmJiB1bmtub3duICE9PSB1bmRlZmluZWRcclxuICAgICAgICAgICAgJiYgdHlwZW9mIHVua25vd24gPT09IFwib2JqZWN0XCJcclxuICAgICAgICAgICAgJiYgXCJ1bndyYXBcIiBpbiB1bmtub3duXHJcbiAgICAgICAgICAgICYmIHR5cGVvZiB1bmtub3duLnVud3JhcCA9PT0gXCJmdW5jdGlvblwiO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBndWFyZCh1bmtub3duKTtcclxufSIsICJpbXBvcnQge1xyXG4gICAgdHlwZSBTb21lLFxyXG4gICAgaXNCcmFuZGVkXHJcbn0gZnJvbSBcIkByb290XCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNTb21lKHVua25vd246IHVua25vd24pOiB1bmtub3duIGlzIFNvbWU8dW5rbm93bj4ge1xyXG4gICAgcmV0dXJuIGlzQnJhbmRlZCh1bmtub3duLCBcIlNvbWVcIik7XHJcbn0iLCAiaW1wb3J0IHtcclxuICAgIHR5cGUgUmVzdWx0LFxyXG4gICAgaXNPayxcclxuICAgIGlzRXJyXHJcbn0gZnJvbSBcIkByb290XCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNSZXN1bHQodW5rbm93bjogdW5rbm93bik6IHVua25vd24gaXMgUmVzdWx0PHVua25vd24sIHVua25vd24+IHtcclxuICAgIHJldHVybiBpc09rKHVua25vd24pIHx8IGlzRXJyKHVua25vd24pO1xyXG59IiwgImltcG9ydCB7XHJcbiAgICB0eXBlIE9wdGlvbixcclxuICAgIGlzU29tZSxcclxuICAgIGlzTm9uZVxyXG59IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzT3B0aW9uKHVua25vd246IHVua25vd24pOiB1bmtub3duIGlzIE9wdGlvbjx1bmtub3duPiB7XHJcbiAgICByZXR1cm4gaXNTb21lKHVua25vd24pIHx8IGlzTm9uZSh1bmtub3duKTtcclxufSIsICJpbXBvcnQge1xyXG4gICAgdHlwZSBUeXBlR3VhcmQsXHJcbiAgICB0eXBlIE9rLFxyXG4gICAgaXNCcmFuZGVkXHJcbn0gZnJvbSBcIkByb290XCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNPayh1bmtub3duOiB1bmtub3duKTogdW5rbm93biBpcyBPazx1bmtub3duPiB7XHJcbiAgICBsZXQgZ3VhcmQ6IFR5cGVHdWFyZDxPazx1bmtub3duPj4gPSAodW5rbm93bjogdW5rbm93bik6IHVua25vd24gaXMgT2s8dW5rbm93bj4gPT4ge1xyXG4gICAgICAgIHJldHVybiBpc0JyYW5kZWQodW5rbm93biwgXCJPa1wiKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gZ3VhcmQodW5rbm93bik7XHJcbn0iLCAiaW1wb3J0IHtcclxuICAgIHR5cGUgVHlwZUd1YXJkLFxyXG4gICAgdHlwZSBOb25lLFxyXG4gICAgaXNCcmFuZGVkXHJcbn0gZnJvbSBcIkByb290XCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNOb25lKHVua25vd246IHVua25vd24pOiB1bmtub3duIGlzIE5vbmUge1xyXG4gICAgbGV0IGd1YXJkOiBUeXBlR3VhcmQ8Tm9uZT4gPSAodW5rbm93bjogdW5rbm93bik6IHVua25vd24gaXMgTm9uZSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGlzQnJhbmRlZCh1bmtub3duLCBcIk5vbmVcIik7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGd1YXJkKHVua25vd24pO1xyXG59IiwgImltcG9ydCB7XHJcbiAgICB0eXBlIFR5cGVHdWFyZCxcclxuICAgIHR5cGUgRXJyLFxyXG4gICAgaXNCcmFuZGVkXHJcbn0gZnJvbSBcIkByb290XCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNFcnIodW5rbm93bjogdW5rbm93bik6IHVua25vd24gaXMgRXJyPHVua25vd24+IHtcclxuICAgIGxldCBndWFyZDogVHlwZUd1YXJkPEVycjx1bmtub3duPj4gPSAodW5rbm93bjogdW5rbm93bik6IHVua25vd24gaXMgRXJyPHVua25vd24+ID0+IHtcclxuICAgICAgICByZXR1cm4gaXNCcmFuZGVkKHVua25vd24sIFwiRXJyXCIpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBndWFyZCh1bmtub3duKTtcclxufSIsICJpbXBvcnQgeyBcclxuICAgIHR5cGUgQnJhbmRlZCxcclxuICAgIHR5cGUgVHlwZUd1YXJkXHJcbn0gZnJvbSBcIkByb290XCI7XHJcblxyXG4vKipcclxuICogKipXQVJOSU5HKipcclxuICogT25seSB1c2UgdGhpcyBjaGVjayBpZiB5b3UgYXJlIHN1cmUgdGhlIGJyYW5kZWQgdHlwZSB3aWxsIGhhdmUgYSBzcGVjaWZpYyBwcm9wZXJ0eSAoYHR5cGVgKSBhbmQgZW5mb3JjZSB0aGUgZXhwZWN0ZWQgdmFsdWUgbG9naWMuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNCcmFuZGVkPFQxIGV4dGVuZHMgc3RyaW5nPih1bmtub3duOiB1bmtub3duLCB0eXBlOiBUMSk6IHVua25vd24gaXMgQnJhbmRlZDxUMT4ge1xyXG4gICAgbGV0IGd1YXJkOiBUeXBlR3VhcmQ8QnJhbmRlZDxUMT4+ID0gKHVua25vd246IHVua25vd24pOiB1bmtub3duIGlzIEJyYW5kZWQ8VDE+ID0+IHtcclxuICAgICAgICByZXR1cm4gdW5rbm93biAhPT0gbnVsbFxyXG4gICAgICAgICAgICAmJiB1bmtub3duICE9PSB1bmRlZmluZWRcclxuICAgICAgICAgICAgJiYgdHlwZW9mIHVua25vd24gPT09IFwib2JqZWN0XCJcclxuICAgICAgICAgICAgJiYgXCJ0eXBlXCIgaW4gdW5rbm93blxyXG4gICAgICAgICAgICAmJiB0eXBlb2YgdW5rbm93bi50eXBlID09PSBcImZ1bmN0aW9uXCJcclxuICAgICAgICAgICAgJiYgdHlwZW9mIHVua25vd24udHlwZSgpID09PSBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICYmIHVua25vd24udHlwZSgpID09PSB0eXBlO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBndWFyZCh1bmtub3duKTtcclxufSIsICJpbXBvcnQgdHlwZSB7IE9wdGlvbiB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBTb21lIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IE5vbmUgfSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcbi8qKlxyXG4gKiAqKipCcmllZioqKlxyXG4gKiBDYXB0dXJlcyBhbmQgcmV0dXJucyB0aGUgc3RhY2sgdHJhY2UgYXQgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uJ3MgbG9jYXRpb24uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbG9jYWxTdGFja1RyYWNlKGxvY2F0aW9uOiBGdW5jdGlvbik6IE9wdGlvbjxzdHJpbmc+IHtcclxuICAgIGxldCBlOiBFcnJvciA9IEVycm9yKCk7XHJcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShlLCBsb2NhdGlvbik7XHJcbiAgICBpZiAoZS5zdGFjaykgcmV0dXJuIFNvbWUoZS5zdGFjayk7XHJcbiAgICByZXR1cm4gTm9uZTtcclxufSIsICJpbXBvcnQgdHlwZSB7IE9wdGlvbiB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgdHlwZSB7IFNlcmlhbGl6YWJsZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBTb21lIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IE5vbmUgfSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcbmV4cG9ydCB0eXBlIFN0YWNrVHJhY2VMaW5lID0gXHJcbiAgICAmIFNlcmlhbGl6YWJsZSBcclxuICAgICYge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIGB0b1N0cmluZ2AgcmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgc3RhY2sgdHJhY2UgbGluZSwgZWl0aGVyIGFzIHRoZSBmb3JtYXR0ZWQgdmVyc2lvbiBvciB3aXRoIGEgc3BlY2lmaWMgbGluZSBudW1iZXIuXHJcbiAgICAgKi9cclxuICAgIHRvU3RyaW5nKGxpbmU6IGJpZ2ludCk6IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBUaGUgcGFyc2VkIGBsb2NhdGlvbmAgKHN1Y2ggYXMgdGhlIGZ1bmN0aW9uIG5hbWUpIGZyb20gdGhlIHN0YWNrIHRyYWNlIGxpbmUuXHJcbiAgICAgKiBcclxuICAgICAqL1xyXG4gICAgbG9jYXRpb24oKTogT3B0aW9uPHN0cmluZz47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogVGhlIHBhcnNlZCBmaWxlIGBwYXRoYCBmcm9tIHRoZSBzdGFjayB0cmFjZS5cclxuICAgICAqL1xyXG4gICAgcGF0aCgpOiBPcHRpb248c3RyaW5nPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBUaGUgYGxpbmVgIG51bWJlciB3aGVyZSB0aGUgZXJyb3Igb2NjdXJyZWQuXHJcbiAgICAgKi9cclxuICAgIGxpbmUoKTogT3B0aW9uPGJpZ2ludD47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogVGhlIGBjb2x1bW5gIG51bWJlciB3aGVyZSB0aGUgZXJyb3Igb2NjdXJyZWQuXHJcbiAgICAgKi9cclxuICAgIGNvbHVtbigpOiBPcHRpb248YmlnaW50PjtcclxufTtcclxuXHJcbi8qKlxyXG4gKiAqKipCcmllZioqKlxyXG4gKiBQYXJzZXMgYSBzdGFjayB0cmFjZSBsaW5lIGluIHRoZSBmb3JtIGBcImF0IGZ1bmN0aW9uTmFtZSAoL3BhdGgvdG8vZmlsZS5qczpsaW5lOmNvbHVtbilcImAuXHJcbiAqIFxyXG4gKiAqKipXYXJuaW5nKioqXHJcbiAqIEludGVuZGVkIGZvciBkaXNwbGF5IG9ubHlcdTIwMTRwYXJzaW5nLiBcclxuICogXHJcbiAqICoqKldhcm5pbmcqKipcclxuICogTWF5IHBhcnNlIGluY29ycmVjdGx5IG9uIGVkZ2UgY2FzZXMuXHJcbiovXHJcbmV4cG9ydCBmdW5jdGlvbiBTdGFja1RyYWNlTGluZShfbGluZTogYGF0ICR7IHN0cmluZyB9ICgkeyBzdHJpbmcgfSlgKTogU3RhY2tUcmFjZUxpbmUge1xyXG4gICAgbGV0IF9sb2NhdGlvbk86IE9wdGlvbjxzdHJpbmc+O1xyXG4gICAgbGV0IF9wYXRoTzogT3B0aW9uPHN0cmluZz47XHJcbiAgICBsZXQgX2xpbmVPOiBPcHRpb248YmlnaW50PjtcclxuICAgIGxldCBfY29sdW1uTzogT3B0aW9uPGJpZ2ludD47XHJcblxyXG4gICAgLyoqIEBjb25zdHJ1Y3RvciAqLyB7XHJcbiAgICAgICAgX2xvY2F0aW9uTyA9IE5vbmU7XHJcbiAgICAgICAgX3BhdGhPID0gTm9uZTtcclxuICAgICAgICBfbGluZU8gPSBOb25lO1xyXG4gICAgICAgIF9jb2x1bW5PID0gTm9uZTtcclxuICAgICAgICBsZXQgZWxlbWVudHM6IEFycmF5PHN0cmluZz4gPSBfbGluZS5zcGxpdChcIiBcIik7XHJcbiAgICAgICAgbGV0IGZpcnN0RWxlbWVudDogc3RyaW5nIHwgdW5kZWZpbmVkID0gZWxlbWVudHMuc2hpZnQoKTtcclxuICAgICAgICBpZiAoZmlyc3RFbGVtZW50ICYmIGZpcnN0RWxlbWVudC50cmltKCkubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgICAgIGxldCBzZWNvbmRFbGVtZW50OiBzdHJpbmcgfCB1bmRlZmluZWQgPSBlbGVtZW50cy5zaGlmdCgpO1xyXG4gICAgICAgICAgICBsZXQgdGhpcmRFbGVtZW50OiBzdHJpbmcgfCB1bmRlZmluZWQgPSBlbGVtZW50cy5zaGlmdCgpO1xyXG4gICAgICAgICAgICBpZiAoc2Vjb25kRWxlbWVudCAmJiBzZWNvbmRFbGVtZW50LnRyaW0oKS5sZW5ndGggIT09IDApIF9sb2NhdGlvbk8gPSBTb21lKHNlY29uZEVsZW1lbnQpO1xyXG4gICAgICAgICAgICBpZiAodGhpcmRFbGVtZW50ICYmIHRoaXJkRWxlbWVudC50cmltKCkubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGhpcmRFbGVtZW50czogQXJyYXk8c3RyaW5nPiA9IHRoaXJkRWxlbWVudFxyXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlQWxsKFwiKFwiLCBcIlwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlQWxsKFwiKVwiLCBcIlwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zcGxpdChcIjpcIik7XHJcbiAgICAgICAgICAgICAgICBsZXQgZmlyc3RUaGlyZEVsZW1lbnQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXJkRWxlbWVudHMuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgIGxldCBsYXN0VGhpcmRFbGVtZW50OiBzdHJpbmcgfCB1bmRlZmluZWQgPSB0aGlyZEVsZW1lbnRzLmF0KHRoaXJkRWxlbWVudHMubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgc2Vjb25kVG9MYXN0VGhpcmRFbGVtZW50OiBzdHJpbmcgfCB1bmRlZmluZWQgPSB0aGlyZEVsZW1lbnRzLmF0KHRoaXJkRWxlbWVudHMubGVuZ3RoIC0gMik7XHJcbiAgICAgICAgICAgICAgICBpZiAoZmlyc3RUaGlyZEVsZW1lbnQgJiYgZmlyc3RUaGlyZEVsZW1lbnQudHJpbSgpLmxlbmd0aCAhPT0gMCkgX3BhdGhPID0gU29tZShmaXJzdFRoaXJkRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICBpZiAobGFzdFRoaXJkRWxlbWVudCAmJiBsYXN0VGhpcmRFbGVtZW50LnRyaW0oKS5sZW5ndGggIT09IDApIF9jb2x1bW5PID0gU29tZShCaWdJbnQobGFzdFRoaXJkRWxlbWVudCkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlY29uZFRvTGFzdFRoaXJkRWxlbWVudCAmJiBzZWNvbmRUb0xhc3RUaGlyZEVsZW1lbnQudHJpbSgpLmxlbmd0aCAhPT0gMCkgX2xpbmVPID0gU29tZShCaWdJbnQoc2Vjb25kVG9MYXN0VGhpcmRFbGVtZW50KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgdG9TdHJpbmcsIGxvY2F0aW9uLCBwYXRoLCBsaW5lLCBjb2x1bW4gfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB0b1N0cmluZygpOiBzdHJpbmc7XHJcbiAgICBmdW5jdGlvbiB0b1N0cmluZyhsaW5lOiBiaWdpbnQpOiBzdHJpbmc7XHJcbiAgICBmdW5jdGlvbiB0b1N0cmluZyhcclxuICAgICAgICBhcmdzMD86IGJpZ2ludFxyXG4gICAgKTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgbGluZV86IHN0cmluZyA9IFwiXCI7XHJcbiAgICAgICAgbGV0IG1pc3Npbmc6IHN0cmluZyA9IFwiPz8/XCI7XHJcbiAgICAgICAgbGV0IHN0cmluZzA6IHN0cmluZyA9IGxvY2F0aW9uKCkudW5sb2NrT3IobWlzc2luZyk7XHJcbiAgICAgICAgbGV0IHN0cmluZzE6IHN0cmluZyA9IHBhdGgoKS51bmxvY2tPcihtaXNzaW5nKTtcclxuICAgICAgICBsZXQgc3RyaW5nMjogc3RyaW5nIHwgYmlnaW50ID0gbGluZSgpLnVubG9ja09yKG1pc3NpbmcpO1xyXG4gICAgICAgIGxldCBzdHJpbmczOiBzdHJpbmcgfCBiaWdpbnQgPSBjb2x1bW4oKS51bmxvY2tPcihtaXNzaW5nKTtcclxuICAgICAgICBpZiAoYXJnczApIGxpbmVfID0gYXJnczAgKyBcIiB8PlwiO1xyXG4gICAgICAgIHJldHVybiBgJHsgbGluZV8gfSAkeyBzdHJpbmcwIH0gJHsgc3RyaW5nMSB9ICR7IHN0cmluZzIgfSAkeyBzdHJpbmczIH1gO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGxvY2F0aW9uKCk6IE9wdGlvbjxzdHJpbmc+IHtcclxuICAgICAgICByZXR1cm4gX2xvY2F0aW9uTztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBwYXRoKCk6IE9wdGlvbjxzdHJpbmc+IHtcclxuICAgICAgICByZXR1cm4gX3BhdGhPO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGxpbmUoKTogT3B0aW9uPGJpZ2ludD4ge1xyXG4gICAgICAgIHJldHVybiBfbGluZU87XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY29sdW1uKCk6IE9wdGlvbjxiaWdpbnQ+IHtcclxuICAgICAgICByZXR1cm4gX2NvbHVtbk87XHJcbiAgICB9XHJcbn0iLCAiaW1wb3J0IHR5cGUgeyBTZXJpYWxpemFibGUgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgU3RhY2tUcmFjZUxpbmUgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgbG9jYWxTdGFja1RyYWNlIH0gZnJvbSBcIkByb290XCI7XHJcblxyXG5leHBvcnQgdHlwZSBTdGFja1RyYWNlID0gXHJcbiAgICAmIFNlcmlhbGl6YWJsZVxyXG4gICAgJiB7XHJcbiAgICBsaW5lcygpOiBBcnJheTxTdGFja1RyYWNlTGluZT5cclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBTdGFja1RyYWNlKF9sb2NhdGlvbjogRnVuY3Rpb24pOiBTdGFja1RyYWNlO1xyXG5leHBvcnQgZnVuY3Rpb24gU3RhY2tUcmFjZShfbGluZXM6IEFycmF5PFN0YWNrVHJhY2VMaW5lPik6IFN0YWNrVHJhY2U7XHJcbmV4cG9ydCBmdW5jdGlvbiBTdGFja1RyYWNlKF9zdGFjazogc3RyaW5nKTogU3RhY2tUcmFjZTtcclxuZXhwb3J0IGZ1bmN0aW9uIFN0YWNrVHJhY2UoXHJcbiAgICBfYXJnczA6IFxyXG4gICAgICAgIHwgQXJyYXk8U3RhY2tUcmFjZUxpbmU+IFxyXG4gICAgICAgIHwgRnVuY3Rpb24gXHJcbiAgICAgICAgfCBzdHJpbmdcclxuKTogU3RhY2tUcmFjZSB7XHJcbiAgICBsZXQgX2xpbmVzOiBBcnJheTxTdGFja1RyYWNlTGluZT47XHJcblxyXG4gICAgLyoqIEBjb25zdHJ1Y3RvciAqLyB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBfYXJnczAgPT09IFwic3RyaW5nXCIpIF9saW5lcyA9IF9wYXJzZShfYXJnczApO1xyXG4gICAgICAgIGlmICh0eXBlb2YgX2FyZ3MwID09PSBcImZ1bmN0aW9uXCIpIF9saW5lcyA9IF9wYXJzZShsb2NhbFN0YWNrVHJhY2UoX2FyZ3MwKS51bmxvY2tPcihcIlwiKSk7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoX2FyZ3MwKSkgX2xpbmVzID0gX2FyZ3MwO1xyXG4gICAgICAgIHJldHVybiB7IHRvU3RyaW5nLCBsaW5lcyB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogKipFeGFtcGxlKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgYFxyXG4gICAgICogIDAgfD4gc29tZUZ1bmN0aW9uIC9wYXRoL3RvL2ZpbGUuanMgMTAgMTVcclxuICAgICAqICAxIHw+IDw8PCBTVEFDS19UUkFDRV9MSU5FLkVSUl9MT0NBVElPTl9VTkFWQUlMQUJMRSA+Pj5cclxuICAgICAqICAyIHw+IGFub3RoZXJGdW5jdGlvbiBAIC9wYXRoL3RvL290aGVyZmlsZS5qcyAyMCAyNVxyXG4gICAgICogIDMgfD4gbWFpbiBAIC9wYXRoL3RvL21haW5maWxlLmpzIDMwIDM1XHJcbiAgICAgKiAgYFxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHRvU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IHJlc3VsdDogc3RyaW5nID0gXCJcIjtcclxuICAgICAgICBsaW5lcygpXHJcbiAgICAgICAgICAgIC5tYXAoKGxpbmUsIHBvc2l0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbGluZS50b1N0cmluZyhCaWdJbnQocG9zaXRpb24pKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmZvckVhY2gobGluZSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICs9IGxpbmU7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbGluZXMoKTogQXJyYXk8U3RhY2tUcmFjZUxpbmU+IHtcclxuICAgICAgICByZXR1cm4gX2xpbmVzO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9wYXJzZShzdGFjazogc3RyaW5nKTogQXJyYXk8U3RhY2tUcmFjZUxpbmU+IHtcclxuICAgICAgICByZXR1cm4gc3RhY2tcclxuICAgICAgICAgICAgLnNwbGl0KFwiXFxuXCIpXHJcbiAgICAgICAgICAgIC5tYXAobGluZSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbGluZS50cmltKCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5maWx0ZXIobGluZSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbGluZS5sZW5ndGggPiAwO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAubWFwKGxpbmUgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8vIFdhcm5pbmdcclxuICAgICAgICAgICAgICAgIC8vLyBUaGlzIGlzIG9rIGJlY2F1c2UgaXQgaXMgb25seSBmb3IgZGlzcGxheSBwdXJwb3Nlcy5cclxuICAgICAgICAgICAgICAgIHJldHVybiBTdGFja1RyYWNlTGluZSgobGluZSBhcyBhbnkpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcblN0YWNrVHJhY2UoYFxyXG4gICAgRXJyb3I6IFNvbWV0aGluZyB3ZW50IHdyb25nXHJcbiAgICAgICAgYXQgc29tZUZ1bmN0aW9uICgvcGF0aC90by9maWxlLmpzOjEwOjE1KVxyXG4gICAgICAgIDw8PCBTVEFDS19UUkFDRV9MSU5FLkVSUl9MT0NBVElPTl9VTkFWQUlMQUJMRUUgPj4+XHJcbiAgICAgICAgYXQgYW5vdGhlckZ1bmN0aW9uICgvcGF0aC90by9vdGhlcmZpbGUuanM6MjA6MjUpXHJcbiAgICAgICAgYXQgbWFpbiAoL3BhdGgvdG8vbWFpbmZpbGUuanM6MzA6MzUpXHJcbmApOyIsICJpbXBvcnQgeyBFcnJvciBhcyBFcnJvcjAsIFN0YWNrVHJhY2UgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgbG9jYWxTdGFja1RyYWNlIH0gZnJvbSBcIkByb290XCI7XHJcblxyXG50eXBlIF9UMU9yRXJyb3JUMTxUMSBleHRlbmRzIHN0cmluZz4gPSBUMSB8IEVycm9yMDxUMT47XHJcblxyXG4vKipcclxuICogKioqQnJpZWYqKipcclxuICogYHBhbmljYCB0aHJvd3MgYW4gZXJyb3Igd2l0aCBvcHRpb25hbCBtZXNzYWdlIGFuZCBzdGFjayB0cmFjZSBsb2NhdGlvbi5cclxuICogXHJcbiAqICoqKkV4YW1wbGUqKipcclxuICogYGBgdHNcclxuICogIHBhbmljKEVycm9yKFwiTUFUSC5FUlJfRElWSVNJT05fQllfWkVST1wiKSk7XHJcbiAqICBwYW5pYyhFcnJvcih7XHJcbiAqICAgICAgY29kZTogXCJNQVRILkVSUl9ESVZJU0lPTl9CWV9aRVJPXCIsXHJcbiAqICAgICAgbWVzc2FnZTogU29tZShcIk1hdGg6IENhbm5vdCBkaXZpZGUgYnkgemVyby5cIiksXHJcbiAqICAgICAgcGF5bG9hZDogTm9uZSxcclxuICogICAgICBzdGFjazogU3RhY2tUcmFjZSguLi4pXHJcbiAqICB9KSk7XHJcbiAqICBwYW5pYyhcIkFuIHVucmVjb3ZlcmFibGUgZXJyb3IgaGFzIG9jY3VyZWQuXCIpO1xyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBwYW5pYzxUMSBleHRlbmRzIHN0cmluZz4oZTogRXJyb3IwPFQxPik6IG5ldmVyO1xyXG5leHBvcnQgZnVuY3Rpb24gcGFuaWM8VDEgZXh0ZW5kcyBzdHJpbmc+KG1lc3NhZ2U6IFQxKTogbmV2ZXI7XHJcbmV4cG9ydCBmdW5jdGlvbiBwYW5pYzxUMSBleHRlbmRzIHN0cmluZz4obWVzc2FnZTogVDEsIGxvY2F0aW9uOiBGdW5jdGlvbik6IG5ldmVyO1xyXG5leHBvcnQgZnVuY3Rpb24gcGFuaWM8VDEgZXh0ZW5kcyBzdHJpbmc+KFxyXG4gICAgYXJnczA6IF9UMU9yRXJyb3JUMTxUMT4sIFxyXG4gICAgYXJnczE/OiBGdW5jdGlvblxyXG4pOiBuZXZlciB7XHJcbiAgICBsZXQgbG9jYXRpb246IEZ1bmN0aW9uID0gYXJnczEgfHwgcGFuaWM7XHJcbiAgICBpZiAodHlwZW9mIGFyZ3MwID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgbGV0IGU6IEVycm9yMDxUMT4gPSBhcmdzMDtcclxuICAgICAgICBsZXQgY29kZTogc3RyaW5nID0gZS5jb2RlO1xyXG4gICAgICAgIGxldCBtZXNzYWdlOiBzdHJpbmcgPSBcIlwiO1xyXG4gICAgICAgIGUubWVzc2FnZVxyXG4gICAgICAgICAgICAubWFwKG1lc3NhZ2UwID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtZXNzYWdlID0gbWVzc2FnZTA7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIGxldCBlU3RhbmRhcmQ6IEVycm9yID0gRXJyb3IoKTtcclxuICAgICAgICBlU3RhbmRhcmQubmFtZSA9IGNvZGU7XHJcbiAgICAgICAgZVN0YW5kYXJkLm1lc3NhZ2UgPSBtZXNzYWdlO1xyXG4gICAgICAgIGVTdGFuZGFyZC5zdGFjayA9IGUuc3RhY2sudG9TdHJpbmcoKTtcclxuICAgICAgICBlU3RhbmRhcmQuY2F1c2UgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhyb3cgZVN0YW5kYXJkO1xyXG4gICAgfVxyXG4gICAgbGV0IG1lc3NhZ2U6IHN0cmluZyA9IGFyZ3MwO1xyXG4gICAgbGV0IGVTdGFuZGFyZDogRXJyb3IgPSBFcnJvcigpO1xyXG4gICAgZVN0YW5kYXJkLm5hbWUgPSBcIlwiXHJcbiAgICBlU3RhbmRhcmQubWVzc2FnZSA9IG1lc3NhZ2U7XHJcbiAgICBlU3RhbmRhcmQuY2F1c2UgPSB1bmRlZmluZWQ7XHJcbiAgICBlU3RhbmRhcmQuc3RhY2sgPSBsb2NhbFN0YWNrVHJhY2UobG9jYXRpb24pXHJcbiAgICAgICAgLnRvUmVzdWx0KHVuZGVmaW5lZClcclxuICAgICAgICAucmVjb3ZlcigoKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnVubG9jaygpO1xyXG4gICAgdGhyb3cgZVN0YW5kYXJkO1xyXG59IiwgImltcG9ydCB0eXBlIHsgT3B0aW9uIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IFN0YWNrVHJhY2UgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgU29tZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBOb25lIH0gZnJvbSBcIkByb290XCI7XHJcblxyXG5leHBvcnQgdHlwZSBFcnJvcjxUMSBleHRlbmRzIHN0cmluZywgVDIgPSB1bmtub3duPiA9IHtcclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhpcyBlcnJvci5cclxuICAgICAqL1xyXG4gICAgY29kZTogVDE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogQSBodW1hbi1yZWFkYWJsZSBtZXNzYWdlIHRoYXQgZXhwbGFpbnMgdGhlIG5hdHVyZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIG1lc3NhZ2U6IE9wdGlvbjxzdHJpbmc+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIEFuIG9wdGlvbmFsIHZhbHVlIHRoYXQgY2FuIGhvbGQgYWRkaXRpb25hbCBkYXRhIG9yIGNvbnRleHQgcmVsYXRlZCB0byB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHBheWxvYWQ6IE9wdGlvbjxUMj47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogVGhlIHN0YWNrIHRyYWNlIGFzc29jaWF0ZWQgd2l0aCB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHN0YWNrOiBTdGFja1RyYWNlO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqICoqKkJyaWVmKioqXHJcbiAqIEEgY3VzdG9tIGVycm9yIHdpdGggYW4gb3B0aW9uYWwgbWVzc2FnZSBhbmQgcGF5bG9hZCBmb3Igc3Ryb25nbHktdHlwZWQgZXJyb3JzLlxyXG4gKiBcclxuICogKioqTm90ZSoqKlxyXG4gKiBUaGlzIGlzIGEgZ2VuZXJhbC1wdXJwb3NlIGVycm9yIHN0cnVjdHVyZSB0byBtYW5hZ2UgZG9tYWluLXNwZWNpZmljIGVycm9yIGNvZGVzIGFuZCBwcm92aWRlIGJldHRlciBjb250ZXh0LlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIEVycm9yPFQxIGV4dGVuZHMgc3RyaW5nLCBUMiA9IHVua25vd24+KF90aGlzOiBFcnJvcjxUMSwgVDI+KTogRXJyb3I8VDEsIFQyPjtcclxuZXhwb3J0IGZ1bmN0aW9uIEVycm9yPFQxIGV4dGVuZHMgc3RyaW5nLCBUMiA9IHVua25vd24+KF9jb2RlOiBUMSwgX21lc3NhZ2U6IHN0cmluZywgX3BheWxvYWQ6IFQyKTogRXJyb3I8VDEsIFQyPjtcclxuZXhwb3J0IGZ1bmN0aW9uIEVycm9yPFQxIGV4dGVuZHMgc3RyaW5nLCBUMiA9IHVua25vd24+KF9jb2RlOiBUMSwgX21lc3NhZ2U6IHN0cmluZyk6IEVycm9yPFQxLCBUMj47XHJcbmV4cG9ydCBmdW5jdGlvbiBFcnJvcjxUMSBleHRlbmRzIHN0cmluZywgVDIgPSB1bmtub3duPihfY29kZTogVDEpOiBFcnJvcjxUMSwgVDI+O1xyXG5leHBvcnQgZnVuY3Rpb24gRXJyb3I8VDEgZXh0ZW5kcyBzdHJpbmcsIFQyID0gdW5rbm93bj4oXHJcbiAgICBfYXJnczA6IEVycm9yPFQxLCBUMj4gfCBUMSxcclxuICAgIF9hcmdzMT86IHN0cmluZyxcclxuICAgIF9hcmdzMj86IFQyXHJcbik6IEVycm9yPFQxLCBUMj4ge1xyXG4gICAgLyoqIEBjb25zdHJ1Y3RvciAqLyB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBfYXJnczAgPT09IFwib2JqZWN0XCIpIHJldHVybiBfYXJnczA7XHJcbiAgICAgICAgbGV0IGNvZGU6IHN0cmluZyA9IF9hcmdzMDtcclxuICAgICAgICBsZXQgbWVzc2FnZU86IE9wdGlvbjxzdHJpbmc+ID0gTm9uZTtcclxuICAgICAgICBsZXQgbWVzc2FnZTA6IHN0cmluZyB8IHVuZGVmaW5lZCA9IF9hcmdzMTtcclxuICAgICAgICBpZiAobWVzc2FnZTApIG1lc3NhZ2VPID0gU29tZShtZXNzYWdlMCk7XHJcbiAgICAgICAgbGV0IHBheWxvYWRPOiBPcHRpb248VDI+ID0gTm9uZTtcclxuICAgICAgICBsZXQgcGF5bG9hZDA6IFQyIHwgdW5kZWZpbmVkID0gX2FyZ3MyO1xyXG4gICAgICAgIGlmIChwYXlsb2FkMCkgcGF5bG9hZE8gPSBTb21lKHBheWxvYWQwKTtcclxuICAgICAgICByZXR1cm4gRXJyb3Ioe1xyXG4gICAgICAgICAgICBjb2RlOiBjb2RlLFxyXG4gICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlTyxcclxuICAgICAgICAgICAgcGF5bG9hZDogcGF5bG9hZE8sXHJcbiAgICAgICAgICAgIHN0YWNrOiBTdGFja1RyYWNlKEVycm9yKVxyXG4gICAgICAgIH0pIGFzIEVycm9yPFQxLCBUMj47IC8vLyBUaGlzIGlzIG9rYXkgYmVjYXVzZSB0aGUgdHlwZSBvZiBgY29kZWAgaXMgYFQxYC5cclxuICAgIH1cclxufSIsICJpbXBvcnQgdHlwZSB7IERvbUV4Y2VwdGlvbk5hbWUgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHR5cGUgeyBEb21FcnJvckNvZGUgfSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBEb21FcnJvck5hbWVUb0NvZGVNYXA6IFJlY29yZDxEb21FeGNlcHRpb25OYW1lLCBEb21FcnJvckNvZGU+ID0ge1xyXG4gICAgXCJFbmNvZGluZ0Vycm9yXCI6IFwiRE9NLkVSUl9FTkNPRElOR1wiLFxyXG4gICAgXCJOb3RSZWFkYWJsZUVycm9yXCI6IFwiRE9NLkVSUl9OT1RfUkVBREFCTEVcIixcclxuICAgIFwiVW5rbm93bkVycm9yXCI6IFwiRE9NLkVSUl9VTktOT1dOXCIsXHJcbiAgICBcIkNvbnN0cmFpbnRFcnJvclwiOiBcIkRPTS5FUlJfQ09OU1RSQUlOVFwiLFxyXG4gICAgXCJEYXRhRXJyb3JcIjogXCJET00uRVJSX0RBVEFcIixcclxuICAgIFwiVHJhbnNhY3Rpb25JbmFjdGl2ZUVycm9yXCI6IFwiRE9NLkVSUl9UUkFOU0FDVElPTl9JTkFDVElWRVwiLFxyXG4gICAgXCJSZWFkT25seUVycm9yXCI6IFwiRE9NLkVSUl9SRUFEX09OTFlcIixcclxuICAgIFwiVmVyc2lvbkVycm9yXCI6IFwiRE9NLkVSUl9WRVJTSU9OXCIsXHJcbiAgICBcIk9wZXJhdGlvbkVycm9yXCI6IFwiRE9NLkVSUl9PUEVSQVRJT05cIixcclxuICAgIFwiTm90QWxsb3dlZEVycm9yXCI6IFwiRE9NLkVSUl9OT1RfQUxMT1dFRFwiXHJcbn07IiwgImltcG9ydCB0eXBlIHsgRG9tRXhjZXB0aW9uQ29kZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgdHlwZSB7IERvbUVycm9yQ29kZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IERvbUV4Y2VwdGlvbkNvZGVUb0RvbUVycm9yQ29kZU1hcDogUmVjb3JkPERvbUV4Y2VwdGlvbkNvZGUsIERvbUVycm9yQ29kZT4gPSB7XHJcbiAgICAxOiBcIkRPTS5FUlJfSU5ERVhfU0laRVwiLFxyXG4gICAgMzogXCJET00uRVJSX0hJRVJBUkNIWV9SRVFVRVNUXCIsXHJcbiAgICA0OiBcIkRPTS5FUlJfV1JPTkdfRE9DVU1FTlRcIixcclxuICAgIDU6IFwiRE9NLkVSUl9JTlZBTElEX0NIQVJBQ1RFUlwiLFxyXG4gICAgNzogXCJET00uRVJSX05PX01PRElGSUNBVElPTl9BTExPV0VEXCIsXHJcbiAgICA4OiBcIkRPTS5FUlJfTk9UX0ZPVU5EXCIsXHJcbiAgICA5OiBcIkRPTS5FUlJfTk9UX1NVUFBPUlRFRFwiLFxyXG4gICAgMTE6IFwiRE9NLkVSUl9JTlZBTElEX1NUQVRFXCIsXHJcbiAgICAxMjogXCJET00uRVJSX1NZTlRBWFwiLFxyXG4gICAgMTM6IFwiRE9NLkVSUl9JTlZBTElEX01PRElGSUNBVElPTlwiLFxyXG4gICAgMTQ6IFwiRE9NLkVSUl9OQU1FU1BBQ0VcIixcclxuICAgIDE3OiBcIkRPTS5FUlJfVFlQRV9NSVNNQVRDSFwiLFxyXG4gICAgMTg6IFwiRE9NLkVSUl9TRUNVUklUWVwiLFxyXG4gICAgMTk6IFwiRE9NLkVSUl9ORVRXT1JLXCIsXHJcbiAgICAyMDogXCJET00uRVJSX0FCT1JUXCIsXHJcbiAgICAyMTogXCJET00uRVJSX1VSTF9NSVNNQVRDSFwiLFxyXG4gICAgMjI6IFwiRE9NLkVSUl9RVU9UQV9FWENFRURFRFwiLFxyXG4gICAgMjM6IFwiRE9NLkVSUl9USU1FT1VUXCIsXHJcbiAgICAyNDogXCJET00uRVJSX0lOVkFMSURfTk9ERV9UWVBFXCIsXHJcbiAgICAyNTogXCJET00uRVJSX0RBVEFfQ0xPTkVcIlxyXG59OyIsICJpbXBvcnQgdHlwZSB7IERvbUVycm9yQ29kZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBEb21FeGNlcHRpb25Db2RlVG9Eb21FcnJvckNvZGVNYXAgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgRG9tRXJyb3JOYW1lVG9Db2RlTWFwIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IEVycm9yIH0gZnJvbSBcIkByb290XCI7XHJcblxyXG5leHBvcnQgdHlwZSBEb21FcnJvciA9IEVycm9yPERvbUVycm9yQ29kZT47XHJcblxyXG4vKipcclxuICogKioqQnJpZWYqKipcclxuICogQSBkb21haW4tc3BlY2lmaWMgZXJyb3IgdGhhdCBwcm92aWRlcyB0aGUgZXJyb3IgY29kZSBmb3IgRE9NIGV4Y2VwdGlvbnMuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gRG9tRXJyb3IoKTogRG9tRXJyb3I7XHJcbmV4cG9ydCBmdW5jdGlvbiBEb21FcnJvcihfZTogRE9NRXhjZXB0aW9uKTogRG9tRXJyb3I7XHJcbmV4cG9ydCBmdW5jdGlvbiBEb21FcnJvcihcclxuICAgIF9hcmdzMD86IERPTUV4Y2VwdGlvblxyXG4pOiBEb21FcnJvciB7XHJcbiAgICAvKiogQGNvbnN0cnVjdG9yICovIHtcclxuICAgICAgICBsZXQgZTogRE9NRXhjZXB0aW9uIHwgdW5kZWZpbmVkID0gX2FyZ3MwO1xyXG4gICAgICAgIGlmIChlID09PSB1bmRlZmluZWQpIHJldHVybiBFcnJvcihcIkRPTS5FUlJfVU5LTk9XTlwiKTtcclxuICAgICAgICByZXR1cm4gRXJyb3IoX21hdGNoKGUpLCBlLm1lc3NhZ2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9tYXRjaChlOiBET01FeGNlcHRpb24pOiBEb21FcnJvckNvZGUge1xyXG4gICAgICAgIGxldCBjb2RlOiBEb21FcnJvckNvZGUgPSBcIkRPTS5FUlJfVU5LTk9XTlwiO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgZS5jb2RlID09PSAxXHJcbiAgICAgICAgICAgIHx8IGUuY29kZSA9PT0gM1xyXG4gICAgICAgICAgICB8fCBlLmNvZGUgPT09IDRcclxuICAgICAgICAgICAgfHwgZS5jb2RlID09PSA1XHJcbiAgICAgICAgICAgIHx8IGUuY29kZSA9PT0gN1xyXG4gICAgICAgICAgICB8fCBlLmNvZGUgPT09IDhcclxuICAgICAgICAgICAgfHwgZS5jb2RlID09PSA5XHJcbiAgICAgICAgICAgIHx8IGUuY29kZSA9PT0gMTFcclxuICAgICAgICAgICAgfHwgZS5jb2RlID09PSAxMlxyXG4gICAgICAgICAgICB8fCBlLmNvZGUgPT09IDEzXHJcbiAgICAgICAgICAgIHx8IGUuY29kZSA9PT0gMTRcclxuICAgICAgICAgICAgfHwgZS5jb2RlID09PSAxN1xyXG4gICAgICAgICAgICB8fCBlLmNvZGUgPT09IDE4XHJcbiAgICAgICAgICAgIHx8IGUuY29kZSA9PT0gMTlcclxuICAgICAgICAgICAgfHwgZS5jb2RlID09PSAyMFxyXG4gICAgICAgICAgICB8fCBlLmNvZGUgPT09IDIxXHJcbiAgICAgICAgICAgIHx8IGUuY29kZSA9PT0gMjJcclxuICAgICAgICAgICAgfHwgZS5jb2RlID09PSAyM1xyXG4gICAgICAgICAgICB8fCBlLmNvZGUgPT09IDI0XHJcbiAgICAgICAgICAgIHx8IGUuY29kZSA9PT0gMjVcclxuICAgICAgICApIGNvZGUgPSBEb21FeGNlcHRpb25Db2RlVG9Eb21FcnJvckNvZGVNYXBbZS5jb2RlXTtcclxuICAgICAgICBlbHNlIGlmIChcclxuICAgICAgICAgICAgZS5uYW1lID09PSBcIkVuY29kaW5nRXJyb3JcIlxyXG4gICAgICAgICAgICB8fCBlLm5hbWUgPT09IFwiTm90UmVhZGFibGVFcnJvclwiXHJcbiAgICAgICAgICAgIHx8IGUubmFtZSA9PT0gXCJVbmtub3duRXJyb3JcIlxyXG4gICAgICAgICAgICB8fCBlLm5hbWUgPT09IFwiQ29uc3RyYWludEVycm9yXCJcclxuICAgICAgICAgICAgfHwgZS5uYW1lID09PSBcIkRhdGFFcnJvclwiXHJcbiAgICAgICAgICAgIHx8IGUubmFtZSA9PT0gXCJUcmFuc2FjdGlvbkluYWN0aXZlRXJyb3JcIlxyXG4gICAgICAgICAgICB8fCBlLm5hbWUgPT09IFwiUmVhZE9ubHlFcnJvclwiXHJcbiAgICAgICAgICAgIHx8IGUubmFtZSA9PT0gXCJWZXJzaW9uRXJyb3JcIlxyXG4gICAgICAgICAgICB8fCBlLm5hbWUgPT09IFwiT3BlcmF0aW9uRXJyb3JcIlxyXG4gICAgICAgICAgICB8fCBlLm5hbWUgPT09IFwiTm90QWxsb3dlZEVycm9yXCJcclxuICAgICAgICApIGNvZGUgPSBEb21FcnJvck5hbWVUb0NvZGVNYXBbZS5uYW1lXTtcclxuICAgICAgICByZXR1cm4gY29kZTtcclxuICAgIH1cclxufSIsICJleHBvcnQgY29uc3QgSU5URVJOQUxfRVJST1JfTUVTU0FHRTogc3RyaW5nID1cclxuICAgIFwiXFxuXCIgKyBcIlVoLW9oLCBsb29rcyBsaWtlIFJlbGlxIHRvb2sgYSB3cm9uZyB0dXJuIVwiICsgXHJcbiAgICBcIlxcblwiICsgXCJEb24ndCB3b3JyeSwgaXQncyBub3QgeW91LWl0J3MgdXMuXCIgKyBcclxuICAgIFwiXFxuXCIgKyBcIlBsZWFzZSByZXBvcnQgdGhpcyBhdCBkcmVhbWNhdGNoZXJfZm91bmRhdGlvbkBwcm90b24ubWVcIiArXHJcbiAgICBcIlxcblwiOyJdLAogICJtYXBwaW5ncyI6ICJtYkFBQSxJQUFBQSxHQUFBLEdBQUFDLEdBQUFELEdBQUEsV0FBQUUsRUFBQSxZQUFBQyxFQUFBLGFBQUFDLEVBQUEsUUFBQUMsRUFBQSxRQUFBQyxFQUFBLFVBQUFDLEVBQUEsUUFBQUMsRUFBQSxTQUFBQyxFQUFBLE9BQUFDLEVBQUEsU0FBQUMsRUFBQSxlQUFBQyxFQUFBLG1CQUFBQyxFQUFBLFdBQUFDLEVBQUEsU0FBQUMsRUFBQSxTQUFBQyxFQUFBLFNBQUFDLEVBQUEsU0FBQUMsRUFBQSxVQUFBQyxFQUFBLGNBQUFDLEVBQUEsVUFBQUMsRUFBQSxXQUFBQyxFQUFBLFNBQUFDLEVBQUEsYUFBQUMsRUFBQSxhQUFBQyxFQUFBLFdBQUFDLEVBQUEsY0FBQUMsRUFBQSxVQUFBQyxFQUFBLGFBQUFDLEVBQUEsU0FBQUMsRUFBQSxjQUFBQyxJQUFBLGVBQUFDLEdBQUFoQyxJQytCTyxJQUFNaUMsR0FBeUIsSUFBTSxDQUVwQyxNQUFPLENBQUUsSUFBQUMsRUFBSyxJQUFBQyxFQUFLLEtBQUFDLEVBQU0sVUFBQUMsQ0FBVSxFQUd2QyxTQUFTSCxFQUFnREksRUFBOEQsQ0FDbkgsSUFBSUMsRUFBc0IsQ0FBQyxFQUN2QkMsRUFBWSxFQUNoQixLQUFPQSxFQUFJRixFQUFRLFFBQVEsQ0FDdkIsSUFBSUcsRUFBbUNILEVBQVEsR0FBR0UsQ0FBQyxFQUNuRCxHQUFJQyxFQUFPLEdBQUcsRUFBR0YsRUFB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UyxHQUNSQSxFQUFFLE9BQVMsR0FDWEEsRUFBRSxPQUFTLEdBQ1hBLEVBQUUsT0FBUyxHQUNYQSxFQUFFLE9BQVMsR0FDWEEsRUFBRSxPQUFTLEdBQ1hBLEVBQUUsT0FBUyxHQUNYQSxFQUFFLE9BQVMsSUFDWEEsRUFBRSxPQUFTLElBQ1hBLEVBQUUsT0FBUyxJQUNYQSxFQUFFLE9BQVMsSUFDWEEsRUFBRSxPQUFTLElBQ1hBLEVBQUUsT0FBUyxJQUNYQSxFQUFFLE9BQVMsSUFDWEEsRUFBRSxPQUFTLElBQ1hBLEVBQUUsT0FBUyxJQUNYQSxFQUFFLE9BQVMsSUFDWEEsRUFBRSxPQUFTLElBQ1hBLEVBQUUsT0FBUyxJQUNYQSxFQUFFLE9BQVMsR0FDaEJHLEVBQU9DLEdBQWtDSixFQUFFLElBQUksR0FFN0NBLEVBQUUsT0FBUyxpQkFDUkEsRUFBRSxPQUFTLG9CQUNYQSxFQUFFLE9BQVMsZ0JBQ1hBLEVBQUUsT0FBUyxtQkFDWEEsRUFBRSxPQUFTLGFBQ1hBLEVBQUUsT0FBUyw0QkFDWEEsRUFBRSxPQUFTLGlCQUNYQSxFQUFFLE9BQVMsZ0JBQ1hBLEVBQUUsT0FBUyxrQkFDWEEsRUFBRSxPQUFTLHFCQUNoQkcsRUFBT0UsR0FBc0JMLEVBQUUsSUFBSSxHQUM5QkcsQ0FDWCxDQUNKLENDNURPLElBQU1HLEVBQ1Q7QUFBQTtBQUFBO0FBQUE7IiwKICAibmFtZXMiOiBbIm1vZF9leHBvcnRzIiwgIl9fZXhwb3J0IiwgIkFsbG9jIiwgIkRlQWxsb2MiLCAiRG9tRXJyb3IiLCAiRHluIiwgIkVyciIsICJFcnJvciIsICJGcHYiLCAiTm9uZSIsICJPayIsICJTb21lIiwgIlN0YWNrVHJhY2UiLCAiU3RhY2tUcmFjZUxpbmUiLCAiVW5zYWZlIiwgImFsbE8iLCAiYWxsUiIsICJhbnlPIiwgImFueVIiLCAiY2xvbmUiLCAiaXNCcmFuZGVkIiwgImlzRXJyIiwgImlzTm9uZSIsICJpc09rIiwgImlzT3B0aW9uIiwgImlzUmVzdWx0IiwgImlzU29tZSIsICJpc1dyYXBwZXIiLCAicGFuaWMiLCAidG9TdHJpbmciLCAid3JhcCIsICJ3cmFwQXN5bmMiLCAiX190b0NvbW1vbkpTIiwgIlJlc3VsdCIsICJhbGwiLCAiYW55IiwgIndyYXAiLCAid3JhcEFzeW5jIiwgInJlc3VsdHMiLCAib3V0IiwgImkiLCAicmVzdWx0IiwgIk9rIiwgIndyYXBwZXIiLCAiRXJyIiwgInRhc2siLCAicGF5bG9hZCIsICJVbnNhZmUiLCAiT3B0aW9uIiwgImFsbCIsICJhbnkiLCAib3B0aW9ucyIsICJvdXQiLCAiaSIsICJvcHRpb24iLCAiU29tZSIsICJOb25lIiwgIlVuc2FmZSIsICJfdmFsdWUiLCAidW53cmFwIiwgInBhcnNlIiwgImd1YXJkIiwgIlNvbWUiLCAiTm9uZSIsICJhbGxSIiwgIlJlc3VsdCIsICJhbnlSIiwgIndyYXAiLCAid3JhcEFzeW5jIiwgIk9rIiwgIl92YWx1ZSIsICJfdGhpcyIsICJvayIsICJlcnIiLCAiZXhwZWN0IiwgImV4cGVjdEVyciIsICJ1bmxvY2siLCAidW5sb2NrT3IiLCAiYW5kIiwgIm1hcCIsICJtYXBFcnIiLCAicmVjb3ZlciIsICJkZWdyYWRlIiwgInRvT3B0aW9uIiwgIl9fIiwgIm1lc3NhZ2UiLCAicGFuaWMiLCAiRXJyb3IiLCAidGFzayIsICJFcnIiLCAiU29tZSIsICJFcnIiLCAiX3ZhbHVlIiwgIl90aGlzIiwgIl9zdGFjayIsICJTdGFja1RyYWNlIiwgIm9rIiwgImVyciIsICJpbnNwZWN0IiwgInN0YWNrIiwgImV4cGVjdCIsICJleHBlY3RFcnIiLCAidW5sb2NrT3IiLCAiYW5kIiwgIm1hcCIsICJtYXBFcnIiLCAicmVjb3ZlciIsICJkZWdyYWRlIiwgInRvT3B0aW9uIiwgIm1lc3NhZ2UiLCAiZSIsICJjb2RlTyIsICJOb25lIiwgIlNvbWUiLCAicGFuaWMiLCAiRXJyb3IiLCAiX18iLCAiZmFsbGJhY2siLCAidGFzayIsICJPayIsICJEeW4iLCAiX2NvbnN0cnVjdG9yIiwgIl9vbkRlQWxsb2MiLCAiX2xvYWQiLCAiX29uTG9hZFBheWxvYWQiLCAiX2F2YWlsYWJsZSIsICJfY291bnQiLCAiaSIsICJrZXkiLCAiX2dlbktleSIsICJwYXlsb2FkIiwgIl9rZXkiLCAiX3RoaXMiLCAiTm9uZSIsICJhbGxvYyIsICJfcmVjeWNsZWRLZXkiLCAiU29tZSIsICJBbGxvYyIsICJfcmVjeWxlZCIsICJkZUFsbG9jIiwgIl9yZWN5bGUiLCAiSU5URVJOQUxfRVJST1JfTUVTU0FHRSIsICJEZUFsbG9jIiwgInZhbHVlIiwgIkRlQWxsb2MiLCAiX2R5biIsICJOb25lIiwgIkFsbG9jIiwgIl92YWx1ZSIsICJfZHluIiwgIlNvbWUiLCAiYWxsTyIsICJPcHRpb24iLCAiYW55TyIsICJTb21lIiwgIl92YWx1ZSIsICJzb21lIiwgIm5vbmUiLCAiZXhwZWN0IiwgInVubG9jayIsICJ1bmxvY2tPciIsICJhbmQiLCAibWFwIiwgInRvUmVzdWx0IiwgIl9fIiwgInRhc2siLCAiT2siLCAiTm9uZSIsICJfdGhpcyIsICJzb21lIiwgIm5vbmUiLCAiZXhwZWN0IiwgInVubG9ja09yIiwgImFuZCIsICJtYXAiLCAidG9SZXN1bHQiLCAibWVzc2FnZSIsICJwYW5pYyIsICJFcnJvciIsICJmYWxsYmFjayIsICJfXyIsICJlIiwgIkVyciIsICJGcHYiLCAiX2ZwdiIsICJfcHJlY2lzaW9uIiwgIl92YWx1ZSIsICJwcmVjaXNpb24iLCAiRXJyIiwgIkVycm9yIiwgIl91bndyYXAiLCAiT2siLCAidW53cmFwIiwgInJlcHJlc2VudGF0aW9uIiwgImFkZCIsICJzdWIiLCAibXVsIiwgImRpdiIsICJ2YWx1ZSIsICJfd3JhcCIsICJuIiwgInRhc2siLCAiSU5URVJOQUxfRVJST1JfTUVTU0FHRSIsICJmcHYiLCAidG9TdHJpbmciLCAidW5rbm93biIsICJjbG9uZSIsICJ2YWx1ZSIsICJ3cmFwIiwgInVuc2FmZSIsICJzZWxmIiwgImV4Y2VwdGlvbiIsICJEb21FcnJvciIsICJpc1dyYXBwZXIiLCAidW5rbm93biIsICJpc1NvbWUiLCAidW5rbm93biIsICJpc0JyYW5kZWQiLCAiaXNSZXN1bHQiLCAidW5rbm93biIsICJpc09rIiwgImlzRXJyIiwgImlzT3B0aW9uIiwgInVua25vd24iLCAiaXNTb21lIiwgImlzTm9uZSIsICJpc09rIiwgInVua25vd24iLCAiaXNCcmFuZGVkIiwgImlzTm9uZSIsICJ1bmtub3duIiwgImlzQnJhbmRlZCIsICJpc0VyciIsICJ1bmtub3duIiwgImlzQnJhbmRlZCIsICJpc0JyYW5kZWQiLCAidW5rbm93biIsICJ0eXBlIiwgImxvY2FsU3RhY2tUcmFjZSIsICJsb2NhdGlvbiIsICJlIiwgIlNvbWUiLCAiTm9uZSIsICJTdGFja1RyYWNlTGluZSIsICJfbGluZSIsICJfbG9jYXRpb25PIiwgIl9wYXRoTyIsICJfbGluZU8iLCAiX2NvbHVtbk8iLCAiTm9uZSIsICJlbGVtZW50cyIsICJmaXJzdEVsZW1lbnQiLCAic2Vjb25kRWxlbWVudCIsICJ0aGlyZEVsZW1lbnQiLCAiU29tZSIsICJ0aGlyZEVsZW1lbnRzIiwgImZpcnN0VGhpcmRFbGVtZW50IiwgImxhc3RUaGlyZEVsZW1lbnQiLCAic2Vjb25kVG9MYXN0VGhpcmRFbGVtZW50IiwgInRvU3RyaW5nIiwgImxvY2F0aW9uIiwgInBhdGgiLCAibGluZSIsICJjb2x1bW4iLCAiYXJnczAiLCAibGluZV8iLCAibWlzc2luZyIsICJzdHJpbmcwIiwgInN0cmluZzEiLCAic3RyaW5nMiIsICJzdHJpbmczIiwgIlN0YWNrVHJhY2UiLCAiX2FyZ3MwIiwgIl9saW5lcyIsICJfcGFyc2UiLCAibG9jYWxTdGFja1RyYWNlIiwgInRvU3RyaW5nIiwgImxpbmVzIiwgInJlc3VsdCIsICJsaW5lIiwgInBvc2l0aW9uIiwgInN0YWNrIiwgIlN0YWNrVHJhY2VMaW5lIiwgInBhbmljIiwgImFyZ3MwIiwgImFyZ3MxIiwgImxvY2F0aW9uIiwgImUiLCAiY29kZSIsICJtZXNzYWdlIiwgIm1lc3NhZ2UwIiwgImVTdGFuZGFyZCIsICJsb2NhbFN0YWNrVHJhY2UiLCAiRXJyb3IiLCAiX2FyZ3MwIiwgIl9hcmdzMSIsICJfYXJnczIiLCAiY29kZSIsICJtZXNzYWdlTyIsICJOb25lIiwgIm1lc3NhZ2UwIiwgIlNvbWUiLCAicGF5bG9hZE8iLCAicGF5bG9hZDAiLCAiU3RhY2tUcmFjZSIsICJEb21FcnJvck5hbWVUb0NvZGVNYXAiLCAiRG9tRXhjZXB0aW9uQ29kZVRvRG9tRXJyb3JDb2RlTWFwIiwgIkRvbUVycm9yIiwgIl9hcmdzMCIsICJlIiwgIkVycm9yIiwgIl9tYXRjaCIsICJjb2RlIiwgIkRvbUV4Y2VwdGlvbkNvZGVUb0RvbUVycm9yQ29kZU1hcCIsICJEb21FcnJvck5hbWVUb0NvZGVNYXAiLCAiSU5URVJOQUxfRVJST1JfTUVTU0FHRSJdCn0K