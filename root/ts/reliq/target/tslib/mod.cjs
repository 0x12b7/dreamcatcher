"use strict";var v=Object.defineProperty;var J=Object.getOwnPropertyDescriptor;var rr=Object.getOwnPropertyNames;var or=Object.prototype.hasOwnProperty;var tr=(o,e)=>{for(var r in e)v(o,r,{get:e[r],enumerable:!0})},nr=(o,e,r,E)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of rr(e))!or.call(o,i)&&i!==r&&v(o,i,{get:()=>e[i],enumerable:!(E=J(e,i))||E.enumerable});return o};var er=o=>nr(v({},"__esModule",{value:!0}),o);var Tr={};tr(Tr,{Alloc:()=>L,DeAlloc:()=>U,DomError:()=>F,Dyn:()=>q,Err:()=>k,Error:()=>N,Fpv:()=>H,None:()=>a,Ok:()=>I,Ref:()=>Q,Some:()=>s,Unsafe:()=>K,allO:()=>j,allR:()=>B,anyO:()=>V,anyR:()=>Y,clone:()=>z,isBranded:()=>D,panic:()=>C,toString:()=>X,wrap:()=>W,wrapAsync:()=>P});module.exports=er(Tr);var w=(()=>{return{all:o,any:e,wrap:r,wrapAsync:E};function o(i){let R=[],t=0;for(;t<i.length;){let O=i.at(t);if(O.ok())R.push(O.unlock());else return O;t++}return I(R)}function e(i){let R=[],t=0;for(;t<i.length;){let O=i.at(t);if(O.ok())return O;R.push(O.inspect()),t++}return k(R)}function r(i,...R){try{return I(i(...R))}catch(t){return k(K(t))}}async function E(i,...R){try{return I(await i(...R))}catch(t){return k(K(t))}}})();var g=(()=>{return{isOption:o,isSome:e,isNone:r,flag:E,all:i,any:R};function o(t){return e(t)||r(t)}function e(t){return D(t,"Some")}function r(t){return D(t,"None")}function E(t){return t===null?a:t===void 0?a:s(t)}function i(t){let O=[],m=0;for(;m<t.length;){let T=t.at(m);if(T.none())return T;O.push(T.unlock()),m++}return s(O)}function R(t){let O=0;for(;O<t.length;){let m=t.at(O);if(m.some())return m;O++}return a}})();function K(o){return{unwrap:e,parse:r};function e(){return o}function r(E){return E(e())?s(e()):a}}var B=w.all,Y=w.any,W=w.wrap,P=w.wrapAsync;function I(o){let e;return e={ok:r,err:E,expect:i,expectErr:R,unlock:t,unlockOr:O,and:m,map:T,mapErr:n,recover:p,degrade:u,toOption:f};function r(){return!0}function E(){return!1}function i(l){return t()}function R(l){C(N("PANIC",l))}function t(){return o}function O(l){return t()}function m(l){return l(t())}function T(l){return I(l(t()))}function n(l){return e}function p(l){return e}function u(l){return k(l(t()))}function f(){return s(t())}}function k(o,e){let r,E;return e??=x,E=e.parseStackTrace(k),r={ok:i,err:R,inspect:t,stack:O,expect:m,expectErr:T,unlockOr:n,and:p,map:u,mapErr:f,recover:l,degrade:_,toOption:S};function i(){return!1}function R(){return!0}function t(){return o}function O(){return E}function m(y){let d=t(),G=a,b=a,h=a;d!=null&&typeof d=="object"&&("code"in d&&typeof d.code=="string"&&(G=s(d.code)),"message"in d&&(typeof d.message=="string"?b=s(d.message):W(()=>{let c=d.message.unlockOr(void 0);if(!(c!=null&&typeof c=="string"))throw void 0;return c}).map(c=>{b=s(c)})),"stack"in d&&(typeof d.stack=="string"?h=s(StackTrace(d.stack)):W(()=>{let c=d.stack;if(!(c!=null&&typeof c=="object"&&"toString"in c&&"lines"in c&&typeof c.toString=="function"&&typeof c.lines=="function"&&typeof c.toString()=="string"&&Array.isArray(c.lines())))throw void 0;return c}).map(c=>{h=s(c)}))),C(N({code:G.unlockOr("PANIC"),message:s(b.unlockOr("The transient error did not come with a message.")+`
Context: `+y),payload:a,stack:h.unlockOr(StackTrace(m))}))}function T(y){return t()}function n(y){return y}function p(y){return r}function u(y){return r}function f(y){return k(y(t()))}function l(y){return I(y(t()))}function _(y){return r}function S(){return a}}function Q(o){let e,r,E;return r=0n,E=new Map,e={unwrap:i,mut:R,onChange:t};function i(){return o}function R(m){let T=i(),n=m;return o=m,E.values().toArray().forEach(p=>p(n,T)),e}function t(m){let T=O();return E.set(T,m),()=>{E.delete(T)}}function O(){return r+=1n}}function q(o,e,r,...E){let i,R;{i=new Map,R=0n;let n=0n;for(;n<r;){let p=t();i.set(p,o(...E)),n++}return function(...p){let u,f;return u=a,f=l();function l(){return O().toResult(void 0).map(S=>(u=s(S),L(m(S),{deAlloc:_}))).recover(()=>(u=s(t()),L(o(...p),{deAlloc:_}))).unlock()}function _(){return u.toResult(void 0).map(S=>{u=a,T(S,e(f.expect("Dyn: Could not deallocate resource but the key was available."+M)))}),f=U({deAlloc:_})}}}function t(){return R+=1n}function O(){let n=i.keys().toArray().at(0);return n?s(n):a}function m(n){let p=i.get(n);return i.delete(n),p}function T(n,p){i.set(n,p)}}function U(o){return{...a,...o}}function L(o,e){return{...s(o),...e}}var Zr=g.isOption,$r=g.isSome,Jr=g.isNone,A=g.flag,j=g.all,V=g.any;function s(o){return{type:e,some:r,none:E,expect:i,unlock:R,unlockOr:t,and:O,map:m,toResult:T};function e(){return"Some"}function r(){return!0}function E(){return!1}function i(n){return o}function R(){return o}function t(n){return o}function O(n){return n(o)}function m(n){return s(n(o))}function T(n){return I(o)}}var a=(()=>{let o;return o={type:e,some:r,none:E,expect:i,unlockOr:R,and:t,map:O,toResult:m};function e(){return"None"}function r(){return!1}function E(){return!0}function i(T){C(N("ERR_VALUE_REQUIRED",T))}function R(T){return T}function t(T){return o}function O(T){return o}function m(T){return k(T)}})();function H(o,e=2n){let r;return i()===0n?k(N("FPV.ERR_PRECISION_IS_ZERO","Fpv: Does not support zero precision.")):i()<0n?k(N("FPV.ERR_PRECISION_IS_NEGATIVE","Fpv: Does not support negative precision.")):(r=p(o),I({unwrap:E,precision:i,representation:R,add:t,sub:O,mul:m,div:T}));function E(){return r}function i(){return e}function R(){return 10n**i()}function t(u){return n(()=>r+p(u))}function O(u){return n(()=>r-p(u))}function m(u){return n(()=>r*p(u)/R())}function T(u){let f=p(u);return f===0n?k(N("FPV.ERR_DIVISION_BY_ZERO","Fpv: Cannot divide by zero.")):I(n(()=>r*R()/f))}function n(u){return H(u()).expect("Fpv: Failed to wrap the task result into an Fpv."+M)}function p(u){return typeof u=="bigint"?u:u.unwrap()}}function X(o){if(o==null||typeof o!="object")return String(o);try{return JSON.stringify(o)}catch{}return"[object Object]"}function z(o){return W(()=>structuredClone(o)).mapErr(e=>e.parse(r=>r!=null&&typeof r=="object"&&"name"in r&&"code"in r&&"message"in r&&typeof r.name=="string"&&typeof r.code=="number"&&typeof r.message=="string").map(r=>F(r)).unlockOr(F()))}function D(o,e){return(E=>E!=null&&typeof E=="object"&&"type"in E&&typeof E.type=="function"&&typeof E.type()=="string"&&E.type()===e)(o)}function C(o,e,r){if(typeof o=="object"){let E=o;throw A(e).unlockOr(x).convertToStandardError(E)}else{let E=o,i=A(e).unlockOr(C),R=A(r).unlockOr(x),t=Error();throw t.name="PANIC",t.message=E,t.cause=void 0,t.stack=R.parseStackTrace(i),t}}var x=(()=>{return{matchError:o,localStackTrace:e,parseStackTrace:r,convertToStandardError:E};function o(T,n,p){return(f=>f!=null&&typeof f=="object"&&"code"in f&&typeof f.code=="string"&&f.code===n&&D(f,"Error"))(T)?(p&&p(T),!0):!1}function e(T){let n=Error();return Error.captureStackTrace(n,T),n.stack?s(n.stack):a}function r(T){return R(i(T))}function E(T){let n=Error();return n.name=T.code,n.message=T.message.unlockOr(""),n.stack=T.stack.toString(),n.cause=void 0,n}function i(T){return typeof T=="string"?T:e(T).unlockOr("")}function R(T){return T.split(`
`).map(n=>m(n,p=>p.trim(),p=>"")).filter(n=>n.length>0).map(n=>t(n)).map(([n,p,u,f])=>O(n,p,u,f)).reduce((n,p)=>n+=p)}function t(T){let n=a,p=a,u=a,f=a,_=/at (?<location>.*?) \((?<path>.*?):(?<line>\d+):(?<column>\d+)\)/.exec(T);return _&&_.groups&&(n=_.groups.location?s(_.groups.location):a,p=_.groups.path?s(_.groups.path):a,u=_.groups.line?s(BigInt(_.groups.line)):a,f=_.groups.column?s(BigInt(_.groups.column)):a),[n,p,u,f]}function O(T,n,p,u){let f="\u219F",l="<<< MISSING >>>",_=T.unlockOr(l),S=n.unlockOr(l),y=p.unlockOr(l).toString(),d=u.unlockOr(l).toString();return`${f} ${_} ${S} ${y} ${d}`}function m(T,n,p){return T==="Error"?p(T):n(T)}})();function N(o,e,r){{if(typeof o=="object"){let E=o,i=A(E.handler).unlockOr(x);return{type:"Error",code:E.code,message:A(E.message),payload:A(E.payload),stack:A(E.stack).unlockOr(i.parseStackTrace(N))}}return{type:"Error",code:o,message:A(e),payload:A(r),stack:x.parseStackTrace(N)}}}var Z={EncodingError:"DOM.ERR_ENCODING",NotReadableError:"DOM.ERR_NOT_READABLE",UnknownError:"DOM.ERR_UNKNOWN",ConstraintError:"DOM.ERR_CONSTRAINT",DataError:"DOM.ERR_DATA",TransactionInactiveError:"DOM.ERR_TRANSACTION_INACTIVE",ReadOnlyError:"DOM.ERR_READ_ONLY",VersionError:"DOM.ERR_VERSION",OperationError:"DOM.ERR_OPERATION",NotAllowedError:"DOM.ERR_NOT_ALLOWED"};var $={1:"DOM.ERR_INDEX_SIZE",3:"DOM.ERR_HIERARCHY_REQUEST",4:"DOM.ERR_WRONG_DOCUMENT",5:"DOM.ERR_INVALID_CHARACTER",7:"DOM.ERR_NO_MODIFICATION_ALLOWED",8:"DOM.ERR_NOT_FOUND",9:"DOM.ERR_NOT_SUPPORTED",11:"DOM.ERR_INVALID_STATE",12:"DOM.ERR_SYNTAX",13:"DOM.ERR_INVALID_MODIFICATION",14:"DOM.ERR_NAMESPACE",17:"DOM.ERR_TYPE_MISMATCH",18:"DOM.ERR_SECURITY",19:"DOM.ERR_NETWORK",20:"DOM.ERR_ABORT",21:"DOM.ERR_URL_MISMATCH",22:"DOM.ERR_QUOTA_EXCEEDED",23:"DOM.ERR_TIMEOUT",24:"DOM.ERR_INVALID_NODE_TYPE",25:"DOM.ERR_DATA_CLONE"};function F(o){{let r=o;return r===void 0?N("DOM.ERR_UNKNOWN"):N(e(r),r.message)}function e(r){let E="DOM.ERR_UNKNOWN";return r.code===1||r.code===3||r.code===4||r.code===5||r.code===7||r.code===8||r.code===9||r.code===11||r.code===12||r.code===13||r.code===14||r.code===17||r.code===18||r.code===19||r.code===20||r.code===21||r.code===22||r.code===23||r.code===24||r.code===25?E=$[r.code]:(r.name==="EncodingError"||r.name==="NotReadableError"||r.name==="UnknownError"||r.name==="ConstraintError"||r.name==="DataError"||r.name==="TransactionInactiveError"||r.name==="ReadOnlyError"||r.name==="VersionError"||r.name==="OperationError"||r.name==="NotAllowedError")&&(E=Z[r.name]),E}}var M=`
Uh-oh, looks like Reliq took a wrong turn!
Don't worry, it's not you-it's us.
Please report this at dreamcatcher_foundation@proton.me
`;0&&(module.exports={Alloc,DeAlloc,DomError,Dyn,Err,Error,Fpv,None,Ok,Ref,Some,Unsafe,allO,allR,anyO,anyR,clone,isBranded,panic,toString,wrap,wrapAsync});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL2NvcmUvbW9kLnRzIiwgIi4uLy4uL3NyYy9jb3JlL3dyYXBwZXIvcmVzdWx0L3Jlc3VsdC50cyIsICIuLi8uLi9zcmMvY29yZS93cmFwcGVyL29wdGlvbi9vcHRpb24udHMiLCAiLi4vLi4vc3JjL2NvcmUvd3JhcHBlci91bnNhZmUvdW5zYWZlLnRzIiwgIi4uLy4uL3NyYy9jb3JlL3dyYXBwZXIvcmVzdWx0L3V0aWwvc2hvcnRoYW5kLnRzIiwgIi4uLy4uL3NyYy9jb3JlL3dyYXBwZXIvcmVzdWx0L29rL29rLnRzIiwgIi4uLy4uL3NyYy9jb3JlL3dyYXBwZXIvcmVzdWx0L2Vyci9lcnIudHMiLCAiLi4vLi4vc3JjL2NvcmUvd3JhcHBlci9yZWYvcmVmLnRzIiwgIi4uLy4uL3NyYy9jb3JlL3dyYXBwZXIvcGVyZm9ybWFuY2UvZHluL2R5bi50cyIsICIuLi8uLi9zcmMvY29yZS93cmFwcGVyL3BlcmZvcm1hbmNlL2R5bi9kZV9hbGxvYy50cyIsICIuLi8uLi9zcmMvY29yZS93cmFwcGVyL3BlcmZvcm1hbmNlL2R5bi9hbGxvYy50cyIsICIuLi8uLi9zcmMvY29yZS93cmFwcGVyL29wdGlvbi91dGlsL3Nob3J0aGFuZC50cyIsICIuLi8uLi9zcmMvY29yZS93cmFwcGVyL29wdGlvbi9zb21lL3NvbWUudHMiLCAiLi4vLi4vc3JjL2NvcmUvd3JhcHBlci9vcHRpb24vbm9uZS9ub25lLnRzIiwgIi4uLy4uL3NyYy9jb3JlL3dyYXBwZXIvZnB2L2Zwdi50cyIsICIuLi8uLi9zcmMvY29yZS91dGlsL3RvX3N0cmluZy50cyIsICIuLi8uLi9zcmMvY29yZS91dGlsL2Nsb25lLnRzIiwgIi4uLy4uL3NyYy9jb3JlL3R5cGUvdHJhaXQvZ3VhcmQvaXNfYnJhbmRlZC50cyIsICIuLi8uLi9zcmMvY29yZS9lcnJvci9wYW5pYy50cyIsICIuLi8uLi9zcmMvY29yZS9lcnJvci9lcnJvcl9oYW5kbGVyLnRzIiwgIi4uLy4uL3NyYy9jb3JlL2Vycm9yL2Vycm9yLnRzIiwgIi4uLy4uL3NyYy9jb3JlL2Vycm9yL2RvbS1lcnJvci9leGNlcHRpb24vZG9tX2V4Y2VwdGlvbl9uYW1lX3RvX2RvbV9lcnJvcl9jb2RlX21hcC50cyIsICIuLi8uLi9zcmMvY29yZS9lcnJvci9kb20tZXJyb3IvZXhjZXB0aW9uL2RvbV9leGNlcHRpb25fY29kZV90b19kb21fZXJyb3JfY29kZV9tYXAudHMiLCAiLi4vLi4vc3JjL2NvcmUvZXJyb3IvZG9tLWVycm9yL2RvbV9lcnJvci50cyIsICIuLi8uLi9zcmMvY29yZS9jb25zdGFudC9pbnRlcm5hbF9lcnJvcl9tZXNzYWdlLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJleHBvcnQge1xyXG4gICAgdHlwZSBBc3luY0Nsb3N1cmUsXHJcbiAgICB0eXBlIEFzeW5jRnVuY3Rpb24sXHJcbiAgICB0eXBlIENsb3N1cmUsXHJcbiAgICB0eXBlIEZ1bmN0aW9uLFxyXG4gICAgdHlwZSBNYXliZUFzeW5jLFxyXG4gICAgdHlwZSBUeXBlR3VhcmQsXHJcbiAgICB0eXBlIEJyYW5kZWQsXHJcbiAgICB0eXBlIFBhcnNhYmxlLFxyXG4gICAgdHlwZSBTZXJpYWxpemFibGVcclxufSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcblxyXG5leHBvcnQge1xyXG4gICAgU3RhY2tUcmFjZUxpbmUsXHJcbiAgICBTdGFja1RyYWNlLFxyXG4gICAgRXJyb3IsXHJcbiAgICBwYW5pYyxcclxufSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcbmV4cG9ydCB7IFxyXG4gICAgdHlwZSBEb21FcnJvckNvZGUsXHJcbiAgICBEb21FcnJvclxyXG59IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuXHJcbmV4cG9ydCB7XHJcbiAgICBjbG9uZSxcclxuICAgIHRvU3RyaW5nXHJcbn0gZnJvbSBcIkByb290XCI7XHJcblxyXG5cclxuZXhwb3J0IHtcclxuICAgIGlzQnJhbmRlZFxyXG59IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuXHJcbmV4cG9ydCB7XHJcbiAgICB0eXBlIFJlc3VsdEhhbmRsZXIsXHJcbiAgICB0eXBlIFJlc3VsdCxcclxuXHJcbiAgICB0eXBlIEVyck9mQWxsLFxyXG4gICAgdHlwZSBFcnJPZixcclxuICAgIHR5cGUgRXJyVmFsT2ZBbGwsXHJcbiAgICB0eXBlIEVyclZhbE9mLFxyXG4gICAgRXJyLFxyXG5cclxuICAgIHR5cGUgT2tPZkFsbCxcclxuICAgIHR5cGUgT2tPZixcclxuICAgIHR5cGUgT2tWYWxPZkFsbCxcclxuICAgIHR5cGUgT2tWYWxPZixcclxuICAgIE9rLFxyXG5cclxuICAgIGFsbFIsXHJcbiAgICBhbnlSLFxyXG4gICAgd3JhcCxcclxuICAgIHdyYXBBc3luY1xyXG59IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuZXhwb3J0IHtcclxuICAgIHR5cGUgT3B0aW9uSGFuZGxlcixcclxuICAgIHR5cGUgT3B0aW9uLFxyXG5cclxuICAgIE5vbmUsXHJcblxyXG4gICAgdHlwZSBTb21lT2ZBbGwsXHJcbiAgICB0eXBlIFNvbWVPZixcclxuICAgIHR5cGUgU29tZVZhbE9mQWxsLFxyXG4gICAgdHlwZSBTb21lVmFsT2YsXHJcbiAgICBTb21lLFxyXG5cclxuICAgIGFsbE8sXHJcbiAgICBhbnlPXHJcbn0gZnJvbSBcIkByb290XCI7XHJcblxyXG5leHBvcnQge1xyXG4gICAgVW5zYWZlXHJcbn0gZnJvbSBcIkByb290XCI7XHJcblxyXG5cclxuZXhwb3J0IHtcclxuICAgIHR5cGUgRnB2RXJyb3JDb2RlLFxyXG4gICAgdHlwZSBGcHZFcnJvcixcclxuICAgIHR5cGUgRnB2SXNoLFxyXG4gICAgRnB2XHJcbn0gZnJvbSBcIkByb290XCI7XHJcblxyXG5cclxuZXhwb3J0IHtcclxuICAgIHR5cGUgRHluQ29uc3RydWN0b3IsXHJcbiAgICB0eXBlIER5bldyYXBwZXIsXHJcbiAgICBBbGxvYyxcclxuICAgIERlQWxsb2MsXHJcbiAgICBEeW5cclxufSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcbmV4cG9ydCB7XHJcbiAgICB0eXBlIFJlZkRlbFRhc2ssXHJcbiAgICB0eXBlIFJlZlRhc2ssXHJcbiAgICBSZWZcclxufSBmcm9tIFwiQHJvb3RcIjsiLCAiXCJyYWlzZSAxXCI7XHJcblxyXG5pbXBvcnQgdHlwZSB7IEVyclZhbE9mQWxsIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB0eXBlIHsgT2tWYWxPZkFsbCB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgdHlwZSB7IFJlc3VsdEhhbmRsZXIgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHR5cGUgeyBDbG9zdXJlIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB0eXBlIHsgQXN5bmNDbG9zdXJlIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IE9rIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IEVyciB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBVbnNhZmUgfSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcbi8qKlxyXG4gKiAqKipCcmllZioqKlxyXG4gKiBBIHdyYXBwZXIgdGhhdCBlbmNhcHN1bGF0ZXMgZWl0aGVyIGEgc3VjY2Vzc2Z1bCBvdXRjb21lIGBPazxUMT5gIG9yIGEgZmFpbHVyZSBgRXJyPFQyPmAuXHJcbiAqIFxyXG4gKiAqKipFeGFtcGxlKioqXHJcbiAqIGBgYHRzXHJcbiAqICBmdW5jdGlvbiBmb28oKTogUmVzdWx0PDIwMG4sIDQwNG4+IHtcclxuICogICAgICBpZiAoKSByZXR1cm4gT2soMjAwbik7XHJcbiAqICAgICAgcmV0dXJuIEVycig0MDRuKTtcclxuICogIH1cclxuICogXHJcbiAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj4gPSBmb28oKTtcclxuICogIGlmIChyZXN1bHQub2soKSkge1xyXG4gKiAgICAgIGxldCB2YWx1ZTogMjAwbiA9IHJlc3VsdC51bmxvY2soKTtcclxuICogICAgICAvLy8gLi4uXHJcbiAqICB9XHJcbiAqIGBgYFxyXG4gKi9cclxuZXhwb3J0IHR5cGUgUmVzdWx0PFQxLCBUMj4gPSBPazxUMT4gfCBFcnI8VDI+O1xyXG5cclxuZXhwb3J0IGNvbnN0IFJlc3VsdDogUmVzdWx0SGFuZGxlciA9ICgoKSA9PiB7XHJcbiAgICAvKiogQGNvbnN0cnVjdG9yICovIHtcclxuICAgICAgICByZXR1cm4geyBhbGwsIGFueSwgd3JhcCwgd3JhcEFzeW5jIH07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYWxsPFQxIGV4dGVuZHMgQXJyYXk8UmVzdWx0PHVua25vd24sIHVua25vd24+Pj4ocmVzdWx0czogVDEpOiBSZXN1bHQ8T2tWYWxPZkFsbDxUMT4sIEVyclZhbE9mQWxsPFQxPltudW1iZXJdPiB7XHJcbiAgICAgICAgbGV0IG91dDogQXJyYXk8dW5rbm93bj4gPSBbXTtcclxuICAgICAgICBsZXQgaTogbnVtYmVyID0gMDtcclxuICAgICAgICB3aGlsZSAoaSA8IHJlc3VsdHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQ6IFJlc3VsdDx1bmtub3duLCB1bmtub3duPiA9IHJlc3VsdHMuYXQoaSkhO1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0Lm9rKCkpIG91dC5wdXNoKHJlc3VsdC51bmxvY2soKSk7XHJcbiAgICAgICAgICAgIGVsc2UgcmV0dXJuIHJlc3VsdCBhcyBFcnI8RXJyVmFsT2ZBbGw8VDE+W251bWJlcl0+O1xyXG4gICAgICAgICAgICBpICsrO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gT2soKG91dCBhcyBPa1ZhbE9mQWxsPFQxPikpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGFueTxUMSBleHRlbmRzIEFycmF5PFJlc3VsdDx1bmtub3duLCB1bmtub3duPj4+KHJlc3VsdHM6IFQxKTogUmVzdWx0PE9rVmFsT2ZBbGw8VDE+W251bWJlcl0sIEVyclZhbE9mQWxsPFQxPj4ge1xyXG4gICAgICAgIGxldCBvdXQ6IEFycmF5PHVua25vd24+ID0gW107XHJcbiAgICAgICAgbGV0IGk6IG51bWJlciA9IDA7XHJcbiAgICAgICAgd2hpbGUgKGkgPCByZXN1bHRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBsZXQgd3JhcHBlcjogUmVzdWx0PHVua25vd24sIHVua25vd24+ID0gcmVzdWx0cy5hdChpKSE7XHJcbiAgICAgICAgICAgIGlmICh3cmFwcGVyLm9rKCkpIHJldHVybiB3cmFwcGVyIGFzIE9rPE9rVmFsT2ZBbGw8VDE+W251bWJlcl0+O1xyXG4gICAgICAgICAgICBlbHNlIG91dC5wdXNoKHdyYXBwZXIuaW5zcGVjdCgpKTtcclxuICAgICAgICAgICAgaSArKztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIEVycigob3V0IGFzIEVyclZhbE9mQWxsPFQxPikpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBmdW5jdGlvbiB3cmFwPFQxLCBUMiwgVDMgZXh0ZW5kcyBBcnJheTxUMj4+KHRhc2s6IENsb3N1cmU8VDMsIFQxPiwgLi4ucGF5bG9hZDogVDMpOiBSZXN1bHQ8VDEsIFVuc2FmZT4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJldHVybiBPayh0YXNrKC4uLnBheWxvYWQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEVycihVbnNhZmUoZSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBmdW5jdGlvbiB3cmFwQXN5bmM8VDEsIFQyLCBUMyBleHRlbmRzIEFycmF5PFQyPj4odGFzazogQXN5bmNDbG9zdXJlPFQzLCBUMT4sIC4uLnBheWxvYWQ6IFQzKTogUHJvbWlzZTxSZXN1bHQ8VDEsIFVuc2FmZT4+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXR1cm4gT2soKGF3YWl0IHRhc2soLi4ucGF5bG9hZCkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEVycihVbnNhZmUoZSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSkoKTsiLCAiXCJyYWlzZSAxXCI7XHJcblxyXG5pbXBvcnQgdHlwZSB7IE9wdGlvbkhhbmRsZXIgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHR5cGUgeyBTb21lVmFsT2ZBbGwgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgU29tZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBOb25lIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IGlzQnJhbmRlZCB9IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuLyoqXHJcbiAqICoqKkJyaWVmKioqXHJcbiAqIEEgdHlwZSB0aGF0IHJlcHJlc2VudHMgYW4gb3B0aW9uYWwgdmFsdWUsIGVuY2Fwc3VsYXRpbmcgZWl0aGVyIGEgdmFsdWUgYFNvbWVgIFxyXG4gKiBvciB0aGUgYWJzZW5jZSBvZiBhIHZhbHVlIGBOb25lYC5cclxuICovXHJcbmV4cG9ydCB0eXBlIE9wdGlvbjxUMT4gPSBTb21lPFQxPiB8IE5vbmU7XHJcblxyXG5leHBvcnQgY29uc3QgT3B0aW9uOiBPcHRpb25IYW5kbGVyID0gKCgpID0+IHtcclxuICAgIC8qKiBAY29uc3RydWN0b3IgKi8ge1xyXG4gICAgICAgIHJldHVybiB7IGlzT3B0aW9uLCBpc1NvbWUsIGlzTm9uZSwgZmxhZywgYWxsLCBhbnkgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBpc09wdGlvbih1bmtub3duOiB1bmtub3duKTogdW5rbm93biBpcyBPcHRpb248dW5rbm93bj4ge1xyXG4gICAgICAgIHJldHVybiBpc1NvbWUodW5rbm93bikgfHwgaXNOb25lKHVua25vd24pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGlzU29tZSh1bmtub3duOiB1bmtub3duKTogdW5rbm93biBpcyBTb21lPHVua25vd24+IHtcclxuICAgICAgICByZXR1cm4gaXNCcmFuZGVkKHVua25vd24sIFwiU29tZVwiKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBpc05vbmUodW5rbm93bjogdW5rbm93bik6IHVua25vd24gaXMgTm9uZSB7XHJcbiAgICAgICAgcmV0dXJuIGlzQnJhbmRlZCh1bmtub3duLCBcIk5vbmVcIik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZmxhZzxUMT4odmFsdWU6IFQxIHwgbnVsbCB8IHVuZGVmaW5lZCk6IE9wdGlvbjxUMT4ge1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuIE5vbmU7XHJcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybiBOb25lO1xyXG4gICAgICAgIHJldHVybiBTb21lKCh2YWx1ZSBhcyBUMSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGFsbDxUMSBleHRlbmRzIEFycmF5PE9wdGlvbjx1bmtub3duPj4+KG9wdGlvbnM6IFQxKTogT3B0aW9uPFNvbWVWYWxPZkFsbDxUMT4+IHtcclxuICAgICAgICBsZXQgb3V0OiBBcnJheTx1bmtub3duPiA9IFtdO1xyXG4gICAgICAgIGxldCBpOiBudW1iZXIgPSAwO1xyXG4gICAgICAgIHdoaWxlIChpIDwgb3B0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgbGV0IG9wdGlvbjogT3B0aW9uPHVua25vd24+ID0gb3B0aW9ucy5hdChpKSE7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb24ubm9uZSgpKSByZXR1cm4gb3B0aW9uIGFzIE5vbmU7XHJcbiAgICAgICAgICAgIG91dC5wdXNoKG9wdGlvbi51bmxvY2soKSk7XHJcbiAgICAgICAgICAgIGkgKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBTb21lKG91dCBhcyBTb21lVmFsT2ZBbGw8VDE+KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBhbnk8VDEgZXh0ZW5kcyBBcnJheTxPcHRpb248dW5rbm93bj4+PihvcHRpb25zOiBUMSk6IE9wdGlvbjxTb21lVmFsT2ZBbGw8VDE+W251bWJlcl0+IHtcclxuICAgICAgICBsZXQgaTogbnVtYmVyID0gMDtcclxuICAgICAgICB3aGlsZSAoaSA8IG9wdGlvbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGxldCBvcHRpb246IE9wdGlvbjx1bmtub3duPiA9IG9wdGlvbnMuYXQoaSkhO1xyXG4gICAgICAgICAgICBpZiAob3B0aW9uLnNvbWUoKSkgcmV0dXJuIG9wdGlvbiBhcyBTb21lPFNvbWVWYWxPZkFsbDxUMT5bbnVtYmVyXT47XHJcbiAgICAgICAgICAgIGkgKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBOb25lO1xyXG4gICAgfVxyXG59KSgpOyIsICJpbXBvcnQgdHlwZSB7IFdyYXBwZXIgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHR5cGUgeyBQYXJzYWJsZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgdHlwZSB7IFR5cGVHdWFyZCB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgdHlwZSB7IE9wdGlvbiB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBTb21lIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IE5vbmUgfSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcbmV4cG9ydCB0eXBlIFVuc2FmZSA9XHJcbiAgICAmIFdyYXBwZXI8dW5rbm93bj5cclxuICAgICYgUGFyc2FibGU7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gVW5zYWZlKF92YWx1ZTogdW5rbm93bik6IFVuc2FmZSB7XHJcbiAgICAvKiogQGNvbnN0cnVjdG9yICovIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB1bndyYXAsXHJcbiAgICAgICAgICAgIHBhcnNlLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdW53cmFwKCk6IHVua25vd24ge1xyXG4gICAgICAgIHJldHVybiBfdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcGFyc2U8VDE+KGd1YXJkOiBUeXBlR3VhcmQ8VDE+KTogT3B0aW9uPFQxPiB7XHJcbiAgICAgICAgaWYgKCFndWFyZCh1bndyYXAoKSkpIHJldHVybiBOb25lO1xyXG4gICAgICAgIHJldHVybiBTb21lKCh1bndyYXAoKSBhcyBUMSkpO1xyXG4gICAgfVxyXG59IiwgImltcG9ydCB7IFJlc3VsdCB9IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGFsbFIgPSBSZXN1bHQuYWxsO1xyXG5leHBvcnQgY29uc3QgYW55UiA9IFJlc3VsdC5hbnk7XHJcbmV4cG9ydCBjb25zdCB3cmFwID0gUmVzdWx0LndyYXA7XHJcbmV4cG9ydCBjb25zdCB3cmFwQXN5bmMgPSBSZXN1bHQud3JhcEFzeW5jOyIsICJpbXBvcnQgdHlwZSB7IEZ1bmN0aW9uIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB0eXBlIHsgVW5sb2NrZWRXcmFwcGVyIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB0eXBlIHsgT3B0aW9uIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB0eXBlIHsgUmVzdWx0IH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IEVycm9yIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IEVyciB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBTb21lIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IHBhbmljIH0gZnJvbSBcIkByb290XCI7XHJcblxyXG5leHBvcnQgdHlwZSBPazxUMT4gPSBcclxuICAgICYgVW5sb2NrZWRXcmFwcGVyPFQxPlxyXG4gICAgJiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogYG9rYCBjaGVja3MgaWYgdGhlIGN1cnJlbnQgaW5zdGFuY2UgaXMgYE9rYC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj47XHJcbiAgICAgKiAgaWYgKHJlc3VsdC5vaygpKSB7XHJcbiAgICAgKiAgICAgIGxldCB2YWx1ZTogMjAwbiA9IHJlc3VsdC51bmxvY2soKTtcclxuICAgICAqICAgICAgLy8vIC4uLlxyXG4gICAgICogIH1cclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBvaygpOiB0aGlzIGlzIE9rPFQxPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBgZXJyYCBjaGVja3MgaWYgdGhlIGN1cnJlbnQgaW5zdGFuY2UgaXMgYEVycmAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+O1xyXG4gICAgICogIGlmIChyZXN1bHQuZXJyKCkpIHtcclxuICAgICAqICAgICAgbGV0IGU6IDQwNG4gPSByZXN1bHQuaW5zcGVjdCgpO1xyXG4gICAgICogICAgICAvLy8gLi4uXHJcbiAgICAgKiAgfVxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIGVycigpOiB0aGlzIGlzIEVycjx1bmtub3duPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBgZXhwZWN0YCB0ZXJtaW5hdGVzIHdpdGggYHBhbmljYCBpZiB0aGUgYFJlc3VsdGAgaXMgYEVycmAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKldhcm5pbmcqKipcclxuICAgICAqIFJlc2VydmVkIGZvciBkZWJ1Z2dpbmcgb3IgdW5yZWNvdmVyYWJsZSBlcnJvcnMuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+O1xyXG4gICAgICogIGxldCBzdGF0dXM6IDIwMG4gPSByZXN1bHQuZXhwZWN0KFwiVGhpcyBpcyB1bmV4cGVjdGVkIGFuZCB1bnJlY292ZXJhYmxlLlwiKTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBleHBlY3QoX186IHVua25vd24pOiBUMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBFbnN1cmVzIHRoYXQgdGhlIGBSZXN1bHRgIGlzIGFuIGBFcnJgIGFuZCByZXRyaWV2ZXMgdGhlIGVycm9yIHZhbHVlIGluc2lkZS5cclxuICAgICAqIFxyXG4gICAgICogKioqV2FybmluZyoqKlxyXG4gICAgICogUmVzZXJ2ZWQgZm9yIGRlYnVnZ2luZyBvciB1bnJlY292ZXJhYmxlIGVycm9ycy5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj47XHJcbiAgICAgKiAgbGV0IHN0YXR1czogNDA0biA9IHJlc3VsdC5leHBlY3RFcnIoXCJUaGlzIGlzIHVuZXhwZWN0ZWQgYW5kIHVucmVjb3ZlcmFibGUuXCIpO1xyXG4gICAgICogYGBgXHJcbiAgICAqL1xyXG4gICAgZXhwZWN0RXJyKG1lc3NhZ2U6IHN0cmluZyk6IG5ldmVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIFJldHJpZXZlcyB0aGUgdmFsdWUgb2YgYW4gYE9rYCwgb3IgZmFsbHMgYmFjayB0byB0aGUgcHJvdmlkZWQgdmFsdWUgaWYgaXRcdTIwMTlzIGFuIGBFcnJgLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPiA9IEVycig0MDRuKTtcclxuICAgICAqICBsZXQgc3RhdHVzOiAyMDBuID0gcmVzdWx0LnVubG9ja09yKDIwMG4pO1xyXG4gICAgICogIGNvbnNvbGUubG9nKHN0YXR1cyk7IC8vLyAyMDBuLlxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIHVubG9ja09yKF9fOiB1bmtub3duKTogVDE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogUmVjb3ZlcnMgZnJvbSB0aGUgY3VycmVudCBlcnJvciBieSBhcHBseWluZyBhIHJlY292ZXJ5IGZ1bmN0aW9uLCB0cmFuc2Zvcm1pbmcgdGhlIGBFcnJgIGludG8gYW4gYE9rYC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj4gPSBFcnIoNDA0bik7XHJcbiAgICAgKiAgbGV0IHN0YXR1czogMjAwbiA9IHJlc3VsdFxyXG4gICAgICogICAgICAucmVjb3ZlcigoKSA9PiB7XHJcbiAgICAgKiAgICAgICAgICByZXR1cm4gMjAwbjtcclxuICAgICAqICAgICAgfSlcclxuICAgICAqICAgICAgLnVubG9jaygpO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIHJlY292ZXIoX186IHVua25vd24pOiBPazxUMT47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogQXBwbGllcyBhIHRyYW5zZm9ybWF0aW9uIHRvIHRoZSBgT2tgIHZhbHVlIGFuZCByZXR1cm5zIGFuIGBFcnJgIGluc3RhbmNlIHdpdGggdGhlIHRyYW5zZm9ybWVkIHZhbHVlLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPiA9IE9rKDIwMG4pO1xyXG4gICAgICogIGxldCBlOiA0MDRuID0gcmVzdWx0XHJcbiAgICAgKiAgICAgIC5kZWdyYWRlKCgpID0+IHtcclxuICAgICAqICAgICAgICAgIHJldHVybiA0MDRuO1xyXG4gICAgICogICAgICB9KVxyXG4gICAgICogICAgICAuaW5zcGVjdCgpO1xyXG4gICAgICogIGNvbnNvbGUubG9nKGUpOyAvLy8gNDA0bi5cclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBkZWdyYWRlPFQyPih0YXNrOiBGdW5jdGlvbjxUMSwgVDI+KTogRXJyPFQyPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBDaGFpbnMgYW4gdGFzayB1bnRpbCB0aGUgZmlyc3QgYEVycmAgaXMgZW5jb3VudGVyZWQuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+ID0gRXJyKDQwNG4pO1xyXG4gICAgICogIHJlc3VsdFxyXG4gICAgICogICAgICAuYW5kKHZhbHVlID0+IHtcclxuICAgICAqICAgICAgICAgIC8vLyBUYXNrIGlzIHNraXBwZWQgYmVjYXVzZSBgUmVzdWx0YCBpcyBhbiBgRXJyYC5cclxuICAgICAqICAgICAgICAgIC8vLyAuLi5cclxuICAgICAqICAgICAgICAgIHJldHVybiBPayh2YWx1ZSArIDFuKTtcclxuICAgICAqICAgICAgfSlcclxuICAgICAqICAgICAgLmFuZCh2YWx1ZSA9PiB7XHJcbiAgICAgKiAgICAgICAgICAvLy8gVGFzayBpcyBza2lwcGVkIGJlY2F1c2UgYFJlc3VsdGAgaXMgYW4gYEVycmAuXHJcbiAgICAgKiAgICAgICAgICAvLy8gLi4uXHJcbiAgICAgKiAgICAgIH0pO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIGFuZDxUMj4odGFzazogRnVuY3Rpb248VDEsIE9rPFQyPj4pOiBPazxUMj47XHJcbiAgICBhbmQ8VDI+KHRhc2s6IEZ1bmN0aW9uPFQxLCBFcnI8VDI+Pik6IFJlc3VsdDxUMSwgVDI+O1xyXG4gICAgYW5kPFQyLCBUMz4odGFzazogRnVuY3Rpb248VDEsIFJlc3VsdDxUMiwgVDM+Pik6IFJlc3VsdDxUMiwgVDM+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIFRyYW5zZm9ybXMgdGhlIGBPa2AgdmFsdWUgaWYgcHJlc2VudCwgYnV0IGlmIHRoaXMgaXMgYWxyZWFkeSBhbiBgRXJyYCwgaXQgcmVtYWlucyB1bmNoYW5nZWQuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDA6IFJlc3VsdDwyMDBuLCA0MDRuPiA9IE9rKDIwMG4pO1xyXG4gICAgICogIGxldCByZXN1bHQxOiBSZXN1bHQ8MjAxbiwgNDA0bj4gPSByZXN1bHQubWFwKHZhbHVlID0+IHtcclxuICAgICAqICAgICAgLy8vIFRhc2sgaXMgcnVuIGJlY2F1c2UgYFJlc3VsdGAgaXMgYE9rYC5cclxuICAgICAqICAgICAgLy8vIC4uLlxyXG4gICAgICogICAgICByZXR1cm4gdmFsdWUgKyAxbjtcclxuICAgICAqICB9KTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBtYXA8VDI+KHRhc2s6IEZ1bmN0aW9uPFQxLCBUMj4pOiBPazxUMj47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogVHJhbnNmb3JtcyB0aGUgZXJyb3IgY29udGFpbmVkIGluIHRoZSBgRXJyYCB1c2luZyB0aGUgcHJvdmlkZWQgYHRhc2tgIGZ1bmN0aW9uLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPiA9IEVycig0MDRuKTtcclxuICAgICAqICByZXN1bHRcclxuICAgICAqICAgICAgLm1hcEVycihlID0+IHtcclxuICAgICAqICAgICAgICAgIHJldHVybiBlICsgMW47XHJcbiAgICAgKiAgICAgIH0pXHJcbiAgICAgKiAgICAgIC5pbnNwZWN0KCk7IC8vLyA0MDVuLlxyXG4gICAgICogYGBgXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+ID0gT2soMjAwbik7XHJcbiAgICAgKiAgcmVzdWx0XHJcbiAgICAgKiAgICAgIC5tYXBFcnIoZSA9PiB7XHJcbiAgICAgKiAgICAgICAgICAvLy8gVGFzayBpcyBydW4gYmVjYXVzZSBgUmVzdWx0YCBpcyBgT2tgLlxyXG4gICAgICogICAgICAgICAgLy8vIC4uLlxyXG4gICAgICogICAgICB9KTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBtYXBFcnIoX186IHVua25vd24pOiBPazxUMT47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogQ29udmVydHMgYSBgUmVzdWx0PFQxLCBUMj5gIHRvIGFuIGBPcHRpb248VDE+YC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj47XHJcbiAgICAgKiAgbGV0IG9wdGlvbjogT3B0aW9uPDIwMG4+ID0gcmVzdWx0LnRvT3B0aW9uKCk7XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgdG9PcHRpb24oKTogT3B0aW9uPFQxPjtcclxufTtcclxuXHJcbi8qKlxyXG4gKiAqKipCcmllZioqKlxyXG4gKiBUaGUgc3VjY2Vzc2Z1bCB2YWx1ZSB3aXRoaW4gYSBgUmVzdWx0YC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBPazxUMT4oX3ZhbHVlOiBUMSk6IE9rPFQxPiB7XHJcbiAgICBsZXQgX3RoaXM6IE9rPFQxPjtcclxuXHJcbiAgICAvKiogQGNvbnN0cnVjdG9yICovIHtcclxuICAgICAgICByZXR1cm4gX3RoaXMgPSB7XHJcbiAgICAgICAgICAgIG9rLFxyXG4gICAgICAgICAgICBlcnIsXHJcbiAgICAgICAgICAgIGV4cGVjdCxcclxuICAgICAgICAgICAgZXhwZWN0RXJyLFxyXG4gICAgICAgICAgICB1bmxvY2ssXHJcbiAgICAgICAgICAgIHVubG9ja09yLFxyXG4gICAgICAgICAgICBhbmQsXHJcbiAgICAgICAgICAgIG1hcCxcclxuICAgICAgICAgICAgbWFwRXJyLFxyXG4gICAgICAgICAgICByZWNvdmVyLFxyXG4gICAgICAgICAgICBkZWdyYWRlLFxyXG4gICAgICAgICAgICB0b09wdGlvblxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gb2soKTogdGhpcyBpcyBPazxUMT4ge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGVycigpOiB0aGlzIGlzIEVycjx1bmtub3duPiB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGV4cGVjdChfXzogdW5rbm93bik6IFQxIHtcclxuICAgICAgICByZXR1cm4gdW5sb2NrKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZXhwZWN0RXJyKG1lc3NhZ2U6IHN0cmluZyk6IG5ldmVyIHtcclxuICAgICAgICBwYW5pYyhFcnJvcihcIlBBTklDXCIsIG1lc3NhZ2UpKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB1bmxvY2soKTogVDEge1xyXG4gICAgICAgIHJldHVybiBfdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdW5sb2NrT3IoX186IHVua25vd24pOiBUMSB7XHJcbiAgICAgICAgcmV0dXJuIHVubG9jaygpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGFuZDxUMj4odGFzazogRnVuY3Rpb248VDEsIE9rPFQyPj4pOiBPazxUMj47XHJcbiAgICBmdW5jdGlvbiBhbmQ8VDI+KHRhc2s6IEZ1bmN0aW9uPFQxLCBFcnI8VDI+Pik6IFJlc3VsdDxUMSwgVDI+O1xyXG4gICAgZnVuY3Rpb24gYW5kPFQyLCBUMz4odGFzazogRnVuY3Rpb248VDEsIFJlc3VsdDxUMiwgVDM+Pik6IFJlc3VsdDxUMiwgVDM+O1xyXG4gICAgZnVuY3Rpb24gYW5kPFQyLCBUMz4odGFzazogRnVuY3Rpb248VDEsIFJlc3VsdDxUMiwgVDM+Pik6IFJlc3VsdDxUMiwgVDM+IHtcclxuICAgICAgICByZXR1cm4gdGFzayh1bmxvY2soKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbWFwPFQyPih0YXNrOiBGdW5jdGlvbjxUMSwgVDI+KTogT2s8VDI+IHtcclxuICAgICAgICByZXR1cm4gT2sodGFzayh1bmxvY2soKSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG1hcEVycihfXzogdW5rbm93bik6IE9rPFQxPiB7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJlY292ZXIoX186IHVua25vd24pOiBPazxUMT4ge1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkZWdyYWRlPFQyPih0YXNrOiBGdW5jdGlvbjxUMSwgVDI+KTogRXJyPFQyPiB7XHJcbiAgICAgICAgcmV0dXJuIEVycih0YXNrKHVubG9jaygpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdG9PcHRpb24oKTogT3B0aW9uPFQxPiB7XHJcbiAgICAgICAgcmV0dXJuIFNvbWUodW5sb2NrKCkpO1xyXG4gICAgfVxyXG59IiwgImltcG9ydCB0eXBlIHsgRnVuY3Rpb24gfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHR5cGUgeyBPcHRpb24gfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgRXJyb3JIYW5kbGVyIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IEVycm9yIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IE9rIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IE5vbmUgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgU29tZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBwYW5pYyB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyB3cmFwIH0gZnJvbSBcIkByb290XCI7XHJcblxyXG5leHBvcnQgdHlwZSBFcnI8VDE+ID0ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIGBva2AgY2hlY2tzIGlmIHRoZSBjdXJyZW50IGluc3RhbmNlIGlzIGBPa2AuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+O1xyXG4gICAgICogIGlmIChyZXN1bHQub2soKSkge1xyXG4gICAgICogICAgICBsZXQgdmFsdWU6IDIwMG4gPSByZXN1bHQudW5sb2NrKCk7XHJcbiAgICAgKiAgICAgIC8vLyAuLi5cclxuICAgICAqICB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgb2soKTogdGhpcyBpcyBPazx1bmtub3duPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBgZXJyYCBjaGVja3MgaWYgdGhlIGN1cnJlbnQgaW5zdGFuY2UgaXMgYEVycmAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+O1xyXG4gICAgICogIGlmIChyZXN1bHQuZXJyKCkpIHtcclxuICAgICAqICAgICAgbGV0IGU6IDQwNG4gPSByZXN1bHQuaW5zcGVjdCgpO1xyXG4gICAgICogICAgICAvLy8gLi4uXHJcbiAgICAgKiAgfVxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIGVycigpOiB0aGlzIGlzIEVycjxUMT47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogUmV0cmlldmVzIHRoZSBlcnJvciB2YWx1ZSBlbmNhcHN1bGF0ZWQgYnkgdGhlIGBFcnJgIGluc3RhbmNlLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPjtcclxuICAgICAqICBpZiAocmVzdWx0LmVycigpKSB7XHJcbiAgICAgKiAgICAgIGxldCBlOiA0MDRuID0gcmVzdWx0Lmluc3BlY3QoKTtcclxuICAgICAqICAgICAgLy8vIC4uLlxyXG4gICAgICogIH1cclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBpbnNwZWN0KCk6IFQxO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIFJldHJpZXZlcyB0aGUgc3RhY2sgdHJhY2Ugb2YgdGhlIGVycm9yLCBnZW5lcmF0ZWQgYXQgdGhlIHRpbWUgdGhlIGBFcnJgIGluc3RhbmNlIHdhcyBjcmVhdGVkLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPjtcclxuICAgICAqICBpZiAocmVzdWx0LmVycigpKSB7XHJcbiAgICAgKiAgICAgIHJlc3VsdFxyXG4gICAgICogICAgICAgICAgLnN0YWNrKClcclxuICAgICAqICAgICAgICAgIC5saW5lcygpXHJcbiAgICAgKiAgICAgICAgICAuZm9yRWFjaChsaW5lID0+IHtcclxuICAgICAqICAgICAgICAgICAgICBsZXQgbGluZVJlcHJlc2VudGF0aW9uOiBzdHJpbmcgPSBsaW5lLnRvU3RyaW5nKCk7XHJcbiAgICAgKiAgICAgICAgICAgICAgLy8vIC4uLlxyXG4gICAgICogICAgICAgICAgICAgIHJldHVybjsgXHJcbiAgICAgKiAgICAgICAgICB9KTtcclxuICAgICAqICB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgc3RhY2soKTogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIGBleHBlY3RgIHRlcm1pbmF0ZXMgd2l0aCBgcGFuaWNgIGlmIHRoZSBgUmVzdWx0YCBpcyBgRXJyYC5cclxuICAgICAqIFxyXG4gICAgICogKioqV2FybmluZyoqKlxyXG4gICAgICogUmVzZXJ2ZWQgZm9yIGRlYnVnZ2luZyBvciB1bnJlY292ZXJhYmxlIGVycm9ycy5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj47XHJcbiAgICAgKiAgbGV0IHN0YXR1czogMjAwbiA9IHJlc3VsdC5leHBlY3QoXCJUaGlzIGlzIHVuZXhwZWN0ZWQgYW5kIHVucmVjb3ZlcmFibGUuXCIpO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIGV4cGVjdChtZXNzYWdlOiBzdHJpbmcpOiBuZXZlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBFbnN1cmVzIHRoYXQgdGhlIGBSZXN1bHRgIGlzIGFuIGBFcnJgIGFuZCByZXRyaWV2ZXMgdGhlIGVycm9yIHZhbHVlIGluc2lkZS5cclxuICAgICAqIFxyXG4gICAgICogKioqV2FybmluZyoqKlxyXG4gICAgICogUmVzZXJ2ZWQgZm9yIGRlYnVnZ2luZyBvciB1bnJlY292ZXJhYmxlIGVycm9ycy5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj47XHJcbiAgICAgKiAgbGV0IHN0YXR1czogNDA0biA9IHJlc3VsdC5leHBlY3RFcnIoXCJUaGlzIGlzIHVuZXhwZWN0ZWQgYW5kIHVucmVjb3ZlcmFibGUuXCIpO1xyXG4gICAgICogYGBgXHJcbiAgICAqL1xyXG4gICAgZXhwZWN0RXJyKF9fOiB1bmtub3duKTogVDE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogUmV0cmlldmVzIHRoZSB2YWx1ZSBvZiBhbiBgT2tgLCBvciBmYWxscyBiYWNrIHRvIHRoZSBwcm92aWRlZCB2YWx1ZSBpZiBpdFx1MjAxOXMgYW4gYEVycmAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+ID0gRXJyKDQwNG4pO1xyXG4gICAgICogIGxldCBzdGF0dXM6IDIwMG4gPSByZXN1bHQudW5sb2NrT3IoMjAwbik7XHJcbiAgICAgKiAgY29uc29sZS5sb2coc3RhdHVzKTsgLy8vIDIwMG4uXHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgdW5sb2NrT3I8VDI+KGZhbGxiYWNrOiBUMik6IFQyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIENoYWlucyBhbiB0YXNrIHVudGlsIHRoZSBmaXJzdCBgRXJyYCBpcyBlbmNvdW50ZXJlZC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj4gPSBFcnIoNDA0bik7XHJcbiAgICAgKiAgcmVzdWx0XHJcbiAgICAgKiAgICAgIC5hbmQodmFsdWUgPT4ge1xyXG4gICAgICogICAgICAgICAgLy8vIFRhc2sgaXMgc2tpcHBlZCBiZWNhdXNlIGBSZXN1bHRgIGlzIGFuIGBFcnJgLlxyXG4gICAgICogICAgICAgICAgLy8vIC4uLlxyXG4gICAgICogICAgICAgICAgcmV0dXJuIE9rKHZhbHVlICsgMW4pO1xyXG4gICAgICogICAgICB9KVxyXG4gICAgICogICAgICAuYW5kKHZhbHVlID0+IHtcclxuICAgICAqICAgICAgICAgIC8vLyBUYXNrIGlzIHNraXBwZWQgYmVjYXVzZSBgUmVzdWx0YCBpcyBhbiBgRXJyYC5cclxuICAgICAqICAgICAgICAgIC8vLyAuLi5cclxuICAgICAqICAgICAgfSk7XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgYW5kKF9fOiB1bmtub3duKTogRXJyPFQxPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBUcmFuc2Zvcm1zIHRoZSBgT2tgIHZhbHVlIGlmIHByZXNlbnQsIGJ1dCBpZiB0aGlzIGlzIGFscmVhZHkgYW4gYEVycmAsIGl0IHJlbWFpbnMgdW5jaGFuZ2VkLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQwOiBSZXN1bHQ8MjAwbiwgNDA0bj4gPSBPaygyMDBuKTtcclxuICAgICAqICBsZXQgcmVzdWx0MTogUmVzdWx0PDIwMW4sIDQwNG4+ID0gcmVzdWx0Lm1hcCh2YWx1ZSA9PiB7XHJcbiAgICAgKiAgICAgIC8vLyBUYXNrIGlzIHJ1biBiZWNhdXNlIGBSZXN1bHRgIGlzIGBPa2AuXHJcbiAgICAgKiAgICAgIC8vLyAuLi5cclxuICAgICAqICAgICAgcmV0dXJuIHZhbHVlICsgMW47XHJcbiAgICAgKiAgfSk7XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgbWFwKF9fOiB1bmtub3duKTogRXJyPFQxPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBUcmFuc2Zvcm1zIHRoZSBlcnJvciBjb250YWluZWQgaW4gdGhlIGBFcnJgIHVzaW5nIHRoZSBwcm92aWRlZCBgdGFza2AgZnVuY3Rpb24uXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+ID0gRXJyKDQwNG4pO1xyXG4gICAgICogIHJlc3VsdFxyXG4gICAgICogICAgICAubWFwRXJyKGUgPT4ge1xyXG4gICAgICogICAgICAgICAgcmV0dXJuIGUgKyAxbjtcclxuICAgICAqICAgICAgfSlcclxuICAgICAqICAgICAgLmluc3BlY3QoKTsgLy8vIDQwNW4uXHJcbiAgICAgKiBgYGBcclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj4gPSBPaygyMDBuKTtcclxuICAgICAqICByZXN1bHRcclxuICAgICAqICAgICAgLm1hcEVycihlID0+IHtcclxuICAgICAqICAgICAgICAgIC8vLyBUYXNrIGlzIHJ1biBiZWNhdXNlIGBSZXN1bHRgIGlzIGBPa2AuXHJcbiAgICAgKiAgICAgICAgICAvLy8gLi4uXHJcbiAgICAgKiAgICAgIH0pO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIG1hcEVycjxUMj4odGFzazogRnVuY3Rpb248VDEsIFQyPik6IEVycjxUMj47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogUmVjb3ZlcnMgZnJvbSB0aGUgY3VycmVudCBlcnJvciBieSBhcHBseWluZyBhIHJlY292ZXJ5IGZ1bmN0aW9uLCB0cmFuc2Zvcm1pbmcgdGhlIGBFcnJgIGludG8gYW4gYE9rYC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj4gPSBFcnIoNDA0bik7XHJcbiAgICAgKiAgbGV0IHN0YXR1czogMjAwbiA9IHJlc3VsdFxyXG4gICAgICogICAgICAucmVjb3ZlcigoKSA9PiB7XHJcbiAgICAgKiAgICAgICAgICByZXR1cm4gMjAwbjtcclxuICAgICAqICAgICAgfSlcclxuICAgICAqICAgICAgLnVubG9jaygpO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIHJlY292ZXI8VDI+KHRhc2s6IEZ1bmN0aW9uPFQxLCBUMj4pOiBPazxUMj47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogQXBwbGllcyBhIHRyYW5zZm9ybWF0aW9uIHRvIHRoZSBgT2tgIHZhbHVlIGFuZCByZXR1cm5zIGFuIGBFcnJgIGluc3RhbmNlIHdpdGggdGhlIHRyYW5zZm9ybWVkIHZhbHVlLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPiA9IE9rKDIwMG4pO1xyXG4gICAgICogIGxldCBlOiA0MDRuID0gcmVzdWx0XHJcbiAgICAgKiAgICAgIC5kZWdyYWRlKCgpID0+IHtcclxuICAgICAqICAgICAgICAgIHJldHVybiA0MDRuO1xyXG4gICAgICogICAgICB9KVxyXG4gICAgICogICAgICAuaW5zcGVjdCgpO1xyXG4gICAgICogIGNvbnNvbGUubG9nKGUpOyAvLy8gNDA0bi5cclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBkZWdyYWRlKF9fOiB1bmtub3duKTogRXJyPFQxPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBDb252ZXJ0cyBhIGBSZXN1bHQ8VDEsIFQyPmAgdG8gYW4gYE9wdGlvbjxUMT5gLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPjtcclxuICAgICAqICBsZXQgb3B0aW9uOiBPcHRpb248MjAwbj4gPSByZXN1bHQudG9PcHRpb24oKTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICB0b09wdGlvbigpOiBPcHRpb248bmV2ZXI+O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqICoqKkJyaWVmKioqXHJcbiAqIFRoZSBmYWlsZWQgc3RhdGUgb2YgYSBgUmVzdWx0YC5cclxuICogXHJcbiAqICoqKldhcm5pbmcqKipcclxuICogQW55IG9wZXJhdGlvbiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBhIGBSZXN1bHRgIG11c3Qgc2FmZWx5IGhhbmRsZSB0aGUgYEVycmAgc3RhdGUgb3IgdGVybWluYXRlIHdpdGggYW4gZXJyb3IuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gRXJyPFQxPihfdmFsdWU6IFQxLCBfaGFuZGxlcj86IEVycm9ySGFuZGxlcik6IEVycjxUMT4ge1xyXG4gICAgbGV0IF90aGlzOiBFcnI8VDE+O1xyXG4gICAgbGV0IF9zdGFjazogc3RyaW5nO1xyXG4gICAgXHJcbiAgICAvKiogQGNvbnN0cnVjdG9yICovIHtcclxuICAgICAgICBfaGFuZGxlciA/Pz0gRXJyb3JIYW5kbGVyO1xyXG4gICAgICAgIF9zdGFjayA9IF9oYW5kbGVyLnBhcnNlU3RhY2tUcmFjZShFcnIpO1xyXG4gICAgICAgIHJldHVybiBfdGhpcyA9IHtcclxuICAgICAgICAgICAgb2ssXHJcbiAgICAgICAgICAgIGVycixcclxuICAgICAgICAgICAgaW5zcGVjdCxcclxuICAgICAgICAgICAgc3RhY2ssXHJcbiAgICAgICAgICAgIGV4cGVjdCxcclxuICAgICAgICAgICAgZXhwZWN0RXJyLFxyXG4gICAgICAgICAgICB1bmxvY2tPcixcclxuICAgICAgICAgICAgYW5kLFxyXG4gICAgICAgICAgICBtYXAsXHJcbiAgICAgICAgICAgIG1hcEVycixcclxuICAgICAgICAgICAgcmVjb3ZlcixcclxuICAgICAgICAgICAgZGVncmFkZSxcclxuICAgICAgICAgICAgdG9PcHRpb25cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG9rKCk6IHRoaXMgaXMgT2s8dW5rbm93bj4ge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBlcnIoKTogdGhpcyBpcyBFcnI8VDE+IHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBpbnNwZWN0KCk6IFQxIHtcclxuICAgICAgICByZXR1cm4gX3ZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHN0YWNrKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIF9zdGFjaztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBleHBlY3QobWVzc2FnZTogc3RyaW5nKTogbmV2ZXIge1xyXG4gICAgICAgIGxldCBlOiBUMSA9IGluc3BlY3QoKTtcclxuICAgICAgICBsZXQgY29kZU86IE9wdGlvbjxzdHJpbmc+ID0gTm9uZTtcclxuICAgICAgICBsZXQgbWVzc2FnZU86IE9wdGlvbjxzdHJpbmc+ID0gTm9uZTtcclxuICAgICAgICBsZXQgc3RhY2tPOiBPcHRpb248U3RhY2tUcmFjZT4gPSBOb25lO1xyXG4gICAgICAgIGlmIChlICE9PSBudWxsICYmIGUgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZSA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICBpZiAoXCJjb2RlXCIgaW4gZSAmJiB0eXBlb2YgZS5jb2RlID09PSBcInN0cmluZ1wiKSBjb2RlTyA9IFNvbWUoZS5jb2RlKTtcclxuICAgICAgICAgICAgaWYgKFwibWVzc2FnZVwiIGluIGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZS5tZXNzYWdlID09PSBcInN0cmluZ1wiKSBtZXNzYWdlTyA9IFNvbWUoZS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHdyYXAoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWU6IHVua25vd24gPSAoZS5tZXNzYWdlIGFzIGFueSkudW5sb2NrT3IodW5kZWZpbmVkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSAhPT0gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgdmFsdWUgIT09IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkpIHRocm93IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLm1hcChtZXNzYWdlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZU8gPSBTb21lKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKFwic3RhY2tcIiBpbiBlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGUuc3RhY2sgPT09IFwic3RyaW5nXCIpIHN0YWNrTyA9IFNvbWUoU3RhY2tUcmFjZShlLnN0YWNrKSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB3cmFwKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHZhbHVlOiB1bmtub3duID0gKGUuc3RhY2sgYXMgYW55KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSAhPT0gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgdmFsdWUgIT09IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiBcInRvU3RyaW5nXCIgaW4gdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIFwibGluZXNcIiBpbiB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgdHlwZW9mIHZhbHVlLnRvU3RyaW5nID09PSBcImZ1bmN0aW9uXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIHR5cGVvZiB2YWx1ZS5saW5lcyA9PT0gXCJmdW5jdGlvblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiB0eXBlb2YgdmFsdWUudG9TdHJpbmcoKSA9PT0gXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZS5saW5lcygpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApKSB0aHJvdyB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9KS5tYXAoc3RhY2sgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLy8gVGhlcmUgbWF5IGJlIGVkZ2UgY2FzZSB3aGVyZSB0aGlzIG1heSBub3QgYmUgdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLy8gYmV0dGVyIHZhbGlkYXRpb24gd2lsbCBiZSByZXF1aXJlZCBpbiB0aGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8vIGZ1dHVyZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2tPID0gU29tZSgoc3RhY2sgYXMgU3RhY2tUcmFjZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcGFuaWMoRXJyb3Ioe1xyXG4gICAgICAgICAgICBjb2RlOiBjb2RlTy51bmxvY2tPcihcIlBBTklDXCIpLFxyXG4gICAgICAgICAgICBtZXNzYWdlOiBTb21lKG1lc3NhZ2VPLnVubG9ja09yKFwiVGhlIHRyYW5zaWVudCBlcnJvciBkaWQgbm90IGNvbWUgd2l0aCBhIG1lc3NhZ2UuXCIpICtcclxuICAgICAgICAgICAgICAgIFwiXFxuXCIgKyBcIkNvbnRleHQ6IFwiICsgbWVzc2FnZVxyXG4gICAgICAgICAgICApLFxyXG4gICAgICAgICAgICBwYXlsb2FkOiBOb25lLFxyXG4gICAgICAgICAgICBzdGFjazogc3RhY2tPLnVubG9ja09yKFN0YWNrVHJhY2UoZXhwZWN0KSlcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZXhwZWN0RXJyKF9fOiB1bmtub3duKTogVDEge1xyXG4gICAgICAgIHJldHVybiBpbnNwZWN0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdW5sb2NrT3I8VDI+KGZhbGxiYWNrOiBUMik6IFQyIHtcclxuICAgICAgICByZXR1cm4gZmFsbGJhY2s7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYW5kKF9fOiB1bmtub3duKTogRXJyPFQxPiB7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG1hcChfXzogdW5rbm93bik6IEVycjxUMT4ge1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtYXBFcnI8VDI+KHRhc2s6IEZ1bmN0aW9uPFQxLCBUMj4pOiBFcnI8VDI+IHtcclxuICAgICAgICByZXR1cm4gRXJyKHRhc2soaW5zcGVjdCgpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmVjb3ZlcjxUMj4odGFzazogRnVuY3Rpb248VDEsIFQyPik6IE9rPFQyPiB7XHJcbiAgICAgICAgcmV0dXJuIE9rKHRhc2soaW5zcGVjdCgpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZGVncmFkZShfXzogdW5rbm93bik6IEVycjxUMT4ge1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB0b09wdGlvbigpOiBPcHRpb248bmV2ZXI+IHtcclxuICAgICAgICByZXR1cm4gTm9uZTtcclxuICAgIH1cclxufSIsICJpbXBvcnQgdHlwZSB7IFJlZkRlbFRhc2sgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHR5cGUgeyBSZWZUYXNrIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB0eXBlIHsgV3JhcHBlciB9IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuZXhwb3J0IHR5cGUgUmVmPFQxPiA9IFxyXG4gICAgJiBXcmFwcGVyPFQxPiBcclxuICAgICYge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIE11dGF0ZXMgdGhlIGludGVybmFsIHZhbHVlIG9mIHRoZSBgUmVmYCBpbnN0YW5jZS5cclxuICAgICAqL1xyXG4gICAgbXV0KHZhbHVlOiBUMSk6IFJlZjxUMT47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogUmVnaXN0ZXJzIGEgY2FsbGJhY2sgdGhhdCBpcyBpbnZva2VkIHdoZW5ldmVyIHRoZSB2YWx1ZSBjaGFuZ2VzLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZWY6IFJlZjxiaWdpbnQ+ID0gUmVmKDIwMG4pO1xyXG4gICAgICogIHJlZi5vbkNoYW5nZSh2YWx1ZSA9PiB7XHJcbiAgICAgKiAgICAgIC8vLyAuLi5cclxuICAgICAqICAgICAgcmV0dXJuO1xyXG4gICAgICogIH0pO1xyXG4gICAgICogIHJlZi5tdXQoNDA0bik7XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgb25DaGFuZ2UodGFzazogUmVmVGFzazxUMT4pOiBSZWZEZWxUYXNrO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqICoqKkJyaWVmKioqXHJcbiAqIFdyYXBwZXIgdGhhdCBzdXBwb3J0cyBtdXRhdGlvbiBhbmQgY2hhbmdlIHRyYWNraW5nLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIFJlZjxUMT4oX3ZhbHVlOiBUMSk6IFJlZjxUMT4ge1xyXG4gICAgbGV0IF90aGlzOiBSZWY8VDE+O1xyXG4gICAgbGV0IF9jb3VudDogYmlnaW50O1xyXG4gICAgbGV0IF90YXNrTWFwOiBNYXA8YmlnaW50LCBSZWZUYXNrPFQxPj47XHJcblxyXG4gICAgLyoqIEBjb25zdHJ1Y3RvciAqLyB7XHJcbiAgICAgICAgX2NvdW50ID0gMG47XHJcbiAgICAgICAgX3Rhc2tNYXAgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzID0geyB1bndyYXAsIG11dCwgb25DaGFuZ2UgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB1bndyYXAoKTogVDEge1xyXG4gICAgICAgIHJldHVybiBfdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbXV0KHZhbHVlOiBUMSk6IFJlZjxUMT4ge1xyXG4gICAgICAgIGxldCBvbGRWYWx1ZTogVDEgPSB1bndyYXAoKTtcclxuICAgICAgICBsZXQgbmV3VmFsdWU6IFQxID0gdmFsdWU7XHJcbiAgICAgICAgX3ZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgX3Rhc2tNYXBcclxuICAgICAgICAgICAgLnZhbHVlcygpXHJcbiAgICAgICAgICAgIC50b0FycmF5KClcclxuICAgICAgICAgICAgLmZvckVhY2godGFzayA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFzayhuZXdWYWx1ZSwgb2xkVmFsdWUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gb25DaGFuZ2UodGFzazogUmVmVGFzazxUMT4pOiBSZWZEZWxUYXNrIHtcclxuICAgICAgICBsZXQga2V5OiBiaWdpbnQgPSBfZ2VuS2V5KCk7XHJcbiAgICAgICAgX3Rhc2tNYXAuc2V0KGtleSwgdGFzayk7XHJcbiAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgX3Rhc2tNYXAuZGVsZXRlKGtleSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX2dlbktleSgpOiBiaWdpbnQge1xyXG4gICAgICAgIHJldHVybiBfY291bnQgKz0gMW47XHJcbiAgICB9XHJcbn0iLCAiaW1wb3J0IHR5cGUgeyBDbG9zdXJlIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB0eXBlIHsgT3B0aW9uIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IElOVEVSTkFMX0VSUk9SX01FU1NBR0UgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgQWxsb2MgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgRGVBbGxvYyB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBTb21lIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IE5vbmUgfSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcbmV4cG9ydCB0eXBlIER5bjxUMT4gPSBBbGxvYzxUMT4gfCBEZUFsbG9jPFQxPjtcclxuXHJcbi8qKlxyXG4gKiAqKipCcmllZioqKlxyXG4gKiBBIGR5bmFtaWMgcmVzb3VyY2UgbWFuYWdlbWVudCBwYXR0ZXJuLCBhbGxvd2luZyBmb3JcclxuICogYWxsb2NhdGlvbiBhbmQgZGVhbGxvY2F0aW9uIG9mIHJlc291cmNlcyB3aXRoIHByb3BlciBsaWZlY3ljbGUgaGFuZGxpbmcuXHJcbiAqIFxyXG4gKiAqKipXYXJuaW5nKioqXHJcbiAqIFRoZSBgRHluYCB3cmFwcGVyIG11c3QgYmUgcHJvcGVybHkgbWFuYWdlZCB0byBhdm9pZCBtZW1vcnkgbGVha3MuIElmIHRoZSB3cmFwcGVyIGl0c2VsZiBpcyBnYXJiYWdlIGNvbGxlY3RlZCBcclxuICogd2l0aG91dCBpdHMgY29udGVudCBiZWluZyBleHBsaWNpdGx5IGRlYWxsb2NhdGVkLCB0aGUgcmVzb3VyY2VzIGl0IG1hbmFnZXMgd2lsbCBub3QgYmUgcmVjeWNsZWQgXHJcbiAqIGFuZCBtYWRlIGF2YWlsYWJsZSBmb3IgcmV1c2UuIEVuc3VyZSBhbGwgYWxsb2NhdGVkIHJlc291cmNlcyBhcmUgZGVhbGxvY2F0ZWQgYmVmb3JlIHRoZSBgRHluYCBpbnN0YW5jZSBnb2VzIG91dCBvZiBzY29wZS5cclxuICogXHJcbiAqICoqKkV4YW1wbGUqKipcclxuICogYGBgdHNcclxuICogIHR5cGUgQ2FyID0ge1xyXG4gKiAgICAgIGRyaXZlKCk6IHZvaWQ7XHJcbiAqICB9O1xyXG4gKiBcclxuICogIGNvbnN0IENhcjogRHluQ29uc3RydWN0b3I8Q2FyLCBbX21vZGVsOiBzdHJpbmddPiA9IER5bihcclxuICogICAgICAoX21vZGVsOiBzdHJpbmcpID0+IHtcclxuICogICAgICAgICAgY29uc3RydWN0b3Ige1xyXG4gKiAgICAgICAgICAgICAgcmV0dXJuIHsgZHJpdmUgfTtcclxuICogICAgICAgICAgfVxyXG4gKiBcclxuICogICAgICAgICAgZnVuY3Rpb24gZHJpdmUoKTogdm9pZCB7XHJcbiAqICAgICAgICAgICAgICByZXR1cm4gXCJWcm9vbS5cIjtcclxuICogICAgICAgICAgfVxyXG4gKiAgICAgIH0sXHJcbiAqICAgICAgY2FyID0+IHtcclxuICogICAgICAgICAgLy8vIFJlc2V0IGNhciBvciBhbnkgdGFza3MgYmVmb3JlIGl0IGlzIG1hZGUgYXZhaWxhYmxlIGFnYWluLlxyXG4gKiAgICAgICAgICAvLy8gLi4uXHJcbiAqICAgICAgICAgIHJldHVybiBjYXI7XHJcbiAqICAgICAgfSwgMzJuLCBcIk1vZGVsVFwiXHJcbiAqICApO1xyXG4gKiBcclxuICogIGxldCBjYXI6IER5bjxDYXI+ID0gQ2FyKFwiTW9kZWxGXCIpO1xyXG4gKiAgY2FyID0gY2FyLmRlQWxsb2MoKTtcclxuICogIGNhci5tYXAoY2FyID0+IHtcclxuICogICAgICAvLy8gV2lsbCBub3QgcnVuIGJlY2F1c2UgYGNhcmAgaGFzIGJlZW4gZGVhbGxvY2F0ZWQuXHJcbiAqICAgICAgLy8vIC4uLlxyXG4gKiAgfSk7XHJcbiAqIGBgYFxyXG4gKiBcclxuICogKioqRXhhbXBsZSoqKlxyXG4gKiBgYGB0c1xyXG4gKiAgLy8vIFdhcm5pbmcuXHJcbiAqICBsZXQgY2FyOiBEeW48Q2FyPiA9IENhcihcIk1vZGVsQlwiKTtcclxuICogIGNhci5kZUFsbG9jKCk7XHJcbiAqICBjYXIubWFwKGNhciA9PiB7XHJcbiAqICAgICAgLy8vIFdpbGwgcnVuIGJlY2F1c2UgdGhlIGNhciBtdXN0IGJlIHVwZGF0ZWQgdG8gdGhlIG5ldyBzdGF0ZS5cclxuICogICAgICAvLy8gQWx3YXlzIGFzc2lnbiB0aGUgYGRlQWxsb2NgIHJlc3VsdCBhIG5ldyBgRHluYCB3cmFwcGVyIG9yXHJcbiAqICAgICAgLy8vIGl0c2VsZi5cclxuICogICAgICAvLy8gLi4uXHJcbiAqICB9KTtcclxuICogYGBgXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gRHluPFQxLCBUMiBleHRlbmRzIEFycmF5PHVua25vd24+PihfY29uc3RydWN0b3I6IENsb3N1cmU8VDIsIFQxPiwgX29uRGVBbGxvYzogQ2xvc3VyZTxbVDFdLCBUMT4sIF9sb2FkOiBiaWdpbnQsIC4uLl9vbkxvYWRQYXlsb2FkOiBUMik6IENsb3N1cmU8VDIsIER5bjxUMT4+IHtcclxuICAgIGxldCBfYXZhaWxhYmxlOiBNYXA8YmlnaW50LCBUMT47XHJcbiAgICBsZXQgX2NvdW50OiBiaWdpbnQ7XHJcblxyXG4gICAgLyoqIEBjb25zdHJ1Y3RvciAqLyB7XHJcbiAgICAgICAgX2F2YWlsYWJsZSA9IG5ldyBNYXAoKTtcclxuICAgICAgICBfY291bnQgPSAwbjtcclxuICAgICAgICBsZXQgaTogYmlnaW50ID0gMG47XHJcbiAgICAgICAgd2hpbGUgKGkgPCBfbG9hZCkge1xyXG4gICAgICAgICAgICBsZXQga2V5OiBiaWdpbnQgPSBfZ2VuS2V5KCk7XHJcbiAgICAgICAgICAgIF9hdmFpbGFibGUuc2V0KGtleSwgX2NvbnN0cnVjdG9yKC4uLl9vbkxvYWRQYXlsb2FkKSk7XHJcbiAgICAgICAgICAgIGkgKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoLi4ucGF5bG9hZDogVDIpOiBEeW48VDE+IHtcclxuICAgICAgICAgICAgbGV0IF9rZXk6IE9wdGlvbjxiaWdpbnQ+O1xyXG4gICAgICAgICAgICBsZXQgX3RoaXM6IER5bjxUMT47XHJcbiAgICBcclxuICAgICAgICAgICAgLyoqIEBjb25zdHJ1Y3RvciAqLyB7XHJcbiAgICAgICAgICAgICAgICBfa2V5ID0gTm9uZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcyA9IGFsbG9jKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGFsbG9jKCk6IEFsbG9jPFQxPiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX3JlY3ljbGVkS2V5KClcclxuICAgICAgICAgICAgICAgICAgICAudG9SZXN1bHQodW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoa2V5ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2tleSA9IFNvbWUoa2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEFsbG9jKF9yZWN5bGVkKGtleSksIHsgZGVBbGxvYyB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZWNvdmVyKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2tleSA9IFNvbWUoX2dlbktleSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEFsbG9jKF9jb25zdHJ1Y3RvciguLi5wYXlsb2FkKSwgeyBkZUFsbG9jIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLnVubG9jaygpOyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAgICAgZnVuY3Rpb24gZGVBbGxvYygpOiBEZUFsbG9jPFQxPiB7XHJcbiAgICAgICAgICAgICAgICBfa2V5XHJcbiAgICAgICAgICAgICAgICAgICAgLnRvUmVzdWx0KHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICAubWFwKGtleSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vLyBJZiB0aGUga2V5IGlzIGF2YWlsYWJsZSB0aGVuIGl0IGlzIGFsbG9jYXRlZC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2tleSA9IE5vbmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZWN5bGUoa2V5LCBfb25EZUFsbG9jKF90aGlzLmV4cGVjdChcIkR5bjogQ291bGQgbm90IGRlYWxsb2NhdGUgcmVzb3VyY2UgYnV0IHRoZSBrZXkgd2FzIGF2YWlsYWJsZS5cIiArIElOVEVSTkFMX0VSUk9SX01FU1NBR0UpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcyA9IERlQWxsb2MoeyBkZUFsbG9jIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfZ2VuS2V5KCk6IGJpZ2ludCB7XHJcbiAgICAgICAgcmV0dXJuIF9jb3VudCArPSAxbjtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfcmVjeWNsZWRLZXkoKTogT3B0aW9uPGJpZ2ludD4ge1xyXG4gICAgICAgIGxldCBrZXk6IGJpZ2ludCB8IHVuZGVmaW5lZCA9IF9hdmFpbGFibGVcclxuICAgICAgICAgICAgLmtleXMoKVxyXG4gICAgICAgICAgICAudG9BcnJheSgpXHJcbiAgICAgICAgICAgIC5hdCgwKTtcclxuICAgICAgICBpZiAoIWtleSkgcmV0dXJuIE5vbmU7XHJcbiAgICAgICAgcmV0dXJuIFNvbWUoa2V5KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfcmVjeWxlZChrZXk6IGJpZ2ludCk6IFQxIHtcclxuICAgICAgICBsZXQgdmFsdWU6IFQxID0gX2F2YWlsYWJsZS5nZXQoa2V5KSE7XHJcbiAgICAgICAgX2F2YWlsYWJsZS5kZWxldGUoa2V5KTtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX3JlY3lsZShrZXk6IGJpZ2ludCwgdmFsdWU6IFQxKTogdm9pZCB7XHJcbiAgICAgICAgX2F2YWlsYWJsZS5zZXQoa2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG59IiwgImltcG9ydCB0eXBlIHsgRHluV3JhcHBlciB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBOb25lIH0gZnJvbSBcIkByb290XCJcclxuXHJcbmV4cG9ydCB0eXBlIERlQWxsb2M8VDE+ID0gXHJcbiAgICAmIER5bldyYXBwZXI8VDE+XHJcbiAgICAmIE5vbmU7XHJcblxyXG4vKipcclxuICogKioqQnJpZWYqKipcclxuICogVGhlIGRlYWxsb2NhdGVkIHN0YXRlIG9mIGFuIGFsbG9jYXRlZCByZXNvdXJjZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBEZUFsbG9jPFQxPihfZHluOiBEeW5XcmFwcGVyPFQxPik6IERlQWxsb2M8VDE+IHtcclxuICAgIC8qKiBAY29uc3RydWN0b3IgKi8ge1xyXG4gICAgICAgIHJldHVybiB7IC4uLiBOb25lLCAuLi4gX2R5biB9O1xyXG4gICAgfVxyXG59IiwgImltcG9ydCB0eXBlIHsgRHluV3JhcHBlciB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgdHlwZSB7IFVubG9ja2VkV3JhcHBlciB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBTb21lIH0gZnJvbSBcIkByb290XCI7XHJcblxyXG5leHBvcnQgdHlwZSBBbGxvYzxUMT4gPVxyXG4gICAgJiBEeW5XcmFwcGVyPFQxPlxyXG4gICAgJiBVbmxvY2tlZFdyYXBwZXI8VDE+XHJcbiAgICAmIFNvbWU8VDE+O1xyXG5cclxuLyoqXHJcbiAqICoqKkJyaWVmKioqXHJcbiAqIFRoZSBhbGxvY2F0ZWQgc3RhdGUgb2YgYW4gYWxsb2NhdGVkIHJlc291cmNlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIEFsbG9jPFQxPihfdmFsdWU6IFQxLCBfZHluOiBEeW5XcmFwcGVyPFQxPik6IEFsbG9jPFQxPiB7XHJcbiAgICAvKiogQGNvbnN0cnVjdG9yICovIHtcclxuICAgICAgICByZXR1cm4geyAuLi4gU29tZShfdmFsdWUpLCAuLi4gX2R5biB9O1xyXG4gICAgfVxyXG59IiwgImltcG9ydCB7IE9wdGlvbiB9IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGlzT3B0aW9uID0gT3B0aW9uLmlzT3B0aW9uO1xyXG5leHBvcnQgY29uc3QgaXNTb21lID0gT3B0aW9uLmlzU29tZTtcclxuZXhwb3J0IGNvbnN0IGlzTm9uZSA9IE9wdGlvbi5pc05vbmU7XHJcbmV4cG9ydCBjb25zdCBmbGFnID0gT3B0aW9uLmZsYWc7XHJcbmV4cG9ydCBjb25zdCBhbGxPID0gT3B0aW9uLmFsbDtcclxuZXhwb3J0IGNvbnN0IGFueU8gPSBPcHRpb24uYW55OyIsICJpbXBvcnQgdHlwZSB7IEZ1bmN0aW9uIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB0eXBlIHsgT3B0aW9uIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB0eXBlIHsgVW5sb2NrZWRXcmFwcGVyIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB0eXBlIHsgQnJhbmRlZCB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBOb25lIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IE9rIH0gZnJvbSBcIkByb290XCI7XHJcblxyXG5leHBvcnQgdHlwZSBTb21lPFQxPiA9IFxyXG4gICAgJiBCcmFuZGVkPFwiU29tZVwiPlxyXG4gICAgJiBVbmxvY2tlZFdyYXBwZXI8VDE+XHJcbiAgICAmIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBgc29tZWAgY2hlY2tzIGlmIHRoZSBjdXJyZW50IGluc3RhbmNlIGlzIGBTb21lYC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgb3B0aW9uOiBPcHRpb248MjAwbj47XHJcbiAgICAgKiAgaWYgKG9wdGlvbi5zb21lKCkpIHtcclxuICAgICAqICAgICAgbGV0IHZhbHVlOiAyMDBuID0gb3B0aW9uLnVubG9jaygpO1xyXG4gICAgICogICAgICAvLy8gLi4uXHJcbiAgICAgKiAgfVxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIHNvbWUoKTogdGhpcyBpcyBTb21lPFQxPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBgbm9uZWAgY2hlY2tzIGlmIHRoZSBjdXJyZW50IGluc3RhbmNlIGlzIGBOb25lYC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgb3B0aW9uOiBPcHRpb248MjAwbj47XHJcbiAgICAgKiAgaWYgKG9wdGlvbi5ub25lKCkpIHtcclxuICAgICAqICAgICAgLy8vIGBPcHRpb25gIGNhbm5vdCBgdW5sb2NrYCBiZWNhdXNlIGl0IGlzIGBOb25lYC5cclxuICAgICAqICAgICAgLy8vIC4uLlxyXG4gICAgICogIH1cclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBub25lKCk6IHRoaXMgaXMgTm9uZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBgZXhwZWN0YCB0ZXJtaW5hdGVzIHdpdGggYHBhbmljYCBpZiB0aGUgYE9wdGlvbmAgaXMgYE5vbmVgLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipXYXJuaW5nKioqXHJcbiAgICAgKiBSZXNlcnZlZCBmb3IgZGVidWdnaW5nIG9yIHVucmVjb3ZlcmFibGUgZXJyb3JzLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCBvcHRpb246IE9wdGlvbjwyMDBuPjtcclxuICAgICAqICBsZXQgc3RhdHVzOiAyMDBuID0gb3B0aW9uLmV4cGVjdChcIlRoaXMgaXMgdW5leHBlY3RlZCBhbmQgdW5yZWNvdmVyYWJsZS5cIik7XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgZXhwZWN0KF9fOiB1bmtub3duKTogVDE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogUmV0cmlldmVzIHRoZSB2YWx1ZSBvZiBhIGBTb21lYCwgb3IgZmFsbHMgYmFjayB0byB0aGUgcHJvdmlkZWQgdmFsdWUgaWYgaXRcdTIwMTlzIGBOb25lYC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgb3B0aW9uOiBPcHRpb248MjAwbj4gPSBOb25lO1xyXG4gICAgICogIGxldCBzdGF0dXM6IDIwMG4gPSBvcHRpb24udW5sb2NrT3IoMjAwbik7XHJcbiAgICAgKiAgY29uc29sZS5sb2coc3RhdHVzKTsgLy8vIDIwMG4uXHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgdW5sb2NrT3IoX186IHVua25vd24pOiBUMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBDaGFpbnMgYW4gdGFzayB1bnRpbCB0aGUgZmlyc3QgYE5vbmVgIGlzIGVuY291bnRlcmVkLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCBvcHRpb246IE9wdGlvbjwyMDBuPiA9IE5vbmU7XHJcbiAgICAgKiAgb3B0aW9uXHJcbiAgICAgKiAgICAgIC5hbmQodmFsdWUgPT4ge1xyXG4gICAgICogICAgICAgICAgLy8vIFRhc2sgaXMgc2tpcHBlZCBiZWNhdXNlIGBPcHRpb25gIGlzIGBOb25lYC5cclxuICAgICAqICAgICAgICAgIC8vLyAuLi5cclxuICAgICAqICAgICAgICAgIHJldHVybiBTb21lKHZhbHVlICsgMW4pO1xyXG4gICAgICogICAgICB9KVxyXG4gICAgICogICAgICAuYW5kKHZhbHVlID0+IHtcclxuICAgICAqICAgICAgICAgIC8vLyBUYXNrIGlzIHNraXBwZWQgYmVjYXVzZSBgT3B0aW9uYCBpcyBgTm9uZWAuXHJcbiAgICAgKiAgICAgICAgICAvLy8gLi4uXHJcbiAgICAgKiAgICAgIH0pO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIGFuZDxUMj4odGFzazogRnVuY3Rpb248VDEsIE9wdGlvbjxUMj4+KTogT3B0aW9uPFQyPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBUcmFuc2Zvcm1zIHRoZSBgU29tZWAgdmFsdWUgaWYgcHJlc2VudCwgYnV0IGlmIHRoaXMgaXMgYWxyZWFkeSBhbiBgTm9uZWAsIGl0IHJlbWFpbnMgdW5jaGFuZ2VkLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCBvcHRpb24wOiBPcHRpb248MjAwbj4gPSBTb21lKDIwMG4pO1xyXG4gICAgICogIGxldCBvcHRpb24xOiBPcHRpb248MjAxbj4gPSBvcHRpb24ubWFwKHZhbHVlID0+IHtcclxuICAgICAqICAgICAgLy8vIFRhc2sgaXMgcnVuIGJlY2F1c2UgYE9wdGlvbmAgaXMgYFNvbWVgLlxyXG4gICAgICogICAgICAvLy8gLi4uXHJcbiAgICAgKiAgICAgIHJldHVybiB2YWx1ZSArIDFuO1xyXG4gICAgICogIH0pO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIG1hcDxUMj4odGFzazogRnVuY3Rpb248VDEsIFQyPik6IFNvbWU8VDI+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIENvbnZlcnRzIGFuIGBPcHRpb248VDE+YCB0byBhIGBSZXN1bHQ8VDEsIFQyPmAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IG9wdGlvbjogT3B0aW9uPDIwMG4+O1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPiA9IG9wdGlvbi50b1Jlc3VsdCg0MDRuKTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICB0b1Jlc3VsdChfXzogdW5rbm93bik6IE9rPFQxPjtcclxufTtcclxuXHJcbi8qKlxyXG4gKiAqKipCcmllZioqKlxyXG4gKiBUaGUgdmFsdWUgd2l0aGluIGFuIGBPcHRpb25gLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIFNvbWU8VDE+KF92YWx1ZTogVDEpOiBTb21lPFQxPiB7XHJcbiAgICAvKiogQGNvbnN0cnVjdG9yICovIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0eXBlLFxyXG4gICAgICAgICAgICBzb21lLFxyXG4gICAgICAgICAgICBub25lLFxyXG4gICAgICAgICAgICBleHBlY3QsXHJcbiAgICAgICAgICAgIHVubG9jayxcclxuICAgICAgICAgICAgdW5sb2NrT3IsXHJcbiAgICAgICAgICAgIGFuZCxcclxuICAgICAgICAgICAgbWFwLFxyXG4gICAgICAgICAgICB0b1Jlc3VsdFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdHlwZSgpOiBcIlNvbWVcIiB7XHJcbiAgICAgICAgcmV0dXJuIFwiU29tZVwiO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNvbWUoKTogdGhpcyBpcyBTb21lPFQxPiB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbm9uZSgpOiB0aGlzIGlzIE5vbmUge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBleHBlY3QoX186IHVua25vd24pOiBUMSB7XHJcbiAgICAgICAgcmV0dXJuIF92YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB1bmxvY2soKTogVDEge1xyXG4gICAgICAgIHJldHVybiBfdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdW5sb2NrT3IoX186IHVua25vd24pOiBUMSB7XHJcbiAgICAgICAgcmV0dXJuIF92YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBhbmQ8VDI+KHRhc2s6IEZ1bmN0aW9uPFQxLCBPcHRpb248VDI+Pik6IE9wdGlvbjxUMj4ge1xyXG4gICAgICAgIHJldHVybiB0YXNrKF92YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbWFwPFQyPih0YXNrOiBGdW5jdGlvbjxUMSwgVDI+KTogU29tZTxUMj4ge1xyXG4gICAgICAgIHJldHVybiBTb21lKHRhc2soX3ZhbHVlKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdG9SZXN1bHQoX186IHVua25vd24pOiBPazxUMT4ge1xyXG4gICAgICAgIHJldHVybiBPayhfdmFsdWUpO1xyXG4gICAgfVxyXG59IiwgImltcG9ydCB0eXBlIHsgQnJhbmRlZCB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBTb21lIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IEVyciB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBFcnJvciB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBwYW5pYyB9IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuZXhwb3J0IHR5cGUgTm9uZSA9IFxyXG4gICAgJiBCcmFuZGVkPFwiTm9uZVwiPlxyXG4gICAgJiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogYHNvbWVgIGNoZWNrcyBpZiB0aGUgY3VycmVudCBpbnN0YW5jZSBpcyBgU29tZWAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IG9wdGlvbjogT3B0aW9uPDIwMG4+O1xyXG4gICAgICogIGlmIChvcHRpb24uc29tZSgpKSB7XHJcbiAgICAgKiAgICAgIGxldCB2YWx1ZTogMjAwbiA9IG9wdGlvbi51bmxvY2soKTtcclxuICAgICAqICAgICAgLy8vIC4uLlxyXG4gICAgICogIH1cclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBzb21lKCk6IHRoaXMgaXMgU29tZTx1bmtub3duPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBgbm9uZWAgY2hlY2tzIGlmIHRoZSBjdXJyZW50IGluc3RhbmNlIGlzIGBOb25lYC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgb3B0aW9uOiBPcHRpb248MjAwbj47XHJcbiAgICAgKiAgaWYgKG9wdGlvbi5ub25lKCkpIHtcclxuICAgICAqICAgICAgLy8vIGBPcHRpb25gIGNhbm5vdCBgdW5sb2NrYCBiZWNhdXNlIGl0IGlzIGBOb25lYC5cclxuICAgICAqICAgICAgLy8vIC4uLlxyXG4gICAgICogIH1cclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBub25lKCk6IHRoaXMgaXMgTm9uZTtcclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogYGV4cGVjdGAgdGVybWluYXRlcyB3aXRoIGBwYW5pY2AgaWYgdGhlIGBPcHRpb25gIGlzIGBOb25lYC5cclxuICAgICAqIFxyXG4gICAgICogKioqV2FybmluZyoqKlxyXG4gICAgICogUmVzZXJ2ZWQgZm9yIGRlYnVnZ2luZyBvciB1bnJlY292ZXJhYmxlIGVycm9ycy5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgb3B0aW9uOiBPcHRpb248MjAwbj47XHJcbiAgICAgKiAgbGV0IHN0YXR1czogMjAwbiA9IG9wdGlvbi5leHBlY3QoXCJUaGlzIGlzIHVuZXhwZWN0ZWQgYW5kIHVucmVjb3ZlcmFibGUuXCIpO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIGV4cGVjdChtZXNzYWdlOiBzdHJpbmcpOiBuZXZlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIHZhbHVlIG9mIGEgYFNvbWVgLCBvciBmYWxscyBiYWNrIHRvIHRoZSBwcm92aWRlZCB2YWx1ZSBpZiBpdFx1MjAxOXMgYE5vbmVgLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCBvcHRpb246IE9wdGlvbjwyMDBuPiA9IE5vbmU7XHJcbiAgICAgKiAgbGV0IHN0YXR1czogMjAwbiA9IG9wdGlvbi51bmxvY2tPcigyMDBuKTtcclxuICAgICAqICBjb25zb2xlLmxvZyhzdGF0dXMpOyAvLy8gMjAwbi5cclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICB1bmxvY2tPcjxUMj4oZmFsbGJhY2s6IFQyKTogVDI7XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIENoYWlucyBhbiB0YXNrIHVudGlsIHRoZSBmaXJzdCBgTm9uZWAgaXMgZW5jb3VudGVyZWQuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IG9wdGlvbjogT3B0aW9uPDIwMG4+ID0gTm9uZTtcclxuICAgICAqICBvcHRpb25cclxuICAgICAqICAgICAgLmFuZCh2YWx1ZSA9PiB7XHJcbiAgICAgKiAgICAgICAgICAvLy8gVGFzayBpcyBza2lwcGVkIGJlY2F1c2UgYE9wdGlvbmAgaXMgYE5vbmVgLlxyXG4gICAgICogICAgICAgICAgLy8vIC4uLlxyXG4gICAgICogICAgICAgICAgcmV0dXJuIFNvbWUodmFsdWUgKyAxbik7XHJcbiAgICAgKiAgICAgIH0pXHJcbiAgICAgKiAgICAgIC5hbmQodmFsdWUgPT4ge1xyXG4gICAgICogICAgICAgICAgLy8vIFRhc2sgaXMgc2tpcHBlZCBiZWNhdXNlIGBPcHRpb25gIGlzIGBOb25lYC5cclxuICAgICAqICAgICAgICAgIC8vLyAuLi5cclxuICAgICAqICAgICAgfSk7XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgYW5kKF9fOiB1bmtub3duKTogTm9uZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBUcmFuc2Zvcm1zIHRoZSBgU29tZWAgdmFsdWUgaWYgcHJlc2VudCwgYnV0IGlmIHRoaXMgaXMgYWxyZWFkeSBhbiBgTm9uZWAsIGl0IHJlbWFpbnMgdW5jaGFuZ2VkLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCBvcHRpb24wOiBPcHRpb248MjAwbj4gPSBTb21lKDIwMG4pO1xyXG4gICAgICogIGxldCBvcHRpb24xOiBPcHRpb248MjAxbj4gPSBvcHRpb24ubWFwKHZhbHVlID0+IHtcclxuICAgICAqICAgICAgLy8vIFRhc2sgaXMgcnVuIGJlY2F1c2UgYE9wdGlvbmAgaXMgYFNvbWVgLlxyXG4gICAgICogICAgICAvLy8gLi4uXHJcbiAgICAgKiAgICAgIHJldHVybiB2YWx1ZSArIDFuO1xyXG4gICAgICogIH0pO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIG1hcChfXzogdW5rbm93bik6IE5vbmU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogQ29udmVydHMgYW4gYE9wdGlvbjxUMT5gIHRvIGEgYFJlc3VsdDxUMSwgVDI+YC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgb3B0aW9uOiBPcHRpb248MjAwbj47XHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+ID0gb3B0aW9uLnRvUmVzdWx0KDQwNG4pO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIHRvUmVzdWx0PFQxPihlOiBUMSk6IEVycjxUMT47XHJcbn07XHJcblxyXG4vKipcclxuICogKioqQnJpZWYqKipcclxuICogVGhlIGFic2VuY2Ugb2YgYSB2YWx1ZSBvciBhbiBcImVtcHR5XCIgc3RhdGUuXHJcbiAqIFxyXG4gKiAqKipXYXJuaW5nKioqXHJcbiAqIEFueSBvcGVyYXRpb24gYXR0ZW1wdGluZyB0byBhY2Nlc3MgYW4gYE9wdGlvbmAgbXVzdCBzYWZlbHkgaGFuZGxlIHRoZSBgTm9uZWAgc3RhdGUgb3IgdGVybWluYXRlIHdpdGggYW4gZXJyb3IuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgTm9uZTogTm9uZSA9ICgoKSA9PiB7XHJcbiAgICBsZXQgX3RoaXM6IE5vbmU7XHJcblxyXG4gICAgLyoqIEBjb25zdHJ1Y3RvciAqLyB7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzID0ge1xyXG4gICAgICAgICAgICB0eXBlLFxyXG4gICAgICAgICAgICBzb21lLFxyXG4gICAgICAgICAgICBub25lLFxyXG4gICAgICAgICAgICBleHBlY3QsXHJcbiAgICAgICAgICAgIHVubG9ja09yLFxyXG4gICAgICAgICAgICBhbmQsXHJcbiAgICAgICAgICAgIG1hcCxcclxuICAgICAgICAgICAgdG9SZXN1bHRcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHR5cGUoKTogXCJOb25lXCIge1xyXG4gICAgICAgIHJldHVybiBcIk5vbmVcIjtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZnVuY3Rpb24gc29tZSgpOiB0aGlzIGlzIFNvbWU8dW5rbm93bj4ge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBub25lKCk6IHRoaXMgaXMgTm9uZSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZXhwZWN0KG1lc3NhZ2U6IHN0cmluZyk6IG5ldmVyIHtcclxuICAgICAgICBwYW5pYyhFcnJvcihcIkVSUl9WQUxVRV9SRVFVSVJFRFwiLCBtZXNzYWdlKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdW5sb2NrT3I8VDE+KGZhbGxiYWNrOiBUMSk6IFQxIHtcclxuICAgICAgICByZXR1cm4gZmFsbGJhY2s7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYW5kKF9fOiB1bmtub3duKTogTm9uZSB7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG1hcChfXzogdW5rbm93bik6IE5vbmUge1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB0b1Jlc3VsdDxUMT4oZTogVDEpOiBFcnI8VDE+IHtcclxuICAgICAgICByZXR1cm4gRXJyKGUpO1xyXG4gICAgfVxyXG59KSgpO1xyXG5cclxuXHJcblxyXG4iLCAiaW1wb3J0IHR5cGUgeyBSZXN1bHQgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHR5cGUgeyBXcmFwcGVyIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB0eXBlIHsgQ2xvc3VyZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgdHlwZSB7IEZwdklzaCB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgdHlwZSB7IEZwdkVycm9yIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IElOVEVSTkFMX0VSUk9SX01FU1NBR0UgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgRXJyb3IgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgT2sgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgRXJyIH0gZnJvbSBcIkByb290XCI7XHJcblxyXG5leHBvcnQgdHlwZSBGcHY8VDEgZXh0ZW5kcyBiaWdpbnQgPSAybj4gPSBcclxuICAgICYgV3JhcHBlcjxiaWdpbnQ+XHJcbiAgICAmIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBwcmVjaXNpb24gb2YgdGhlIGBGcHZgLlxyXG4gICAgICovXHJcbiAgICBwcmVjaXNpb24oKTogVDE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogUmV0dXJucyB0aGUgcmVwcmVzZW50YXRpb24gZmFjdG9yIG9mIHRoZSBgRnB2YCwgYmFzZWQgb24gaXRzIHByZWNpc2lvbi5cclxuICAgICAqL1xyXG4gICAgcmVwcmVzZW50YXRpb24oKTogYmlnaW50O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIEFkZHMgYSBnaXZlbiBgRnB2SXNoYCB2YWx1ZSB0byB0aGUgY3VycmVudCBgRnB2YC5cclxuICAgICAqIFxyXG4gICAgICogKioqV2FybmluZyoqKlxyXG4gICAgICogRXh0cmVtZWx5IGxhcmdlIHZhbHVlcyBtYXkgY2F1c2UgdGhlIHByb2dyYW0gdG8gcGFuaWMgZHVlIHRvIGluc3VmZmljaWVudCBtZW1vcnkuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHZhbHVlOiBiaWdpbnQgPSBGcHYoMjAwbilcclxuICAgICAqICAgICAgLmV4cGVjdChcIkZhaWxlZCB0byBpbml0aWFsaXplIEZwdi5cIilcclxuICAgICAqICAgICAgLmFkZCgxMDBuKVxyXG4gICAgICogICAgICAudW53cmFwKCk7XHJcbiAgICAgKiAgY29uc29sZS5sb2codmFsdWUpOyAvLy8gMzAwbiA9PT0gMy4wMFxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIGFkZCh2YWx1ZTogRnB2SXNoPFQxPik6IEZwdjxUMT47XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIFN1YnRyYWN0cyBhIGdpdmVuIGBGcHZJc2hgIHZhbHVlIGZyb20gdGhlIGN1cnJlbnQgYEZwdmAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKldhcm5pbmcqKipcclxuICAgICAqIEV4dHJlbWVseSBsYXJnZSB2YWx1ZXMgbWF5IGNhdXNlIHRoZSBwcm9ncmFtIHRvIHBhbmljIGR1ZSB0byBpbnN1ZmZpY2llbnQgbWVtb3J5LlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCB2YWx1ZTogYmlnaW50ID0gRnB2KDIwMG4pXHJcbiAgICAgKiAgICAgIC5leHBlY3QoXCJGYWlsZWQgdG8gaW5pdGlhbGl6ZSBGcHYuXCIpXHJcbiAgICAgKiAgICAgIC5zdWIoMTAwbilcclxuICAgICAqICAgICAgLnVud3JhcCgpO1xyXG4gICAgICogIGNvbnNvbGUubG9nKHZhbHVlKTsgLy8vIDEwMG4gPT09IDEuMDBcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBzdWIodmFsdWU6IEZwdklzaDxUMT4pOiBGcHY8VDE+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIE11bHRpcGxpZXMgdGhlIGN1cnJlbnQgYEZwdmAgYnkgYSBnaXZlbiBgRnB2SXNoYCB2YWx1ZS5cclxuICAgICAqIFxyXG4gICAgICogKioqV2FybmluZyoqKlxyXG4gICAgICogRXh0cmVtZWx5IGxhcmdlIHZhbHVlcyBtYXkgY2F1c2UgdGhlIHByb2dyYW0gdG8gcGFuaWMgZHVlIHRvIGluc3VmZmljaWVudCBtZW1vcnkuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHZhbHVlOiBiaWdpbnQgPSBGcHYoMjAwbilcclxuICAgICAqICAgICAgLmV4cGVjdChcIkZhaWxlZCB0byBpbml0aWFsaXplIEZwdi5cIilcclxuICAgICAqICAgICAgLm11bCg1MG4pIC8vLyAwLjUwXHJcbiAgICAgKiAgICAgIC51bndyYXAoKTtcclxuICAgICAqICBjb25zb2xlLmxvZyh2YWx1ZSk7IC8vLyAxMDBuID09PSAxLjAwXHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgbXVsKHZhbHVlOiBGcHZJc2g8VDE+KTogRnB2PFQxPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBEaXZpZGVzIHRoZSBjdXJyZW50IGBGcHZgIGJ5IGEgZ2l2ZW4gYEZwdklzaGAgdmFsdWUuXHJcbiAgICAgKiBcclxuICAgICAqICoqKldhcm5pbmcqKipcclxuICAgICAqIEV4dHJlbWVseSBsYXJnZSB2YWx1ZXMgbWF5IGNhdXNlIHRoZSBwcm9ncmFtIHRvIHBhbmljIGR1ZSB0byBpbnN1ZmZpY2llbnQgbWVtb3J5LlxyXG4gICAgICogXHJcbiAgICAgKiAqKipXYXJuaW5nKioqXHJcbiAgICAgKiBJZiBkaXZpZGluZyBieSB6ZXJvLCBhbiBlcnJvciB3aWxsIGJlIHJldHVybmVkLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCB2YWx1ZTogYmlnaW50ID0gRnB2KDIwMG4pXHJcbiAgICAgKiAgICAgIC5leHBlY3QoXCJGYWlsZWQgdG8gaW5pdGlhbGl6ZSBGcHYuXCIpXHJcbiAgICAgKiAgICAgIC5kaXYoNTBuKSAvLy8gMC41MFxyXG4gICAgICogICAgICAudW53cmFwKCk7XHJcbiAgICAgKiAgY29uc29sZS5sb2codmFsdWUpOyAvLy8gNDAwbiA9PT0gNC4wMFxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIGRpdih2YWx1ZTogRnB2SXNoPFQxPik6IFJlc3VsdDxGcHY8VDE+LCBGcHZFcnJvcj47XHJcbn07XHJcblxyXG4vKipcclxuICogKioqQnJpZWYqKipcclxuICogQ3JlYXRlcyBhIG5ldyBgRnB2YCB3aXRoIHRoZSBwcm92aWRlZCB2YWx1ZSBhbmQgcHJlY2lzaW9uLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIEZwdjxUMSBleHRlbmRzIGJpZ2ludCA9IDJuPihfZnB2OiBGcHZJc2g8VDE+LCBfcHJlY2lzaW9uOiBUMSA9ICgybiBhcyBhbnkpKTogUmVzdWx0PEZwdjxUMT4sIEZwdkVycm9yPiB7XHJcbiAgICBsZXQgX3ZhbHVlOiBiaWdpbnQ7XHJcbiAgICBcclxuICAgIC8qKiBAY29uc3RydWN0b3IgKi8ge1xyXG4gICAgICAgIGlmIChwcmVjaXNpb24oKSA9PT0gMG4pIHJldHVybiBFcnIoRXJyb3IoXCJGUFYuRVJSX1BSRUNJU0lPTl9JU19aRVJPXCIsIFwiRnB2OiBEb2VzIG5vdCBzdXBwb3J0IHplcm8gcHJlY2lzaW9uLlwiKSk7XHJcbiAgICAgICAgaWYgKHByZWNpc2lvbigpIDwgMG4pIHJldHVybiBFcnIoRXJyb3IoXCJGUFYuRVJSX1BSRUNJU0lPTl9JU19ORUdBVElWRVwiLCBcIkZwdjogRG9lcyBub3Qgc3VwcG9ydCBuZWdhdGl2ZSBwcmVjaXNpb24uXCIpKTtcclxuICAgICAgICBfdmFsdWUgPSBfdW53cmFwKF9mcHYpO1xyXG4gICAgICAgIHJldHVybiBPayh7XHJcbiAgICAgICAgICAgIHVud3JhcCxcclxuICAgICAgICAgICAgcHJlY2lzaW9uLFxyXG4gICAgICAgICAgICByZXByZXNlbnRhdGlvbixcclxuICAgICAgICAgICAgYWRkLFxyXG4gICAgICAgICAgICBzdWIsXHJcbiAgICAgICAgICAgIG11bCxcclxuICAgICAgICAgICAgZGl2XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGZ1bmN0aW9uIHVud3JhcCgpOiBiaWdpbnQge1xyXG4gICAgICAgIHJldHVybiBfdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcHJlY2lzaW9uKCk6IFQxIHtcclxuICAgICAgICByZXR1cm4gX3ByZWNpc2lvbjtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZXByZXNlbnRhdGlvbigpOiBiaWdpbnQge1xyXG4gICAgICAgIHJldHVybiAxMG4qKnByZWNpc2lvbigpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGFkZCh2YWx1ZTogRnB2SXNoPFQxPik6IEZwdjxUMT4ge1xyXG4gICAgICAgIHJldHVybiBfd3JhcCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBfdmFsdWUgKyBfdW53cmFwKHZhbHVlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzdWIodmFsdWU6IEZwdklzaDxUMT4pOiBGcHY8VDE+IHtcclxuICAgICAgICByZXR1cm4gX3dyYXAoKCkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gX3ZhbHVlIC0gX3Vud3JhcCh2YWx1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbXVsKHZhbHVlOiBGcHZJc2g8VDE+KTogRnB2PFQxPiB7XHJcbiAgICAgICAgcmV0dXJuIF93cmFwKCgpID0+IHtcclxuICAgICAgICAgICAgbGV0IHo6IGJpZ2ludCA9IF92YWx1ZSAqIF91bndyYXAodmFsdWUpO1xyXG4gICAgICAgICAgICBsZXQgcTogYmlnaW50ID0geiAvIHJlcHJlc2VudGF0aW9uKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBxO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRpdih2YWx1ZTogRnB2SXNoPFQxPik6IFJlc3VsdDxGcHY8VDE+LCBGcHZFcnJvcj4ge1xyXG4gICAgICAgIGxldCBuOiBiaWdpbnQgPSBfdW53cmFwKHZhbHVlKTtcclxuICAgICAgICBpZiAobiA9PT0gMG4pIHJldHVybiBFcnIoRXJyb3IoXCJGUFYuRVJSX0RJVklTSU9OX0JZX1pFUk9cIiwgXCJGcHY6IENhbm5vdCBkaXZpZGUgYnkgemVyby5cIikpO1xyXG4gICAgICAgIHJldHVybiBPayhfd3JhcCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCB6OiBiaWdpbnQgPSBfdmFsdWUgKiByZXByZXNlbnRhdGlvbigpO1xyXG4gICAgICAgICAgICBsZXQgcTogYmlnaW50ID0geiAvIG47XHJcbiAgICAgICAgICAgIHJldHVybiBxO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfd3JhcCh0YXNrOiBDbG9zdXJlPFtdLCBiaWdpbnQ+KTogRnB2PFQxPiB7XHJcbiAgICAgICAgcmV0dXJuIEZwdjxUMT4odGFzaygpKS5leHBlY3QoXCJGcHY6IEZhaWxlZCB0byB3cmFwIHRoZSB0YXNrIHJlc3VsdCBpbnRvIGFuIEZwdi5cIiArIElOVEVSTkFMX0VSUk9SX01FU1NBR0UpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF91bndyYXAoZnB2OiBGcHZJc2g8VDE+KTogYmlnaW50IHtcclxuICAgICAgICBpZiAodHlwZW9mIGZwdiA9PT0gXCJiaWdpbnRcIikgcmV0dXJuIGZwdjtcclxuICAgICAgICByZXR1cm4gZnB2LnVud3JhcCgpO1xyXG4gICAgfVxyXG59IiwgIi8qKiBcclxuICogKioqQnJpZWYqKipcclxuICogQ29udmVydHMgYHVua25vd25gIHRvIGBzdHJpbmdgLlxyXG4gKiBcclxuICogKioqV2FybmluZyoqKlxyXG4gKiBEb2VzIG5vdCBzdXBwb3J0IGNpcmN1bGFyIHJlZmVyZW5jZXMgYW5kIGNpcmN1bGFyIG9iamVjdHMgd2lsbCByZXN1bHQgaW4gYFtvYmplY3QgT2JqZWN0XWAuXHJcbiAqIFxyXG4gKiAqKipFeGFtcGxlKioqXHJcbiAqICBgYGB0c1xyXG4gKiAgY29uc29sZS5sb2codG9TdHJpbmcoNDIpKTsgICAgICAgICAgLy8vIDQyXHJcbiAqICBjb25zb2xlLmxvZyh0b1N0cmluZyh0cnVlKSk7ICAgICAgICAvLy8gdHJ1ZVxyXG4gKiAgY29uc29sZS5sb2codG9TdHJpbmcobnVsbCkpOyAgICAgICAgLy8vIG51bGxcclxuICogIGNvbnNvbGUubG9nKHRvU3RyaW5nKHVuZGVmaW5lZCkpOyAgIC8vLyB1bmRlZmluZWRcclxuICogXHJcbiAqICBjb25zb2xlLmxvZyh0b1N0cmluZyhcImV4YW1wbGVcIikpOyAgIC8vLyBleGFtcGxlXHJcbiAqIFxyXG4gKiAgbGV0IG9iamVjdDoge1xyXG4gKiAgICAgIGNvbG9yOiBzdHJpbmc7XHJcbiAqICAgICAgc3BlZWQ6IHtcclxuICogICAgICAgICAgbWluOiBudW1iZXIsXHJcbiAqICAgICAgICAgIG1heDogbnVtYmVyXHJcbiAqICAgICAgfVxyXG4gKiAgfSA9IHtcclxuICogICAgICBjb2xvcjogXCJCbHVlXCIsXHJcbiAqICAgICAgc3BlZWQ6IHtcclxuICogICAgICAgICAgbWluOiAwLFxyXG4gKiAgICAgICAgICBtYXg6IDUwMFxyXG4gKiAgICAgIH1cclxuICogIH07XHJcbiAqICBjb25zb2xlLmxvZyhvYmplY3QpOyAgICAgICAgICAgICAgICAvLy8ge1wiY29sb3JcIjpcIkJsdWVcIixcInNwZWVkXCI6e1wibWluXCI6MCxcIm1heFwiOjUwMH19XHJcbiAqIFxyXG4gKiAgZnVuY3Rpb24gZm9vKCk6IHZvaWQge1xyXG4gKiAgICAgIGxldCB4OiBzdHJpbmcgPSA1MDA7XHJcbiAqICAgICAgcmV0dXJuIHg7XHJcbiAqICB9XHJcbiAqICBjb25zb2xlLmxvZyhmb28pOyAgICAgICAgICAgICAgICAgICAvLy8gZnVuY3Rpb24gZm9vKCkge1xyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vICAgICB4ID0gNTAwO1xyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vICAgICByZXR1cm4geDtcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLyB9XHJcbiAqICBgYGBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0b1N0cmluZyh1bmtub3duOiB1bmtub3duKTogc3RyaW5nIHtcclxuICAgIGlmICh1bmtub3duID09PSBudWxsIHx8IHVua25vd24gPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgdW5rbm93biAhPT0gXCJvYmplY3RcIikgcmV0dXJuIFN0cmluZyh1bmtub3duKTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHVua25vd24pO1xyXG4gICAgfVxyXG4gICAgY2F0Y2gge31cclxuICAgIHJldHVybiBcIltvYmplY3QgT2JqZWN0XVwiO1xyXG59IiwgImltcG9ydCB0eXBlIHsgUmVzdWx0IH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IERvbUVycm9yIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IHdyYXAgfSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcbi8qKlxyXG4gKiAqKipCcmllZioqKlxyXG4gKiBDcmVhdGVzIGEgZGVlcCBjbG9uZSBvZiB0aGUgcHJvdmlkZWQgdmFsdWUgdXNpbmcgdGhlIHN0cnVjdHVyZWRDbG9uZSBBUEkuXHJcbiAqIFxyXG4gKiAqKipFeGFtcGxlKioqXHJcbiAqIGBgYHRzXHJcbiAqICBjbG9uZSgpXHJcbiAqICAgICAgLnJlc29sdmUoZSA9PiB7XHJcbiAqICAgICAgICAgIGlmIChlLmNvZGUgPT09IFwiRE9NLkVSUl9EQVRBX0NMT05FXCIpIHtcclxuICogICAgICAgICAgICAgIC8vLyAuLi5cclxuICogICAgICAgICAgfVxyXG4gKiAgICAgIH0pXHJcbiAqICAgICAgLnVubG9jaygpO1xyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjbG9uZTxUMT4odmFsdWU6IFQxKTogUmVzdWx0PFQxLCBEb21FcnJvcj4ge1xyXG4gICAgcmV0dXJuIHdyYXAoKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBzdHJ1Y3R1cmVkQ2xvbmUodmFsdWUpO1xyXG4gICAgfSkubWFwRXJyKHVuc2FmZSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHVuc2FmZVxyXG4gICAgICAgICAgICAucGFyc2UoKHNlbGYpOiBzZWxmIGlzIERPTUV4Y2VwdGlvbiA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZiAhPT0gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgICYmIHNlbGYgIT09IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgICAgICYmIHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiXHJcbiAgICAgICAgICAgICAgICAgICAgJiYgXCJuYW1lXCIgaW4gc2VsZlxyXG4gICAgICAgICAgICAgICAgICAgICYmIFwiY29kZVwiIGluIHNlbGZcclxuICAgICAgICAgICAgICAgICAgICAmJiBcIm1lc3NhZ2VcIiBpbiBzZWxmXHJcbiAgICAgICAgICAgICAgICAgICAgJiYgdHlwZW9mIHNlbGYubmFtZSA9PT0gXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgICAgICYmIHR5cGVvZiBzZWxmLmNvZGUgPT09IFwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAmJiB0eXBlb2Ygc2VsZi5tZXNzYWdlID09PSBcInN0cmluZ1wiO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAubWFwKGV4Y2VwdGlvbiA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gRG9tRXJyb3IoZXhjZXB0aW9uKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnVubG9ja09yKERvbUVycm9yKCkpO1xyXG4gICAgfSk7XHJcbn0iLCAiaW1wb3J0IHR5cGUgeyBCcmFuZGVkIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB0eXBlIHsgVHlwZUd1YXJkIH0gZnJvbSBcIkByb290XCI7XHJcblxyXG4vKipcclxuICogKioqQnJpZWYqKipcclxuICogQSB1dGlsaXR5IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIGFuIGB1bmtub3duYCB2YWx1ZSBjb25mb3JtcyB0byBhIHNwZWNpZmljIGJyYW5kZWQgdHlwZS5cclxuICogXHJcbiAqICoqKldhcm5pbmcqKipcclxuICogQmUgY2F1dGlvdXMgYWJvdXQgYnJhbmQgY29sbGlzaW9ucyB0aGF0IG1heSBvY2N1ciBpZiBtdWx0aXBsZSBtb2R1bGVzIFxyXG4gKiBvciBjb250ZXh0cyBkZWZpbmUgc2ltaWxhciBicmFuZGVkIHR5cGVzLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzQnJhbmRlZDxUMSBleHRlbmRzIHN0cmluZz4odW5rbm93bjogdW5rbm93biwgdHlwZTogVDEpOiB1bmtub3duIGlzIEJyYW5kZWQ8VDE+IHtcclxuICAgIGxldCBndWFyZDogVHlwZUd1YXJkPEJyYW5kZWQ8VDE+PiA9ICh1bmtub3duOiB1bmtub3duKTogdW5rbm93biBpcyBCcmFuZGVkPFQxPiA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHVua25vd24gIT09IG51bGxcclxuICAgICAgICAgICAgJiYgdW5rbm93biAhPT0gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgICYmIHR5cGVvZiB1bmtub3duID09PSBcIm9iamVjdFwiXHJcbiAgICAgICAgICAgICYmIFwidHlwZVwiIGluIHVua25vd25cclxuICAgICAgICAgICAgJiYgdHlwZW9mIHVua25vd24udHlwZSA9PT0gXCJmdW5jdGlvblwiXHJcbiAgICAgICAgICAgICYmIHR5cGVvZiB1bmtub3duLnR5cGUoKSA9PT0gXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAmJiB1bmtub3duLnR5cGUoKSA9PT0gdHlwZTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gZ3VhcmQodW5rbm93bik7XHJcbn0iLCAiaW1wb3J0IHsgRXJyb3IgYXMgRXJyb3IwIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IEVycm9ySGFuZGxlciB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBmbGFnIH0gZnJvbSBcIkByb290XCI7XHJcblxyXG4vKipcclxuICogKioqQnJpZWYqKipcclxuICogYHBhbmljYCB0aHJvd3MgYW4gZXJyb3Igd2l0aCBvcHRpb25hbCBtZXNzYWdlIGFuZCBzdGFjayB0cmFjZSBsb2NhdGlvbi5cclxuICogXHJcbiAqICoqKkV4YW1wbGUqKipcclxuICogYGBgdHNcclxuICogIHBhbmljKEVycm9yKFwiTUFUSC5FUlJfRElWSVNJT05fQllfWkVST1wiKSk7XHJcbiAqICBwYW5pYyhFcnJvcih7XHJcbiAqICAgICAgY29kZTogXCJNQVRILkVSUl9ESVZJU0lPTl9CWV9aRVJPXCIsXHJcbiAqICAgICAgbWVzc2FnZTogU29tZShcIk1hdGg6IENhbm5vdCBkaXZpZGUgYnkgemVyby5cIiksXHJcbiAqICAgICAgcGF5bG9hZDogTm9uZSxcclxuICogICAgICBzdGFjazogU3RhY2tUcmFjZSguLi4pXHJcbiAqICB9KSk7XHJcbiAqICBwYW5pYyhcIkFuIHVucmVjb3ZlcmFibGUgZXJyb3IgaGFzIG9jY3VyZWQuXCIpO1xyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBwYW5pYzxUMSBleHRlbmRzIHN0cmluZz4oZTogRXJyb3IwPFQxPiwgaGFuZGxlcj86IEVycm9ySGFuZGxlcik6IG5ldmVyO1xyXG5leHBvcnQgZnVuY3Rpb24gcGFuaWM8VDEgZXh0ZW5kcyBzdHJpbmc+KG1lc3NhZ2U6IFQxLCBsb2NhdGlvbj86IEZ1bmN0aW9uLCBoYW5kbGVyPzogRXJyb3JIYW5kbGVyKTogbmV2ZXI7XHJcbmV4cG9ydCBmdW5jdGlvbiBwYW5pYzxUMSBleHRlbmRzIHN0cmluZz4oXHJcbiAgICBwMDogRXJyb3IwPFQxPiB8IFQxLFxyXG4gICAgcDE/OiBFcnJvckhhbmRsZXIgfCBGdW5jdGlvbixcclxuICAgIHAyPzogRXJyb3JIYW5kbGVyXHJcbik6IG5ldmVyIHtcclxuICAgIGlmICh0eXBlb2YgcDAgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICBsZXQgZTogRXJyb3IwPFQxPiA9IHAwO1xyXG4gICAgICAgIGxldCBoYW5kbGVyOiBFcnJvckhhbmRsZXIgPSBmbGFnKChwMSBhcyBFcnJvckhhbmRsZXIgfCB1bmRlZmluZWQpKS51bmxvY2tPcihFcnJvckhhbmRsZXIpO1xyXG4gICAgICAgIHRocm93IGhhbmRsZXIuY29udmVydFRvU3RhbmRhcmRFcnJvcihlKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGxldCBtZXNzYWdlOiBUMSA9IHAwO1xyXG4gICAgICAgIGxldCBsb2NhdGlvbjogRnVuY3Rpb24gPSBmbGFnKChwMSBhcyBGdW5jdGlvbiB8IHVuZGVmaW5lZCkpLnVubG9ja09yKHBhbmljKTtcclxuICAgICAgICBsZXQgaGFuZGxlcjogRXJyb3JIYW5kbGVyID0gZmxhZyhwMikudW5sb2NrT3IoRXJyb3JIYW5kbGVyKTtcclxuICAgICAgICBsZXQgZVN0YW5kYXJkOiBFcnJvciA9IEVycm9yKCk7XHJcbiAgICAgICAgZVN0YW5kYXJkLm5hbWUgPSBcIlBBTklDXCI7XHJcbiAgICAgICAgZVN0YW5kYXJkLm1lc3NhZ2UgPSBtZXNzYWdlO1xyXG4gICAgICAgIGVTdGFuZGFyZC5jYXVzZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICBlU3RhbmRhcmQuc3RhY2sgPSBoYW5kbGVyLnBhcnNlU3RhY2tUcmFjZShsb2NhdGlvbik7XHJcbiAgICAgICAgdGhyb3cgZVN0YW5kYXJkO1xyXG4gICAgfVxyXG59IiwgImltcG9ydCB0eXBlIHsgT3B0aW9uIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB0eXBlIHsgQ2xvc3VyZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgdHlwZSB7IFR5cGVHdWFyZCB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBTb21lIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IE5vbmUgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgRXJyb3IgYXMgQ3VzdG9tRXJyb3IgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgaXNCcmFuZGVkIH0gZnJvbSBcIkByb290XCI7XHJcblxyXG5leHBvcnQgdHlwZSBFcnJvckhhbmRsZXIgPSB7XHJcbiAgICBtYXRjaEVycm9yPFQxIGV4dGVuZHMgc3RyaW5nPih1bmtub3duOiB1bmtub3duLCBjb2RlOiBUMSwgdGFzaz86IENsb3N1cmU8W2U6IEN1c3RvbUVycm9yPFQxLCB1bmtub3duPl0sIHZvaWQ+KTogdW5rbm93biBpcyBDdXN0b21FcnJvcjxUMSwgdW5rbm93bj47XHJcbiAgICBsb2NhbFN0YWNrVHJhY2UobG9jYXRpb246IEZ1bmN0aW9uKTogT3B0aW9uPHN0cmluZz47XHJcbiAgICBwYXJzZVN0YWNrVHJhY2UobG9jYXRpb25PclN0YWNrOiBGdW5jdGlvbiB8IHN0cmluZyk6IHN0cmluZztcclxuICAgIGNvbnZlcnRUb1N0YW5kYXJkRXJyb3I8VDEgZXh0ZW5kcyBzdHJpbmcsIFQyID0gdW5rbm93bj4oZTogQ3VzdG9tRXJyb3I8VDEsIFQyPik6IEVycm9yO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IEVycm9ySGFuZGxlcjogRXJyb3JIYW5kbGVyID0gKCgpID0+IHtcclxuICAgIC8qKiBAY29uc3RydWN0b3IgKi8ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG1hdGNoRXJyb3IsXHJcbiAgICAgICAgICAgIGxvY2FsU3RhY2tUcmFjZSxcclxuICAgICAgICAgICAgcGFyc2VTdGFja1RyYWNlLFxyXG4gICAgICAgICAgICBjb252ZXJ0VG9TdGFuZGFyZEVycm9yXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtYXRjaEVycm9yPFQxIGV4dGVuZHMgc3RyaW5nPih1bmtub3duOiB1bmtub3duLCBjb2RlOiBUMSwgdGFzaz86IENsb3N1cmU8W2U6IEN1c3RvbUVycm9yPFQxLCB1bmtub3duPl0sIHZvaWQ+KTogdW5rbm93biBpcyBDdXN0b21FcnJvcjxUMSwgdW5rbm93bj4ge1xyXG4gICAgICAgIGxldCBndWFyZDogVHlwZUd1YXJkPEN1c3RvbUVycm9yPFQxPj4gPSAodW5rbm93bik6IHVua25vd24gaXMgQ3VzdG9tRXJyb3I8VDE+ID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHVua25vd24gIT09IG51bGxcclxuICAgICAgICAgICAgICAgICYmIHVua25vd24gIT09IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgJiYgdHlwZW9mIHVua25vd24gPT09IFwib2JqZWN0XCJcclxuICAgICAgICAgICAgICAgICYmIFwiY29kZVwiIGluIHVua25vd25cclxuICAgICAgICAgICAgICAgICYmIHR5cGVvZiB1bmtub3duLmNvZGUgPT09IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgICYmIHVua25vd24uY29kZSA9PT0gY29kZVxyXG4gICAgICAgICAgICAgICAgJiYgaXNCcmFuZGVkKHVua25vd24sIFwiRXJyb3JcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghZ3VhcmQodW5rbm93bikpIHJldHVybiBmYWxzZTtcclxuICAgICAgICBpZiAodGFzaykgdGFzayh1bmtub3duKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBsb2NhbFN0YWNrVHJhY2UobG9jYXRpb246IEZ1bmN0aW9uKTogT3B0aW9uPHN0cmluZz4ge1xyXG4gICAgICAgIGxldCBlOiBFcnJvciA9IEVycm9yKCk7XHJcbiAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoZSwgbG9jYXRpb24pO1xyXG4gICAgICAgIGlmIChlLnN0YWNrKSByZXR1cm4gU29tZShlLnN0YWNrKTtcclxuICAgICAgICByZXR1cm4gTm9uZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBwYXJzZVN0YWNrVHJhY2UobG9jYXRpb25PclN0YWNrOiBGdW5jdGlvbiB8IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIF9wYXJzZVN0YWNrKF9wYXJzZVBheWxvYWQobG9jYXRpb25PclN0YWNrKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY29udmVydFRvU3RhbmRhcmRFcnJvcjxUMSBleHRlbmRzIHN0cmluZywgVDIgPSB1bmtub3duPihlOiBDdXN0b21FcnJvcjxUMSwgVDI+KTogRXJyb3Ige1xyXG4gICAgICAgIGxldCBlU3RhbmRhcmQ6IEVycm9yID0gRXJyb3IoKTtcclxuICAgICAgICBlU3RhbmRhcmQubmFtZSA9IGUuY29kZTtcclxuICAgICAgICBlU3RhbmRhcmQubWVzc2FnZSA9IGUubWVzc2FnZS51bmxvY2tPcihcIlwiKTtcclxuICAgICAgICBlU3RhbmRhcmQuc3RhY2sgPSBlLnN0YWNrLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgZVN0YW5kYXJkLmNhdXNlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHJldHVybiBlU3RhbmRhcmQ7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX3BhcnNlUGF5bG9hZChwYXlsb2FkOiBGdW5jdGlvbiB8IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBwYXlsb2FkID09PSBcInN0cmluZ1wiKSByZXR1cm4gcGF5bG9hZDtcclxuICAgICAgICByZXR1cm4gbG9jYWxTdGFja1RyYWNlKHBheWxvYWQpLnVubG9ja09yKFwiXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9wYXJzZVN0YWNrKHN0YWNrOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBzdGFja1xyXG4gICAgICAgICAgICAuc3BsaXQoXCJcXG5cIilcclxuICAgICAgICAgICAgLm1hcChsaW5lID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfbWF0Y2hMaW5lPHN0cmluZz4oXHJcbiAgICAgICAgICAgICAgICAgICAgbGluZSwgXHJcbiAgICAgICAgICAgICAgICAgICAgbGluZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsaW5lLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIF9fID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmZpbHRlcihsaW5lID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBsaW5lLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5tYXAobGluZSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX3BhcnNlTGluZShsaW5lKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLm1hcCgoW2xvY2F0aW9uTywgcGF0aE8sIGxpbmVPLCBjb2x1bW5PXSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9yZXByZXNlbnRMaW5lKGxvY2F0aW9uTywgcGF0aE8sIGxpbmVPLCBjb2x1bW5PKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnJlZHVjZSgocmVzdWx0LCBsaW5lKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICs9IGxpbmU7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9wYXJzZUxpbmUobGluZTogc3RyaW5nKTogW2xvY2F0aW9uOiBPcHRpb248c3RyaW5nPiwgcGF0aDogT3B0aW9uPHN0cmluZz4sIGxpbmU6IE9wdGlvbjxiaWdpbnQ+LCBjb2x1bW46IE9wdGlvbjxiaWdpbnQ+XSB7XHJcbiAgICAgICAgbGV0IGxvY2F0aW9uTzogT3B0aW9uPHN0cmluZz4gPSBOb25lO1xyXG4gICAgICAgIGxldCBwYXRoTzogT3B0aW9uPHN0cmluZz4gPSBOb25lO1xyXG4gICAgICAgIGxldCBsaW5lTzogT3B0aW9uPGJpZ2ludD4gPSBOb25lO1xyXG4gICAgICAgIGxldCBjb2x1bW5POiBPcHRpb248YmlnaW50PiA9IE5vbmU7XHJcbiAgICAgICAgbGV0IHBhdHRlcm46IFJlZ0V4cCA9IC9hdCAoPzxsb2NhdGlvbj4uKj8pIFxcKCg/PHBhdGg+Lio/KTooPzxsaW5lPlxcZCspOig/PGNvbHVtbj5cXGQrKVxcKS87XHJcbiAgICAgICAgbGV0IG1hdGNoOiBSZWdFeHBFeGVjQXJyYXkgfCBudWxsID0gcGF0dGVybi5leGVjKGxpbmUpO1xyXG4gICAgICAgIGlmIChtYXRjaCAmJiBtYXRjaC5ncm91cHMpIHtcclxuICAgICAgICAgICAgbG9jYXRpb25PID0gbWF0Y2guZ3JvdXBzLmxvY2F0aW9uID8gU29tZShtYXRjaC5ncm91cHMubG9jYXRpb24pIDogTm9uZTtcclxuICAgICAgICAgICAgcGF0aE8gPSBtYXRjaC5ncm91cHMucGF0aCA/IFNvbWUobWF0Y2guZ3JvdXBzLnBhdGgpIDogTm9uZTtcclxuICAgICAgICAgICAgbGluZU8gPSBtYXRjaC5ncm91cHMubGluZSA/IFNvbWUoQmlnSW50KG1hdGNoLmdyb3Vwcy5saW5lKSkgOiBOb25lO1xyXG4gICAgICAgICAgICBjb2x1bW5PID0gbWF0Y2guZ3JvdXBzLmNvbHVtbiA/IFNvbWUoQmlnSW50KG1hdGNoLmdyb3Vwcy5jb2x1bW4pKSA6IE5vbmU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbbG9jYXRpb25PLCBwYXRoTywgbGluZU8sIGNvbHVtbk9dO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9yZXByZXNlbnRMaW5lKGxvY2F0aW9uTzogT3B0aW9uPHN0cmluZz4sIHBhdGhPOiBPcHRpb248c3RyaW5nPiwgbGluZU86IE9wdGlvbjxiaWdpbnQ+LCBjb2x1bW5POiBPcHRpb248YmlnaW50Pik6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IHN5bWJvbDogc3RyaW5nID0gXCJcdTIxOUZcIjtcclxuICAgICAgICBsZXQgbWlzc2luZzogc3RyaW5nID0gXCI8PDwgTUlTU0lORyA+Pj5cIjtcclxuICAgICAgICBsZXQgc3RyMDogc3RyaW5nID0gbG9jYXRpb25PLnVubG9ja09yKG1pc3NpbmcpO1xyXG4gICAgICAgIGxldCBzdHIxOiBzdHJpbmcgPSBwYXRoTy51bmxvY2tPcihtaXNzaW5nKTtcclxuICAgICAgICBsZXQgc3RyMjogc3RyaW5nID0gbGluZU8udW5sb2NrT3IobWlzc2luZykudG9TdHJpbmcoKTtcclxuICAgICAgICBsZXQgc3RyMzogc3RyaW5nID0gY29sdW1uTy51bmxvY2tPcihtaXNzaW5nKS50b1N0cmluZygpO1xyXG4gICAgICAgIHJldHVybiBgJHsgc3ltYm9sIH0gJHsgc3RyMCB9ICR7IHN0cjEgfSAkeyBzdHIyIH0gJHsgc3RyMyB9YDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfbWF0Y2hMaW5lPFQxPihsaW5lOiBzdHJpbmcsIG9uVmFsaWQ6IENsb3N1cmU8W2xpbmU6IHN0cmluZ10sIFQxPiwgb25JbnZhbGlkOiBDbG9zdXJlPFtsaW5lOiBzdHJpbmddLCBUMT4pOiBUMSB7XHJcbiAgICAgICAgaWYgKGxpbmUgPT09IFwiRXJyb3JcIikgcmV0dXJuIG9uSW52YWxpZChsaW5lKTtcclxuICAgICAgICByZXR1cm4gb25WYWxpZChsaW5lKTtcclxuICAgIH1cclxufSkoKTsiLCAiaW1wb3J0IHR5cGUgeyBCcmFuZGVkU3RydWN0IH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IEVycm9ySGFuZGxlciB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBPcHRpb24gfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgZmxhZyB9IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuZXhwb3J0IHR5cGUgRXJyb3I8VDEgZXh0ZW5kcyBzdHJpbmcsIFQyID0gdW5rbm93bj4gPSBcclxuICAgICYgQnJhbmRlZFN0cnVjdDxcIkVycm9yXCI+XHJcbiAgICAmIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBUaGUgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoaXMgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIGNvZGU6IFQxO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIEEgaHVtYW4tcmVhZGFibGUgbWVzc2FnZSB0aGF0IGV4cGxhaW5zIHRoZSBuYXR1cmUgb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBtZXNzYWdlOiBPcHRpb248c3RyaW5nPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBBbiBvcHRpb25hbCB2YWx1ZSB0aGF0IGNhbiBob2xkIGFkZGl0aW9uYWwgZGF0YSBvciBjb250ZXh0IHJlbGF0ZWQgdG8gdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwYXlsb2FkOiBPcHRpb248VDI+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIFRoZSBzdGFjayB0cmFjZSBhc3NvY2lhdGVkIHdpdGggdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBzdGFjazogc3RyaW5nO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqICoqKkJyaWVmKioqXHJcbiAqIEEgY3VzdG9tIGVycm9yIHdpdGggYW4gb3B0aW9uYWwgbWVzc2FnZSBhbmQgcGF5bG9hZCBmb3Igc3Ryb25nbHktdHlwZWQgZXJyb3JzLlxyXG4gKiBcclxuICogKioqTm90ZSoqKlxyXG4gKiBUaGlzIGlzIGEgZ2VuZXJhbC1wdXJwb3NlIGVycm9yIHN0cnVjdHVyZSB0byBtYW5hZ2UgZG9tYWluLXNwZWNpZmljIGVycm9yIGNvZGVzIGFuZCBwcm92aWRlIGJldHRlciBjb250ZXh0LlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIEVycm9yPFQxIGV4dGVuZHMgc3RyaW5nLCBUMiA9IHVua25vd24+KF9jb25maWd1cmF0aW9uOiB7XHJcbiAgICBjb2RlOiBUMTtcclxuICAgIG1lc3NhZ2U/OiBzdHJpbmc7XHJcbiAgICBwYXlsb2FkPzogVDI7XHJcbiAgICBzdGFjaz86IHN0cmluZztcclxuICAgIGhhbmRsZXI/OiBFcnJvckhhbmRsZXI7XHJcbn0pOiBFcnJvcjxUMSwgVDI+O1xyXG5leHBvcnQgZnVuY3Rpb24gRXJyb3I8VDEgZXh0ZW5kcyBzdHJpbmcsIFQyID0gdW5rbm93bj4oX2NvZGU6IFQxLCBfbWVzc2FnZT86IHN0cmluZywgX3BheWxvYWQ/OiBUMik6IEVycm9yPFQxLCBUMj47XHJcbmV4cG9ydCBmdW5jdGlvbiBFcnJvcjxUMSBleHRlbmRzIHN0cmluZywgVDIgPSB1bmtub3duPihcclxuICAgIF9wMDoge1xyXG4gICAgICAgIGNvZGU6IFQxO1xyXG4gICAgICAgIG1lc3NhZ2U/OiBzdHJpbmc7XHJcbiAgICAgICAgcGF5bG9hZD86IFQyO1xyXG4gICAgICAgIHN0YWNrPzogc3RyaW5nO1xyXG4gICAgICAgIGhhbmRsZXI/OiBFcnJvckhhbmRsZXI7XHJcbiAgICB9IHwgVDEsXHJcbiAgICBfcDE/OiBzdHJpbmcsXHJcbiAgICBfcDI/OiBUMlxyXG4pOiBFcnJvcjxUMSwgVDI+IHtcclxuICAgIC8qKiBAY29uc3RydWN0b3IgKi8ge1xyXG4gICAgICAgIGlmICh0eXBlb2YgX3AwID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgIGxldCBjb25maWd1cmF0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICBjb2RlOiBUMTtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U/OiBzdHJpbmc7XHJcbiAgICAgICAgICAgICAgICBwYXlsb2FkPzogVDI7XHJcbiAgICAgICAgICAgICAgICBzdGFjaz86IHN0cmluZztcclxuICAgICAgICAgICAgICAgIGhhbmRsZXI/OiBFcnJvckhhbmRsZXI7XHJcbiAgICAgICAgICAgIH0gPSBfcDA7XHJcbiAgICAgICAgICAgIGxldCBoYW5kbGVyOiBFcnJvckhhbmRsZXIgPSBmbGFnKGNvbmZpZ3VyYXRpb24uaGFuZGxlcikudW5sb2NrT3IoRXJyb3JIYW5kbGVyKTtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwiRXJyb3JcIixcclxuICAgICAgICAgICAgICAgIGNvZGU6IGNvbmZpZ3VyYXRpb24uY29kZSxcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGZsYWcoY29uZmlndXJhdGlvbi5tZXNzYWdlKSxcclxuICAgICAgICAgICAgICAgIHBheWxvYWQ6IGZsYWcoY29uZmlndXJhdGlvbi5wYXlsb2FkKSxcclxuICAgICAgICAgICAgICAgIHN0YWNrOiBmbGFnKGNvbmZpZ3VyYXRpb24uc3RhY2spLnVubG9ja09yKGhhbmRsZXIucGFyc2VTdGFja1RyYWNlKEVycm9yKSlcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdHlwZTogXCJFcnJvclwiLFxyXG4gICAgICAgICAgICBjb2RlOiBfcDAsXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6IGZsYWcoX3AxKSxcclxuICAgICAgICAgICAgcGF5bG9hZDogZmxhZyhfcDIpLFxyXG4gICAgICAgICAgICBzdGFjazogRXJyb3JIYW5kbGVyLnBhcnNlU3RhY2tUcmFjZShFcnJvcilcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59IiwgImltcG9ydCB0eXBlIHsgRG9tRXhjZXB0aW9uTmFtZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgdHlwZSB7IERvbUVycm9yQ29kZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IERvbUVycm9yTmFtZVRvQ29kZU1hcDogUmVjb3JkPERvbUV4Y2VwdGlvbk5hbWUsIERvbUVycm9yQ29kZT4gPSB7XHJcbiAgICBcIkVuY29kaW5nRXJyb3JcIjogXCJET00uRVJSX0VOQ09ESU5HXCIsXHJcbiAgICBcIk5vdFJlYWRhYmxlRXJyb3JcIjogXCJET00uRVJSX05PVF9SRUFEQUJMRVwiLFxyXG4gICAgXCJVbmtub3duRXJyb3JcIjogXCJET00uRVJSX1VOS05PV05cIixcclxuICAgIFwiQ29uc3RyYWludEVycm9yXCI6IFwiRE9NLkVSUl9DT05TVFJBSU5UXCIsXHJcbiAgICBcIkRhdGFFcnJvclwiOiBcIkRPTS5FUlJfREFUQVwiLFxyXG4gICAgXCJUcmFuc2FjdGlvbkluYWN0aXZlRXJyb3JcIjogXCJET00uRVJSX1RSQU5TQUNUSU9OX0lOQUNUSVZFXCIsXHJcbiAgICBcIlJlYWRPbmx5RXJyb3JcIjogXCJET00uRVJSX1JFQURfT05MWVwiLFxyXG4gICAgXCJWZXJzaW9uRXJyb3JcIjogXCJET00uRVJSX1ZFUlNJT05cIixcclxuICAgIFwiT3BlcmF0aW9uRXJyb3JcIjogXCJET00uRVJSX09QRVJBVElPTlwiLFxyXG4gICAgXCJOb3RBbGxvd2VkRXJyb3JcIjogXCJET00uRVJSX05PVF9BTExPV0VEXCJcclxufTsiLCAiaW1wb3J0IHR5cGUgeyBEb21FeGNlcHRpb25Db2RlIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB0eXBlIHsgRG9tRXJyb3JDb2RlIH0gZnJvbSBcIkByb290XCI7XHJcblxyXG5leHBvcnQgY29uc3QgRG9tRXhjZXB0aW9uQ29kZVRvRG9tRXJyb3JDb2RlTWFwOiBSZWNvcmQ8RG9tRXhjZXB0aW9uQ29kZSwgRG9tRXJyb3JDb2RlPiA9IHtcclxuICAgIDE6IFwiRE9NLkVSUl9JTkRFWF9TSVpFXCIsXHJcbiAgICAzOiBcIkRPTS5FUlJfSElFUkFSQ0hZX1JFUVVFU1RcIixcclxuICAgIDQ6IFwiRE9NLkVSUl9XUk9OR19ET0NVTUVOVFwiLFxyXG4gICAgNTogXCJET00uRVJSX0lOVkFMSURfQ0hBUkFDVEVSXCIsXHJcbiAgICA3OiBcIkRPTS5FUlJfTk9fTU9ESUZJQ0FUSU9OX0FMTE9XRURcIixcclxuICAgIDg6IFwiRE9NLkVSUl9OT1RfRk9VTkRcIixcclxuICAgIDk6IFwiRE9NLkVSUl9OT1RfU1VQUE9SVEVEXCIsXHJcbiAgICAxMTogXCJET00uRVJSX0lOVkFMSURfU1RBVEVcIixcclxuICAgIDEyOiBcIkRPTS5FUlJfU1lOVEFYXCIsXHJcbiAgICAxMzogXCJET00uRVJSX0lOVkFMSURfTU9ESUZJQ0FUSU9OXCIsXHJcbiAgICAxNDogXCJET00uRVJSX05BTUVTUEFDRVwiLFxyXG4gICAgMTc6IFwiRE9NLkVSUl9UWVBFX01JU01BVENIXCIsXHJcbiAgICAxODogXCJET00uRVJSX1NFQ1VSSVRZXCIsXHJcbiAgICAxOTogXCJET00uRVJSX05FVFdPUktcIixcclxuICAgIDIwOiBcIkRPTS5FUlJfQUJPUlRcIixcclxuICAgIDIxOiBcIkRPTS5FUlJfVVJMX01JU01BVENIXCIsXHJcbiAgICAyMjogXCJET00uRVJSX1FVT1RBX0VYQ0VFREVEXCIsXHJcbiAgICAyMzogXCJET00uRVJSX1RJTUVPVVRcIixcclxuICAgIDI0OiBcIkRPTS5FUlJfSU5WQUxJRF9OT0RFX1RZUEVcIixcclxuICAgIDI1OiBcIkRPTS5FUlJfREFUQV9DTE9ORVwiXHJcbn07IiwgImltcG9ydCB0eXBlIHsgRG9tRXJyb3JDb2RlIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IERvbUV4Y2VwdGlvbkNvZGVUb0RvbUVycm9yQ29kZU1hcCB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBEb21FcnJvck5hbWVUb0NvZGVNYXAgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgRXJyb3IgfSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcbmV4cG9ydCB0eXBlIERvbUVycm9yID0gRXJyb3I8RG9tRXJyb3JDb2RlPjtcclxuXHJcbi8qKlxyXG4gKiAqKipCcmllZioqKlxyXG4gKiBBIGRvbWFpbi1zcGVjaWZpYyBlcnJvciB0aGF0IHByb3ZpZGVzIHRoZSBlcnJvciBjb2RlIGZvciBET00gZXhjZXB0aW9ucy5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBEb21FcnJvcigpOiBEb21FcnJvcjtcclxuZXhwb3J0IGZ1bmN0aW9uIERvbUVycm9yKF9lOiBET01FeGNlcHRpb24pOiBEb21FcnJvcjtcclxuZXhwb3J0IGZ1bmN0aW9uIERvbUVycm9yKFxyXG4gICAgX2FyZ3MwPzogRE9NRXhjZXB0aW9uXHJcbik6IERvbUVycm9yIHtcclxuICAgIC8qKiBAY29uc3RydWN0b3IgKi8ge1xyXG4gICAgICAgIGxldCBlOiBET01FeGNlcHRpb24gfCB1bmRlZmluZWQgPSBfYXJnczA7XHJcbiAgICAgICAgaWYgKGUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIEVycm9yKFwiRE9NLkVSUl9VTktOT1dOXCIpO1xyXG4gICAgICAgIHJldHVybiBFcnJvcihfbWF0Y2goZSksIGUubWVzc2FnZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX21hdGNoKGU6IERPTUV4Y2VwdGlvbik6IERvbUVycm9yQ29kZSB7XHJcbiAgICAgICAgbGV0IGNvZGU6IERvbUVycm9yQ29kZSA9IFwiRE9NLkVSUl9VTktOT1dOXCI7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICBlLmNvZGUgPT09IDFcclxuICAgICAgICAgICAgfHwgZS5jb2RlID09PSAzXHJcbiAgICAgICAgICAgIHx8IGUuY29kZSA9PT0gNFxyXG4gICAgICAgICAgICB8fCBlLmNvZGUgPT09IDVcclxuICAgICAgICAgICAgfHwgZS5jb2RlID09PSA3XHJcbiAgICAgICAgICAgIHx8IGUuY29kZSA9PT0gOFxyXG4gICAgICAgICAgICB8fCBlLmNvZGUgPT09IDlcclxuICAgICAgICAgICAgfHwgZS5jb2RlID09PSAxMVxyXG4gICAgICAgICAgICB8fCBlLmNvZGUgPT09IDEyXHJcbiAgICAgICAgICAgIHx8IGUuY29kZSA9PT0gMTNcclxuICAgICAgICAgICAgfHwgZS5jb2RlID09PSAxNFxyXG4gICAgICAgICAgICB8fCBlLmNvZGUgPT09IDE3XHJcbiAgICAgICAgICAgIHx8IGUuY29kZSA9PT0gMThcclxuICAgICAgICAgICAgfHwgZS5jb2RlID09PSAxOVxyXG4gICAgICAgICAgICB8fCBlLmNvZGUgPT09IDIwXHJcbiAgICAgICAgICAgIHx8IGUuY29kZSA9PT0gMjFcclxuICAgICAgICAgICAgfHwgZS5jb2RlID09PSAyMlxyXG4gICAgICAgICAgICB8fCBlLmNvZGUgPT09IDIzXHJcbiAgICAgICAgICAgIHx8IGUuY29kZSA9PT0gMjRcclxuICAgICAgICAgICAgfHwgZS5jb2RlID09PSAyNVxyXG4gICAgICAgICkgY29kZSA9IERvbUV4Y2VwdGlvbkNvZGVUb0RvbUVycm9yQ29kZU1hcFtlLmNvZGVdO1xyXG4gICAgICAgIGVsc2UgaWYgKFxyXG4gICAgICAgICAgICBlLm5hbWUgPT09IFwiRW5jb2RpbmdFcnJvclwiXHJcbiAgICAgICAgICAgIHx8IGUubmFtZSA9PT0gXCJOb3RSZWFkYWJsZUVycm9yXCJcclxuICAgICAgICAgICAgfHwgZS5uYW1lID09PSBcIlVua25vd25FcnJvclwiXHJcbiAgICAgICAgICAgIHx8IGUubmFtZSA9PT0gXCJDb25zdHJhaW50RXJyb3JcIlxyXG4gICAgICAgICAgICB8fCBlLm5hbWUgPT09IFwiRGF0YUVycm9yXCJcclxuICAgICAgICAgICAgfHwgZS5uYW1lID09PSBcIlRyYW5zYWN0aW9uSW5hY3RpdmVFcnJvclwiXHJcbiAgICAgICAgICAgIHx8IGUubmFtZSA9PT0gXCJSZWFkT25seUVycm9yXCJcclxuICAgICAgICAgICAgfHwgZS5uYW1lID09PSBcIlZlcnNpb25FcnJvclwiXHJcbiAgICAgICAgICAgIHx8IGUubmFtZSA9PT0gXCJPcGVyYXRpb25FcnJvclwiXHJcbiAgICAgICAgICAgIHx8IGUubmFtZSA9PT0gXCJOb3RBbGxvd2VkRXJyb3JcIlxyXG4gICAgICAgICkgY29kZSA9IERvbUVycm9yTmFtZVRvQ29kZU1hcFtlLm5hbWVdO1xyXG4gICAgICAgIHJldHVybiBjb2RlO1xyXG4gICAgfVxyXG59IiwgImV4cG9ydCBjb25zdCBJTlRFUk5BTF9FUlJPUl9NRVNTQUdFOiBzdHJpbmcgPVxyXG4gICAgXCJcXG5cIiArIFwiVWgtb2gsIGxvb2tzIGxpa2UgUmVsaXEgdG9vayBhIHdyb25nIHR1cm4hXCIgKyBcclxuICAgIFwiXFxuXCIgKyBcIkRvbid0IHdvcnJ5LCBpdCdzIG5vdCB5b3UtaXQncyB1cy5cIiArIFxyXG4gICAgXCJcXG5cIiArIFwiUGxlYXNlIHJlcG9ydCB0aGlzIGF0IGRyZWFtY2F0Y2hlcl9mb3VuZGF0aW9uQHByb3Rvbi5tZVwiICtcclxuICAgIFwiXFxuXCI7Il0sCiAgIm1hcHBpbmdzIjogImliQUFBLElBQUFBLEdBQUEsR0FBQUMsR0FBQUQsR0FBQSxXQUFBRSxFQUFBLFlBQUFDLEVBQUEsYUFBQUMsRUFBQSxRQUFBQyxFQUFBLFFBQUFDLEVBQUEsVUFBQUMsRUFBQSxRQUFBQyxFQUFBLFNBQUFDLEVBQUEsT0FBQUMsRUFBQSxRQUFBQyxFQUFBLFNBQUFDLEVBQUEsV0FBQUMsRUFBQSxTQUFBQyxFQUFBLFNBQUFDLEVBQUEsU0FBQUMsRUFBQSxTQUFBQyxFQUFBLFVBQUFDLEVBQUEsY0FBQUMsRUFBQSxVQUFBQyxFQUFBLGFBQUFDLEVBQUEsU0FBQUMsRUFBQSxjQUFBQyxJQUFBLGVBQUFDLEdBQUF4QixJQytCTyxJQUFNeUIsR0FBeUIsSUFBTSxDQUVwQyxNQUFPLENBQUUsSUFBQUMsRUFBSyxJQUFBQyxFQUFLLEtBQUFDLEVBQU0sVUFBQUMsQ0FBVSxFQUd2QyxTQUFTSCxFQUFnREksRUFBOEQsQ0FDbkgsSUFBSUMsRUFBc0IsQ0FBQyxFQUN2QkMsRUFBWSxFQUNoQixLQUFPQSxFQUFJRixFQUFRLFFBQVEsQ0FDdkIsSUFBSUcsRUFBbUNILEVBQVEsR0FBR0UsQ0FBQyxFQUNuRCxHQUFJQyxFQUFPLEdBQUcsRUFBR0YsRUFBSSxLQUFLRSxFQUFPLE9BQU8sQ0FBQyxNQUNwQyxRQUFPQSxFQUNaRCxHQUNKLENBQ0EsT0FBT0UsRUFBSUgsQ0FBc0IsQ0FDckMsQ0FFQSxTQUFTSixFQUFnREcsRUFBOEQsQ0FDbkgsSUFBSUMsRUFBc0IsQ0FBQyxFQUN2QkMsRUFBWSxFQUNoQixLQUFPQSxFQUFJRixFQUFRLFFBQVEsQ0FDdkIsSUFBSUssRUFBb0NMLEVB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WEEsRUFBRSxPQUFTLEdBQ1hBLEVBQUUsT0FBUyxHQUNYQSxFQUFFLE9BQVMsSUFDWEEsRUFBRSxPQUFTLElBQ1hBLEVBQUUsT0FBUyxJQUNYQSxFQUFFLE9BQVMsSUFDWEEsRUFBRSxPQUFTLElBQ1hBLEVBQUUsT0FBUyxJQUNYQSxFQUFFLE9BQVMsSUFDWEEsRUFBRSxPQUFTLElBQ1hBLEVBQUUsT0FBUyxJQUNYQSxFQUFFLE9BQVMsSUFDWEEsRUFBRSxPQUFTLElBQ1hBLEVBQUUsT0FBUyxJQUNYQSxFQUFFLE9BQVMsR0FDaEJHLEVBQU9DLEVBQWtDSixFQUFFLElBQUksR0FFN0NBLEVBQUUsT0FBUyxpQkFDUkEsRUFBRSxPQUFTLG9CQUNYQSxFQUFFLE9BQVMsZ0JBQ1hBLEVBQUUsT0FBUyxtQkFDWEEsRUFBRSxPQUFTLGFBQ1hBLEVBQUUsT0FBUyw0QkFDWEEsRUFBRSxPQUFTLGlCQUNYQSxFQUFFLE9BQVMsZ0JBQ1hBLEVBQUUsT0FBUyxrQkFDWEEsRUFBRSxPQUFTLHFCQUNoQkcsRUFBT0UsRUFBc0JMLEVBQUUsSUFBSSxHQUM5QkcsQ0FDWCxDQUNKLENDNURPLElBQU1HLEVBQ1Q7QUFBQTtBQUFBO0FBQUE7IiwKICAibmFtZXMiOiBbIm1vZF9leHBvcnRzIiwgIl9fZXhwb3J0IiwgIkFsbG9jIiwgIkRlQWxsb2MiLCAiRG9tRXJyb3IiLCAiRHluIiwgIkVyciIsICJFcnJvciIsICJGcHYiLCAiTm9uZSIsICJPayIsICJSZWYiLCAiU29tZSIsICJVbnNhZmUiLCAiYWxsTyIsICJhbGxSIiwgImFueU8iLCAiYW55UiIsICJjbG9uZSIsICJpc0JyYW5kZWQiLCAicGFuaWMiLCAidG9TdHJpbmciLCAid3JhcCIsICJ3cmFwQXN5bmMiLCAiX190b0NvbW1vbkpTIiwgIlJlc3VsdCIsICJhbGwiLCAiYW55IiwgIndyYXAiLCAid3JhcEFzeW5jIiwgInJlc3VsdHMiLCAib3V0IiwgImkiLCAicmVzdWx0IiwgIk9rIiwgIndyYXBwZXIiLCAiRXJyIiwgInRhc2siLCAicGF5bG9hZCIsICJlIiwgIlVuc2FmZSIsICJPcHRpb24iLCAiaXNPcHRpb24iLCAiaXNTb21lIiwgImlzTm9uZSIsICJmbGFnIiwgImFsbCIsICJhbnkiLCAidW5rbm93biIsICJpc0JyYW5kZWQiLCAidmFsdWUiLCAiTm9uZSIsICJTb21lIiwgIm9wdGlvbnMiLCAib3V0IiwgImkiLCAib3B0aW9uIiwgIlVuc2FmZSIsICJfdmFsdWUiLCAidW53cmFwIiwgInBhcnNlIiwgImd1YXJkIiwgIlNvbWUiLCAiTm9uZSIsICJhbGxSIiwgIlJlc3VsdCIsICJhbnlSIiwgIndyYXAiLCAid3JhcEFzeW5jIiwgIk9rIiwgIl92YWx1ZSIsICJfdGhpcyIsICJvayIsICJlcnIiLCAiZXhwZWN0IiwgImV4cGVjdEVyciIsICJ1bmxvY2siLCAidW5sb2NrT3IiLCAiYW5kIiwgIm1hcCIsICJtYXBFcnIiLCAicmVjb3ZlciIsICJkZWdyYWRlIiwgInRvT3B0aW9uIiwgIl9fIiwgIm1lc3NhZ2UiLCAicGFuaWMiLCAiRXJyb3IiLCAidGFzayIsICJFcnIiLCAiU29tZSIsICJFcnIiLCAiX3ZhbHVlIiwgIl9oYW5kbGVyIiwgIl90aGlzIiwgIl9zdGFjayIsICJFcnJvckhhbmRsZXIiLCAib2siLCAiZXJyIiwgImluc3BlY3QiLCAic3RhY2siLCAiZXhwZWN0IiwgImV4cGVjdEVyciIsICJ1bmxvY2tPciIsICJhbmQiLCAibWFwIiwgIm1hcEVyciIsICJyZWNvdmVyIiwgImRlZ3JhZGUiLCAidG9PcHRpb24iLCAibWVzc2FnZSIsICJlIiwgImNvZGVPIiwgIk5vbmUiLCAibWVzc2FnZU8iLCAic3RhY2tPIiwgIlNvbWUiLCAid3JhcCIsICJ2YWx1ZSIsICJwYW5pYyIsICJFcnJvciIsICJfXyIsICJmYWxsYmFjayIsICJ0YXNrIiwgIk9rIiwgIlJlZiIsICJfdmFsdWUiLCAiX3RoaXMiLCAiX2NvdW50IiwgIl90YXNrTWFwIiwgInVud3JhcCIsICJtdXQiLCAib25DaGFuZ2UiLCAidmFsdWUiLCAib2xkVmFsdWUiLCAibmV3VmFsdWUiLCAidGFzayIsICJrZXkiLCAiX2dlbktleSIsICJEeW4iLCAiX2NvbnN0cnVjdG9yIiwgIl9vbkRlQWxsb2MiLCAiX2xvYWQiLCAiX29uTG9hZFBheWxvYWQiLCAiX2F2YWlsYWJsZSIsICJfY291bnQiLCAiaSIsICJrZXkiLCAiX2dlbktleSIsICJwYXlsb2FkIiwgIl9rZXkiLCAiX3RoaXMiLCAiTm9uZSIsICJhbGxvYyIsICJfcmVjeWNsZWRLZXkiLCAiU29tZSIsICJBbGxvYyIsICJfcmVjeWxlZCIsICJkZUFsbG9jIiwgIl9yZWN5bGUiLCAiSU5URVJOQUxfRVJST1JfTUVTU0FHRSIsICJEZUFsbG9jIiwgInZhbHVlIiwgIkRlQWxsb2MiLCAiX2R5biIsICJOb25lIiwgIkFsbG9jIiwgIl92YWx1ZSIsICJfZHluIiwgIlNvbWUiLCAiaXNPcHRpb24iLCAiT3B0aW9uIiwgImlzU29tZSIsICJpc05vbmUiLCAiZmxhZyIsICJhbGxPIiwgImFueU8iLCAiU29tZSIsICJfdmFsdWUiLCAidHlwZSIsICJzb21lIiwgIm5vbmUiLCAiZXhwZWN0IiwgInVubG9jayIsICJ1bmxvY2tPciIsICJhbmQiLCAibWFwIiwgInRvUmVzdWx0IiwgIl9fIiwgInRhc2siLCAiT2siLCAiTm9uZSIsICJfdGhpcyIsICJ0eXBlIiwgInNvbWUiLCAibm9uZSIsICJleHBlY3QiLCAidW5sb2NrT3IiLCAiYW5kIiwgIm1hcCIsICJ0b1Jlc3VsdCIsICJtZXNzYWdlIiwgInBhbmljIiwgIkVycm9yIiwgImZhbGxiYWNrIiwgIl9fIiwgImUiLCAiRXJyIiwgIkZwdiIsICJfZnB2IiwgIl9wcmVjaXNpb24iLCAiX3ZhbHVlIiwgInByZWNpc2lvbiIsICJFcnIiLCAiRXJyb3IiLCAiX3Vud3JhcCIsICJPayIsICJ1bndyYXAiLCAicmVwcmVzZW50YXRpb24iLCAiYWRkIiwgInN1YiIsICJtdWwiLCAiZGl2IiwgInZhbHVlIiwgIl93cmFwIiwgIm4iLCAidGFzayIsICJJTlRFUk5BTF9FUlJPUl9NRVNTQUdFIiwgImZwdiIsICJ0b1N0cmluZyIsICJ1bmtub3duIiwgImNsb25lIiwgInZhbHVlIiwgIndyYXAiLCAidW5zYWZlIiwgInNlbGYiLCAiZXhjZXB0aW9uIiwgIkRvbUVycm9yIiwgImlzQnJhbmRlZCIsICJ1bmtub3duIiwgInR5cGUiLCAicGFuaWMiLCAicDAiLCAicDEiLCAicDIiLCAiZSIsICJmbGFnIiwgIkVycm9ySGFuZGxlciIsICJtZXNzYWdlIiwgImxvY2F0aW9uIiwgImhhbmRsZXIiLCAiZVN0YW5kYXJkIiwgIkVycm9ySGFuZGxlciIsICJtYXRjaEVycm9yIiwgImxvY2FsU3RhY2tUcmFjZSIsICJwYXJzZVN0YWNrVHJhY2UiLCAiY29udmVydFRvU3RhbmRhcmRFcnJvciIsICJ1bmtub3duIiwgImNvZGUiLCAidGFzayIsICJpc0JyYW5kZWQiLCAibG9jYXRpb24iLCAiZSIsICJTb21lIiwgIk5vbmUiLCAibG9jYXRpb25PclN0YWNrIiwgIl9wYXJzZVN0YWNrIiwgIl9wYXJzZVBheWxvYWQiLCAiZVN0YW5kYXJkIiwgInBheWxvYWQiLCAic3RhY2siLCAibGluZSIsICJfbWF0Y2hMaW5lIiwgIl9fIiwgIl9wYXJzZUxpbmUiLCAibG9jYXRpb25PIiwgInBhdGhPIiwgImxpbmVPIiwgImNvbHVtbk8iLCAiX3JlcHJlc2VudExpbmUiLCAicmVzdWx0IiwgIm1hdGNoIiwgInN5bWJvbCIsICJtaXNzaW5nIiwgInN0cjAiLCAic3RyMSIsICJzdHIyIiwgInN0cjMiLCAib25WYWxpZCIsICJvbkludmFsaWQiLCAiRXJyb3IiLCAiX3AwIiwgIl9wMSIsICJfcDIiLCAiY29uZmlndXJhdGlvbiIsICJoYW5kbGVyIiwgImZsYWciLCAiRXJyb3JIYW5kbGVyIiwgIkRvbUVycm9yTmFtZVRvQ29kZU1hcCIsICJEb21FeGNlcHRpb25Db2RlVG9Eb21FcnJvckNvZGVNYXAiLCAiRG9tRXJyb3IiLCAiX2FyZ3MwIiwgImUiLCAiRXJyb3IiLCAiX21hdGNoIiwgImNvZGUiLCAiRG9tRXhjZXB0aW9uQ29kZVRvRG9tRXJyb3JDb2RlTWFwIiwgIkRvbUVycm9yTmFtZVRvQ29kZU1hcCIsICJJTlRFUk5BTF9FUlJPUl9NRVNTQUdFIl0KfQo=