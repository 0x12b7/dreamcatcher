"use strict";var n,r=Object.defineProperty,t=Object.getOwnPropertyDescriptor,e=Object.getOwnPropertyNames,o=Object.prototype.hasOwnProperty,u={};((n,t)=>{for(var e in t)r(n,e,{get:t[e],enumerable:!0})})(u,{Alloc:()=>_,DeAlloc:()=>m,DomError:()=>P,Dyn:()=>d,Err:()=>R,Error:()=>h,Fpv:()=>k,None:()=>g,Ok:()=>s,Ref:()=>O,Some:()=>N,Unsafe:()=>i,allO:()=>D,allR:()=>l,anyO:()=>A,anyR:()=>f,clone:()=>M,isBranded:()=>v,isBrandedStruct:()=>T,panic:()=>S,toString:()=>I,wrap:()=>p,wrapAsync:()=>E}),module.exports=(n=u,((n,u,c,a)=>{if(u&&"object"==typeof u||"function"==typeof u)for(let i of e(u))o.call(n,i)||i===c||r(n,i,{get:()=>u[i],enumerable:!(a=t(u,i))||a.enumerable});return n})(r({},"__esModule",{value:!0}),n));var c={all:function(n){let r=[],t=0;for(;t<n.length;){let e=n.at(t);if(!e.ok())return e;r.push(e.unlock()),t++}return s(r)},any:function(n){let r=[],t=0;for(;t<n.length;){let e=n.at(t);if(e.ok())return e;r.push(e.inspect()),t++}return R(r)},wrap:function(n,...r){try{return s(n(...r))}catch(n){return R(i(n))}},wrapAsync:async function(n,...r){try{return s(await n(...r))}catch(n){return R(i(n))}}},a={flag:function(n){return null==n?g:N(n)},all:function(...n){let r=[],t=0;for(;t<n.length;){let e=n.at(t);if(e.none())return e;r.push(e.unlock()),t++}return N(r)},any:function(...n){let r=0;for(;r<n.length;){let t=n.at(r);if(t.some())return t;r++}return g}};function i(n){return{unwrap:r,parse:function(n){return n(r())?N(r()):g}};function r(){return n}}var l=c.all,f=c.any,p=c.wrap,E=c.wrapAsync;function s(n){let r;return r={ok:function(){return!0},err:function(){return!1},expect:function(n){return t()},expectErr:function(n){S(h("PANIC",n))},unlock:t,unlockOr:function(n){return t()},and:function(n){return n(t())},map:function(n){return s(n(t()))},mapErr:function(n){return r},recover:function(n){return r},degrade:function(n){return R(n(t()))},toOption:function(){return N(t())}};function t(){return n}}function R(n,r=C){let t,e,o,u;return o=n,u=r,e=u.parseStackTrace(R),t={ok:function(){return!1},err:function(){return!0},inspect:c,stack:function(){return e},expect:function(n){let r=c(),t=g;if(r instanceof Error){let e=h({code:r.name.toUpperCase(),message:n});t=N(e)}t.none()&&u.matchError(r,(r=>{r.message=r.message.map((r=>r+"\n\n     Context\n     "+n)),t=N(r)}));S(t.toResult(void 0).recover((()=>h({code:"PANIC",message:n}))).unlock())},expectErr:function(n){return c()},unlockOr:function(n){return n},and:function(n){return t},map:function(n){return t},mapErr:function(n){return R(n(c()))},recover:function(n){return s(n(c()))},degrade:function(n){return t},toOption:function(){return g}};function c(){return o}}function O(n){let r,t,e;return t=0n,e=new Map,r={unwrap:o,mut:function(t){let u=o(),c=t;return n=t,e.values().toArray().forEach((n=>n(c,u))),r},onChange:function(n){let r=t+=1n;return e.set(r,n),()=>{e.delete(r)}}};function o(){return n}}function d(n,r,t,...e){let o,u;{o=new Map,u=0n;let a=0n;for(;a<t;){let r=c();o.set(r,n(...e)),a++}return function(...t){let e,u;return e=g,u=function(){let n=o.keys().toArray().at(0);return n?N(n):g}().toResult(void 0).map((n=>(e=N(n),_(function(n){let r=o.get(n);return o.delete(n),r}(n),{deAlloc:a})))).recover((()=>(e=N(c()),_(n(...t),{deAlloc:a})))).unlock();function a(){return e.toResult(void 0).map((n=>{e=g,function(n,r){o.set(n,r)}(n,r(u.expect("Dyn: Could not deallocate resource but the key was available."+U)))})),u=m({deAlloc:a})}}}function c(){return u+=1n}}function m(n){return{...g,...n}}function _(n,r){return{...N(n),...r}}var y=a.flag,D=a.all,A=a.any;function N(n){return{type:function(){return"Some"},some:function(){return!0},none:function(){return!1},expect:function(r){return n},unlock:function(){return n},unlockOr:function(r){return n},and:function(r){return r(n)},map:function(r){return N(r(n))},toResult:function(r){return s(n)}}}var g=(()=>{let n;return n={type:function(){return"None"},some:function(){return!1},none:function(){return!0},expect:function(n){S(h("ERR_VALUE_REQUIRED",n))},unlockOr:function(n){return n},and:function(r){return n},map:function(r){return n},toResult:function(n){return R(n)}}})();function k(n,r=2n){let t;return 0n===e()?R(h("FPV.ERR_PRECISION_IS_ZERO","Fpv: Does not support zero precision.")):e()<0n?R(h("FPV.ERR_PRECISION_IS_NEGATIVE","Fpv: Does not support negative precision.")):(t=c(n),s({unwrap:function(){return t},precision:e,representation:o,add:function(n){return u((()=>t+c(n)))},sub:function(n){return u((()=>t-c(n)))},mul:function(n){return u((()=>t*c(n)/o()))},div:function(n){let r=c(n);return 0n===r?R(h("FPV.ERR_DIVISION_BY_ZERO","Fpv: Cannot divide by zero.")):s(u((()=>t*o()/r)))}}));function e(){return r}function o(){return 10n**e()}function u(n){return k(n()).expect("Fpv: Failed to wrap the task result into an Fpv."+U)}function c(n){return"bigint"==typeof n?n:n.unwrap()}}function I(n){if(null==n||"object"!=typeof n)return String(n);try{return JSON.stringify(n)}catch{}return"[object Object]"}function M(n){return p((()=>structuredClone(n))).mapErr((n=>n.parse((n=>null!=n&&"object"==typeof n&&"name"in n&&"code"in n&&"message"in n&&"string"==typeof n.name&&"number"==typeof n.code&&"string"==typeof n.message)).map((n=>P(n))).unlockOr(P())))}function T(n,r){return(n=>{let t=null!=n&&"object"==typeof n&&"type"in n&&"string"==typeof n.type;if(!1===t)return!1;if(void 0!==r){let e=r;t=t&&n.type===e}return t})(n)}function v(n,r){return(n=>{let t=null!=n&&"object"==typeof n&&"type"in n&&"function"==typeof n.type&&"string"==typeof n.type();if(!1===t)return!1;if(void 0!==r){let e=r;t=t&&n.type()===e}return t})(n)}function S(n,r,t){if("object"==typeof n){let t=n;y(r).unlockOr(C);throw["","",`     ${e=t.code,"[31m"+e+"[0m"} ${t.message.unlockOr("<<< UNAVAILABLE >>>")}`,"","     STACK_TRACE"+t.stack].join("\n")}{let e=n,o=y(r).unlockOr(S),u=y(t).unlockOr(C);throw Error().name="PANIC","PANIC "+e+"\n"+u.parseStackTrace(o)}var e}var C=(()=>{return{matchError:function(n,r,t){let e=n,o=null!=e&&"object"==typeof e&&T(e,"Error");if(!o)return!1;if(void 0!==r&&"string"==typeof r){let n=r;o=o&&"code"in e&&"string"==typeof e.code&&e.code===n}if(!o)return!1;let u=g;void 0!==r&&"function"==typeof r&&(u=N(r));void 0!==t&&(u=N(t));return u.map((n=>{n(e)})),!0},localStackTrace:n,parseStackTrace:function(t){return function(n){let t="";return n.split("\n").map((n=>function(n,r,t){return"Error"===n?t(n):r(n)}(n,(n=>n.trim()),(n=>"")))).filter((n=>n.length>0)).map((n=>function(n){let r=g,t=g,e=g,o=g,u=/at (?<location>.*?) \((?<path>.*?):(?<line>\d+):(?<column>\d+)\)/.exec(n);u&&u.groups&&(r=u.groups.location?N(u.groups.location):g,t=u.groups.path?N(u.groups.path):g,e=u.groups.line?N(BigInt(u.groups.line)):g,o=u.groups.column?N(BigInt(u.groups.column)):g);return[r,t,e,o]}(n))).map((([n,t,e,o])=>function(n,t,e,o){let u="at",c="<<< UNAVAILABLE >>>";return D(n,t,e,o).map((([n,t,e,o])=>`     ${r(u)} ${t} ${r(n)} ${e} ${o}`)).unlockOr("     "+r(c))}(n,t,e,o))).forEach((n=>{t+="\n"+n})),t}((e=t,"string"==typeof e?e:n(e).unlockOr("")));var e},convertToStandardError:function(n){let r=Error();return r.name=n.code,r.message=n.message.unlockOr(""),r.stack=n.stack.toString(),r.cause=void 0,r}};function n(n){let r=Error();return Error.captureStackTrace(r,n),r.stack?N(r.stack):g}function r(n){return"[31m"+n+"[0m"}})();function h(n,r,t){if("object"==typeof n){let r=n,t=y(r.handler).unlockOr(C);return{type:"Error",code:r.code,message:y(r.message),payload:y(r.payload),stack:y(r.stack).unlockOr(t.parseStackTrace(h))}}return{type:"Error",code:n,message:y(r),payload:y(t),stack:C.parseStackTrace(h)}}var w={EncodingError:"DOM.ERR_ENCODING",NotReadableError:"DOM.ERR_NOT_READABLE",UnknownError:"DOM.ERR_UNKNOWN",ConstraintError:"DOM.ERR_CONSTRAINT",DataError:"DOM.ERR_DATA",TransactionInactiveError:"DOM.ERR_TRANSACTION_INACTIVE",ReadOnlyError:"DOM.ERR_READ_ONLY",VersionError:"DOM.ERR_VERSION",OperationError:"DOM.ERR_OPERATION",NotAllowedError:"DOM.ERR_NOT_ALLOWED"},b={1:"DOM.ERR_INDEX_SIZE",3:"DOM.ERR_HIERARCHY_REQUEST",4:"DOM.ERR_WRONG_DOCUMENT",5:"DOM.ERR_INVALID_CHARACTER",7:"DOM.ERR_NO_MODIFICATION_ALLOWED",8:"DOM.ERR_NOT_FOUND",9:"DOM.ERR_NOT_SUPPORTED",11:"DOM.ERR_INVALID_STATE",12:"DOM.ERR_SYNTAX",13:"DOM.ERR_INVALID_MODIFICATION",14:"DOM.ERR_NAMESPACE",17:"DOM.ERR_TYPE_MISMATCH",18:"DOM.ERR_SECURITY",19:"DOM.ERR_NETWORK",20:"DOM.ERR_ABORT",21:"DOM.ERR_URL_MISMATCH",22:"DOM.ERR_QUOTA_EXCEEDED",23:"DOM.ERR_TIMEOUT",24:"DOM.ERR_INVALID_NODE_TYPE",25:"DOM.ERR_DATA_CLONE"};function P(n){{let r=n;return void 0===r?h("DOM.ERR_UNKNOWN"):h(function(n){let r="DOM.ERR_UNKNOWN";1===n.code||3===n.code||4===n.code||5===n.code||7===n.code||8===n.code||9===n.code||11===n.code||12===n.code||13===n.code||14===n.code||17===n.code||18===n.code||19===n.code||20===n.code||21===n.code||22===n.code||23===n.code||24===n.code||25===n.code?r=b[n.code]:"EncodingError"!==n.name&&"NotReadableError"!==n.name&&"UnknownError"!==n.name&&"ConstraintError"!==n.name&&"DataError"!==n.name&&"TransactionInactiveError"!==n.name&&"ReadOnlyError"!==n.name&&"VersionError"!==n.name&&"OperationError"!==n.name&&"NotAllowedError"!==n.name||(r=w[n.name]);return r}(r),r.message)}}var U="\nUh-oh, looks like Reliq took a wrong turn!\nDon't worry, it's not you-it's us.\nPlease report this at dreamcatcher_foundation@proton.me\n";//# sourceMappingURL=data:application/json;base64,