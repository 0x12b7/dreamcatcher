"use strict";var H=Object.defineProperty;var tr=Object.getOwnPropertyDescriptor;var nr=Object.getOwnPropertyNames;var er=Object.prototype.hasOwnProperty;var ir=(t,n)=>{for(var r in n)H(t,r,{get:n[r],enumerable:!0})},pr=(t,n,r,e)=>{if(n&&typeof n=="object"||typeof n=="function")for(let o of nr(n))!er.call(t,o)&&o!==r&&H(t,o,{get:()=>n[o],enumerable:!(e=tr(n,o))||e.enumerable});return t};var ur=t=>pr(H({},"__esModule",{value:!0}),t);var mr={};ir(mr,{Alloc:()=>D,DeAlloc:()=>W,DomError:()=>I,Dyn:()=>j,Err:()=>k,Error:()=>d,Fpv:()=>G,None:()=>f,Ok:()=>x,Ref:()=>Q,Some:()=>E,Unsafe:()=>A,allO:()=>M,allR:()=>q,anyO:()=>U,anyR:()=>Y,clone:()=>$,isBranded:()=>X,isBrandedStruct:()=>V,panic:()=>w,toString:()=>z,wrap:()=>v,wrapAsync:()=>F});module.exports=ur(mr);var C=(()=>{return{all:t,any:n,wrap:r,wrapAsync:e};function t(o){let p=[],a=0;for(;a<o.length;){let c=o.at(a);if(c.ok())p.push(c.unlock());else return c;a++}return x(p)}function n(o){let p=[],a=0;for(;a<o.length;){let c=o.at(a);if(c.ok())return c;p.push(c.inspect()),a++}return k(p)}function r(o,...p){try{return x(o(...p))}catch(a){return k(A(a))}}async function e(o,...p){try{return x(await o(...p))}catch(a){return k(A(a))}}})();var b=(()=>{return{flag:t,all:n,any:r};function t(e){return e===null?f:e===void 0?f:E(e)}function n(...e){let o=[],p=0;for(;p<e.length;){let a=e.at(p);if(a.none())return a;o.push(a.unlock()),p++}return E(o)}function r(...e){let o=0;for(;o<e.length;){let p=e.at(o);if(p.some())return p;o++}return f}})();function A(t){return{unwrap:n,parse:r};function n(){return t}function r(e){return e(n())?E(n()):f}}var q=C.all,Y=C.any,v=C.wrap,F=C.wrapAsync;function x(t){let n;return n={ok:r,err:e,expect:o,expectErr:p,unlock:a,unlockOr:c,and:R,map:l,mapErr:i,recover:u,degrade:T,toOption:m};function r(){return!0}function e(){return!1}function o(s){return a()}function p(s){w(d("PANIC",s))}function a(){return t}function c(s){return a()}function R(s){return s(a())}function l(s){return x(s(a()))}function i(s){return n}function u(s){return n}function T(s){return k(s(a()))}function m(){return E(a())}}function k(t,n=g){let r,e,o,p;return o=t,p=n,e=p.parseStackTrace(k),r={ok:a,err:c,inspect:R,stack:l,expect:i,expectErr:u,unlockOr:T,and:m,map:s,mapErr:y,recover:O,degrade:K,toOption:B};function a(){return!1}function c(){return!0}function R(){return o}function l(){return e}function i(_){let P=R(),h=f;if(P instanceof Error){let S=d({code:P.name.toUpperCase(),message:_});h=E(S)}h.none()&&p.matchError(P,S=>{S.message=S.message.map(or=>or+`

     Context
     `+_),h=E(S)});let rr=h.toResult(void 0).recover(()=>d({code:"PANIC",message:_})).unlock();w(rr)}function u(_){return R()}function T(_){return _}function m(_){return r}function s(_){return r}function y(_){return k(_(R()))}function O(_){return x(_(R()))}function K(_){return r}function B(){return f}}function Q(t){let n,r,e;return r=0n,e=new Map,n={unwrap:o,mut:p,onChange:a};function o(){return t}function p(R){let l=o(),i=R;return t=R,e.values().toArray().forEach(u=>u(i,l)),n}function a(R){let l=c();return e.set(l,R),()=>{e.delete(l)}}function c(){return r+=1n}}function j(t,n,r,...e){let o,p;{o=new Map,p=0n;let i=0n;for(;i<r;){let u=a();o.set(u,t(...e)),i++}return function(...u){let T,m;return T=f,m=s();function s(){return c().toResult(void 0).map(O=>(T=E(O),D(R(O),{deAlloc:y}))).recover(()=>(T=E(a()),D(t(...u),{deAlloc:y}))).unlock()}function y(){return T.toResult(void 0).map(O=>{T=f,l(O,n(m.expect("Dyn: Could not deallocate resource but the key was available."+L)))}),m=W({deAlloc:y})}}}function a(){return p+=1n}function c(){let i=o.keys().toArray().at(0);return i?E(i):f}function R(i){let u=o.get(i);return o.delete(i),u}function l(i,u){o.set(i,u)}}function W(t){return{...f,...t}}function D(t,n){return{...E(t),...n}}var N=b.flag,M=b.all,U=b.any;function E(t){return{type:n,some:r,none:e,expect:o,unlock:p,unlockOr:a,and:c,map:R,toResult:l};function n(){return"Some"}function r(){return!0}function e(){return!1}function o(i){return t}function p(){return t}function a(i){return t}function c(i){return i(t)}function R(i){return E(i(t))}function l(i){return x(t)}}var f=(()=>{let t;return t={type:n,some:r,none:e,expect:o,unlockOr:p,and:a,map:c,toResult:R};function n(){return"None"}function r(){return!1}function e(){return!0}function o(l){w(d("ERR_VALUE_REQUIRED",l))}function p(l){return l}function a(l){return t}function c(l){return t}function R(l){return k(l)}})();function G(t,n=2n){let r;return o()===0n?k(d("FPV.ERR_PRECISION_IS_ZERO","Fpv: Does not support zero precision.")):o()<0n?k(d("FPV.ERR_PRECISION_IS_NEGATIVE","Fpv: Does not support negative precision.")):(r=u(t),x({unwrap:e,precision:o,representation:p,add:a,sub:c,mul:R,div:l}));function e(){return r}function o(){return n}function p(){return 10n**o()}function a(T){return i(()=>r+u(T))}function c(T){return i(()=>r-u(T))}function R(T){return i(()=>r*u(T)/p())}function l(T){let m=u(T);return m===0n?k(d("FPV.ERR_DIVISION_BY_ZERO","Fpv: Cannot divide by zero.")):x(i(()=>r*p()/m))}function i(T){return G(T()).expect("Fpv: Failed to wrap the task result into an Fpv."+L)}function u(T){return typeof T=="bigint"?T:T.unwrap()}}function z(t){if(t==null||typeof t!="object")return String(t);try{return JSON.stringify(t)}catch{}return"[object Object]"}function $(t){return v(()=>structuredClone(t)).mapErr(n=>n.parse(r=>r!=null&&typeof r=="object"&&"name"in r&&"code"in r&&"message"in r&&typeof r.name=="string"&&typeof r.code=="number"&&typeof r.message=="string").map(r=>I(r)).unlockOr(I()))}function V(t,n){return(o=>{let p=o!=null&&typeof o=="object"&&"type"in o&&typeof o.type=="string";if(p===!1)return!1;if(n!==void 0){let a=n;p=p&&o.type===a}return p})(t)}function X(t,n){return(o=>{let p=o!=null&&typeof o=="object"&&"type"in o&&typeof o.type=="function"&&typeof o.type()=="string";if(p===!1)return!1;if(n!==void 0){let a=n;p=p&&o.type()===a}return p})(t)}function w(t,n,r){if(typeof t=="object"){let e=t,o=N(n).unlockOr(g);throw["","",`     ${Tr(e.code)} ${e.message.unlockOr("<<< UNAVAILABLE >>>")}`,"","     STACK_TRACE"+e.stack].join(`
`)}else{let e=t,o=N(n).unlockOr(w),p=N(r).unlockOr(g),a=Error();throw a.name="PANIC","PANIC "+e+`
`+p.parseStackTrace(o)}}function Tr(t){return"\x1B[31m"+t+"\x1B[0m"}var g=(()=>{return{matchError:t,localStackTrace:n,parseStackTrace:r,convertToStandardError:e};function t(i,u,T){let m=i,s=m!=null&&typeof m=="object"&&V(m,"Error");if(!s)return!1;if(u!==void 0&&typeof u=="string"){let O=u;s=s&&"code"in m&&typeof m.code=="string"&&m.code===O}if(!s)return!1;let y=f;return u!==void 0&&typeof u=="function"&&(y=E(u)),T!==void 0&&(y=E(T)),y.map(O=>{O(m)}),!0}function n(i){let u=Error();return Error.captureStackTrace(u,i),u.stack?E(u.stack):f}function r(i){return p(o(i))}function e(i){let u=Error();return u.name=i.code,u.message=i.message.unlockOr(""),u.stack=i.stack.toString(),u.cause=void 0,u}function o(i){return typeof i=="string"?i:n(i).unlockOr("")}function p(i){let u="";return i.split(`
`).map(T=>R(T,m=>m.trim(),m=>"")).filter(T=>T.length>0).map(T=>a(T)).map(([T,m,s,y])=>c(T,m,s,y)).forEach(T=>{u+=`
`+T}),u}function a(i){let u=f,T=f,m=f,s=f,O=/at (?<location>.*?) \((?<path>.*?):(?<line>\d+):(?<column>\d+)\)/.exec(i);return O&&O.groups&&(u=O.groups.location?E(O.groups.location):f,T=O.groups.path?E(O.groups.path):f,m=O.groups.line?E(BigInt(O.groups.line)):f,s=O.groups.column?E(BigInt(O.groups.column)):f),[u,T,m,s]}function c(i,u,T,m){let s="at";return M(i,u,T,m).map(([O,K,B,_])=>`     ${l(s)} ${K} ${l(O)} ${B} ${_}`).unlockOr("     "+l("<<< UNAVAILABLE >>>"))}function R(i,u,T){return i==="Error"?T(i):u(i)}function l(i){return"\x1B[31m"+i+"\x1B[0m"}})();function d(t,n,r){{if(typeof t=="object"){let e=t,o=N(e.handler).unlockOr(g);return{type:"Error",code:e.code,message:N(e.message),payload:N(e.payload),stack:N(e.stack).unlockOr(o.parseStackTrace(d))}}return{type:"Error",code:t,message:N(n),payload:N(r),stack:g.parseStackTrace(d)}}}var Z={EncodingError:"DOM.ERR_ENCODING",NotReadableError:"DOM.ERR_NOT_READABLE",UnknownError:"DOM.ERR_UNKNOWN",ConstraintError:"DOM.ERR_CONSTRAINT",DataError:"DOM.ERR_DATA",TransactionInactiveError:"DOM.ERR_TRANSACTION_INACTIVE",ReadOnlyError:"DOM.ERR_READ_ONLY",VersionError:"DOM.ERR_VERSION",OperationError:"DOM.ERR_OPERATION",NotAllowedError:"DOM.ERR_NOT_ALLOWED"};var J={1:"DOM.ERR_INDEX_SIZE",3:"DOM.ERR_HIERARCHY_REQUEST",4:"DOM.ERR_WRONG_DOCUMENT",5:"DOM.ERR_INVALID_CHARACTER",7:"DOM.ERR_NO_MODIFICATION_ALLOWED",8:"DOM.ERR_NOT_FOUND",9:"DOM.ERR_NOT_SUPPORTED",11:"DOM.ERR_INVALID_STATE",12:"DOM.ERR_SYNTAX",13:"DOM.ERR_INVALID_MODIFICATION",14:"DOM.ERR_NAMESPACE",17:"DOM.ERR_TYPE_MISMATCH",18:"DOM.ERR_SECURITY",19:"DOM.ERR_NETWORK",20:"DOM.ERR_ABORT",21:"DOM.ERR_URL_MISMATCH",22:"DOM.ERR_QUOTA_EXCEEDED",23:"DOM.ERR_TIMEOUT",24:"DOM.ERR_INVALID_NODE_TYPE",25:"DOM.ERR_DATA_CLONE"};function I(t){{let r=t;return r===void 0?d("DOM.ERR_UNKNOWN"):d(n(r),r.message)}function n(r){let e="DOM.ERR_UNKNOWN";return r.code===1||r.code===3||r.code===4||r.code===5||r.code===7||r.code===8||r.code===9||r.code===11||r.code===12||r.code===13||r.code===14||r.code===17||r.code===18||r.code===19||r.code===20||r.code===21||r.code===22||r.code===23||r.code===24||r.code===25?e=J[r.code]:(r.name==="EncodingError"||r.name==="NotReadableError"||r.name==="UnknownError"||r.name==="ConstraintError"||r.name==="DataError"||r.name==="TransactionInactiveError"||r.name==="ReadOnlyError"||r.name==="VersionError"||r.name==="OperationError"||r.name==="NotAllowedError")&&(e=Z[r.name]),e}}var L=`
Uh-oh, looks like Reliq took a wrong turn!
Don't worry, it's not you-it's us.
Please report this at dreamcatcher_foundation@proton.me
`;0&&(module.exports={Alloc,DeAlloc,DomError,Dyn,Err,Error,Fpv,None,Ok,Ref,Some,Unsafe,allO,allR,anyO,anyR,clone,isBranded,isBrandedStruct,panic,toString,wrap,wrapAsync});
//# sourceMappingURL=data:application/json;base64,