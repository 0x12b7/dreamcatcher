"use strict";var M=Object.defineProperty;var B=Object.getOwnPropertyDescriptor;var L=Object.getOwnPropertyNames;var F=Object.prototype.hasOwnProperty;var P=(r,o)=>{for(var n in o)M(r,n,{get:o[n],enumerable:!0})},H=(r,o,n,p)=>{if(o&&typeof o=="object"||typeof o=="function")for(let t of L(o))!F.call(r,t)&&t!==n&&M(r,t,{get:()=>o[t],enumerable:!(p=B(o,t))||p.enumerable});return r};var G=r=>H(M({},"__esModule",{value:!0}),r);var X={};P(X,{DomError:()=>D,DomErrorCodeToCodeMap:()=>C,DomErrorNameToCodeMap:()=>V,Err:()=>E,Error:()=>b,None:()=>l,Ok:()=>y,ResultHandler:()=>_,Some:()=>d,Unsafe:()=>g,clone:()=>j,isBranded:()=>c,isErr:()=>v,isNone:()=>h,isOk:()=>I,isOption:()=>U,isResult:()=>Y,isSome:()=>W,isWrapper:()=>K,panic:()=>A,toString:()=>s});module.exports=G(X);function j(r){return _.wrap(()=>structuredClone(r)).mapErr(o=>{let n=o.parse(e=>e!=null&&typeof e=="object"&&"name"in e&&"code"in e&&"message"in e&&typeof e.name=="string"&&typeof e.code=="number"&&typeof e.message=="string");if(n.none())return D();let p=n.unwrapSafely();return D(p)})}function s(r){if(r==null||typeof r!="object")return String(r);try{return JSON.stringify(r)}catch{}return"[object Object]"}function c(r,o){return(p=>p!=null&&typeof p=="object"&&"type"in p&&typeof p.type=="function"&&typeof p.type()=="string"&&p.type()===o)(r)}function b(r){return r}function D(r){{if(r){let o=!1,n="DOM.ERR_UNKNOWN";return o=r.code===1||r.code===3||r.code===4||r.code===5||r.code===7||r.code===8||r.code===9||r.code===11||r.code===12||r.code===13||r.code===14||r.code===17||r.code===18||r.code===19||r.code===20||r.code===21||r.code===22||r.code===23||r.code===24||r.code===25,o&&(n=C[r.code]),o=r.name==="EncodingError"||r.name==="NotReadableError"||r.name==="UnknownError"||r.name==="ConstraintError"||r.name==="DataError"||r.name==="TransactionInactiveError"||r.name==="ReadOnlyError"||r.name==="VersionError"||r.name==="OperationError"||r.name==="NotAllowedError",o&&(n=V[r.name]),{code:n,message:r.message.trim()!==""?d(r.message):l,payload:l}}return{code:"DOM.ERR_UNKNOWN",message:l,payload:l}}}var C={1:"DOM.ERR_INDEX_SIZE",3:"DOM.ERR_HIERARCHY_REQUEST",4:"DOM.ERR_WRONG_DOCUMENT",5:"DOM.ERR_INVALID_CHARACTER",7:"DOM.ERR_NO_MODIFICATION_ALLOWED",8:"DOM.ERR_NOT_FOUND",9:"DOM.ERR_NOT_SUPPORTED",11:"DOM.ERR_INVALID_STATE",12:"DOM.ERR_SYNTAX",13:"DOM.ERR_INVALID_MODIFICATION",14:"DOM.ERR_NAMESPACE",17:"DOM.ERR_TYPE_MISMATCH",18:"DOM.ERR_SECURITY",19:"DOM.ERR_NETWORK",20:"DOM.ERR_ABORT",21:"DOM.ERR_URL_MISMATCH",22:"DOM.ERR_QUOTA_EXCEEDED",23:"DOM.ERR_TIMEOUT",24:"DOM.ERR_INVALID_NODE_TYPE",25:"DOM.ERR_DATA_CLONE"};var V={EncodingError:"DOM.ERR_ENCODING",NotReadableError:"DOM.ERR_NOT_READABLE",UnknownError:"DOM.ERR_UNKNOWN",ConstraintError:"DOM.ERR_CONSTRAINT",DataError:"DOM.ERR_DATA",TransactionInactiveError:"DOM.ERR_TRANSACTION_INACTIVE",ReadOnlyError:"DOM.ERR_READ_ONLY",VersionError:"DOM.ERR_VERSION",OperationError:"DOM.ERR_OPERATION",NotAllowedError:"DOM.ERR_NOT_ALLOWED"};function A(r,o){let n=r,p=o??A,t=Error();throw Error.captureStackTrace(t,p),n+`
`+t.stack}function v(r){return c(r,"Err")}function h(r){return c(r,"None")}function I(r){return c(r,"Ok")}function U(r){return W(r)||h(r)}function Y(r){return I(r)||v(r)}function W(r){return c(r,"Some")}function K(r){return(n=>n!=null&&typeof n=="object"&&"unwrap"in n&&typeof n.unwrap=="function")(r)}var l=(()=>{let r;return r={type:o,some:n,none:p,expect:t,unwrap:e,unwrapOr:i,and:m,map:x,toResult:k,toString:R};function o(){return"None"}function n(){return!1}function p(){return!0}function t(u){let O=Error(u);throw Error.captureStackTrace(O,t),O.stack?u+`
`+O.stack:u}function e(){let u=Error();throw Error.captureStackTrace(u,e),u.stack?o()+`
`+u.stack:o()}function i(u){return u}function m(u){return r}function x(u){return r}function k(u){return E(u)}function R(){return o()}})();function d(r){return{type:o,some:n,none:p,value:t,expect:e,unwrap:i,unwrapOr:m,unwrapSafely:x,and:k,map:R,toResult:u,toString:O};function o(){return"Some"}function n(){return!0}function p(){return!1}function t(){return r}function e(a){return t()}function i(){return t()}function m(a){return t()}function x(){return t()}function k(a){return a(t())}function R(a){return d(a(t()))}function u(a){return y(t())}function O(){return o()+"("+s(t())+")"}}var _=(()=>{return{all:r,any:o,wrap:n,wrapAsync:p};function r(...t){let e=[],i=0;for(;i<t.length;){let m=t.at(i);if(m.ok())e.push(m.val());else return m;i++}return y(e)}function o(...t){let e=[],i=0;for(;i<t.length;){let m=t.at(i);if(m.ok())return m;e.push(m.val()),i++}return E(e)}function n(t,...e){try{return y(t(...e))}catch(i){return E(g(i))}}async function p(t,...e){try{return y(await t(...e))}catch(i){return E(g(i))}}})();function E(r){let o,n;{let f=Error();return Error.captureStackTrace(f,E),n=f.stack??"",o={type:p,ok:t,err:e,val:i,stack:m,expect:x,expectErr:k,unwrap:R,unwrapOr:u,and:O,map:a,mapErr:S,toOption:N,toString:T}}function p(){return"Err"}function t(){return!1}function e(){return!0}function i(){return r}function m(){return n}function x(f){throw f+`
`+m()}function k(f){return i()}function R(){let f=i();if(f!=null&&typeof f=="object"&&"code"in f&&"message"in f&&U(f.message)){let w=f;throw w.message.some()?w.code+": "+w.message.unwrapOr("")+`
`+m():w.code+`
`+m()}throw s(i())+`
`+m()}function u(f){return f}function O(f){return o}function a(f){return o}function S(f){return E(f(i()))}function N(){return l}function T(){return p()+"("+s(i())+`)
`+m()}}function y(r){let o;return o={type:n,ok:p,err:t,val:e,expect:i,expectErr:m,unwrap:x,unwrapOr:k,unwrapSafely:R,and:u,map:O,mapErr:a,toOption:S,toString:N};function n(){return"Ok"}function p(){return!0}function t(){return!1}function e(){return r}function i(T){return e()}function m(T){return A(T,m)}function x(){return e()}function k(T){return e()}function R(){return e()}function u(T){return T(e())}function O(T){return y(T(e()))}function a(T){return o}function S(){return d(e())}function N(){return n()+"("+s(e())+")"}}function g(r){return{type:o,unwrap:n,parse:p,toString:t};function o(){return"Unsafe"}function n(){return r}function p(e){return e(n())?d(n()):l}function t(){return o()+"("+s(n())+")"}}0&&(module.exports={DomError,DomErrorCodeToCodeMap,DomErrorNameToCodeMap,Err,Error,None,Ok,ResultHandler,Some,Unsafe,clone,isBranded,isErr,isNone,isOk,isOption,isResult,isSome,isWrapper,panic,toString});
//# sourceMappingURL=data:application/json;base64,