"use strict";var C=Object.defineProperty;var $=Object.getOwnPropertyDescriptor;var X=Object.getOwnPropertyNames;var Z=Object.prototype.hasOwnProperty;var Q=(t,o)=>{for(var r in o)C(t,r,{get:o[r],enumerable:!0})},J=(t,o,r,i)=>{if(o&&typeof o=="object"||typeof o=="function")for(let n of X(o))!Z.call(t,n)&&n!==r&&C(t,n,{get:()=>o[n],enumerable:!(i=$(o,n))||i.enumerable});return t};var rr=t=>J(C({},"__esModule",{value:!0}),t);var tr={};Q(tr,{Alloc:()=>w,DeAlloc:()=>N,DomError:()=>h,Dyn:()=>q,Err:()=>k,Error:()=>y,Fpv:()=>V,None:()=>l,Ok:()=>x,Some:()=>T,StackTrace:()=>S,StackTraceLine:()=>I,Unsafe:()=>A,allO:()=>j,allR:()=>U,anyO:()=>B,anyR:()=>W,clone:()=>z,isBranded:()=>H,panic:()=>_,toString:()=>G,wrap:()=>b,wrapAsync:()=>P});module.exports=rr(tr);var D=(()=>{return{all:t,any:o,wrap:r,wrapAsync:i};function t(n){let p=[],e=0;for(;e<n.length;){let a=n.at(e);if(a.ok())p.push(a.unlock());else return a;e++}return x(p)}function o(n){let p=[],e=0;for(;e<n.length;){let a=n.at(e);if(a.ok())return a;p.push(a.inspect()),e++}return k(p)}function r(n,...p){try{return x(n(...p))}catch(e){return k(A(e))}}async function i(n,...p){try{return x(await n(...p))}catch(e){return k(A(e))}}})();var M=(()=>{return{all:t,any:o};function t(r){let i=[],n=0;for(;n<r.length;){let p=r.at(n);if(p.none())return p;i.push(p.unlock()),n++}return T(i)}function o(r){let i=0;for(;i<r.length;){let n=r.at(i);if(n.some())return n}return l}})();function A(t){return{unwrap:o,parse:r};function o(){return t}function r(i){return i(o())?T(o()):l}}var U=D.all,W=D.any,b=D.wrap,P=D.wrapAsync;function x(t){let o;return o={ok:r,err:i,expect:n,expectErr:p,unlock:e,unlockOr:a,and:m,map:E,mapErr:c,recover:f,degrade:u,toOption:d};function r(){return!0}function i(){return!1}function n(s){return e()}function p(s){_(y("",s))}function e(){return t}function a(s){return e()}function m(s){return s(e())}function E(s){return x(s(e()))}function c(s){return o}function f(s){return o}function u(s){return k(s(e()))}function d(){return T(e())}}function k(t){let o,r;return r=S(k),o={ok:i,err:n,inspect:p,stack:e,expect:a,expectErr:m,unlockOr:E,and:c,map:f,mapErr:u,recover:d,degrade:s,toOption:g};function i(){return!1}function n(){return!0}function p(){return t}function e(){return r}function a(O){let R=p(),L=l;R!=null&&typeof R=="object"&&"code"in R&&typeof R.code=="string"&&(L=T(R.code)),_(y({code:L.unlockOr("ERR_TRIED_UNWRAP_ERR"),message:T(["Fatal Error >>> Tried to unwrap an error value.","",O].join(`
`)),payload:l,stack:e()}))}function m(O){return p()}function E(O){return O}function c(O){return o}function f(O){return o}function u(O){return k(O(p()))}function d(O){return x(O(p()))}function s(O){return o}function g(){return l}}function q(t,o,r,...i){let n,p;{n=new Map,p=0n;let c=0n;for(;c<r;){let f=e();n.set(f,t(...i)),c++}return function(...f){let u,d;return u=l,d=s();function s(){return a().toResult(void 0).map(O=>(u=T(O),w(m(O),{deAlloc:g}))).recover(()=>(u=T(e()),w(t(...f),{deAlloc:g}))).unlock()}function g(){return u.toResult(void 0).map(O=>{u=l,E(O,o(d.expect("Dyn: Could not deallocate resource but the key was available."+v)))}),d=N({deAlloc:g})}}}function e(){return p+=1n}function a(){let c=n.keys().toArray().at(0);return c?T(c):l}function m(c){let f=n.get(c);return n.delete(c),f}function E(c,f){n.set(c,f)}}function N(t){return{...l,...t}}function w(t,o){return{...T(t),...o}}var j=M.all,B=M.any;function T(t){return{some:o,none:r,expect:i,unlock:n,unlockOr:p,and:e,map:a,toResult:m};function o(){return!0}function r(){return!1}function i(E){return t}function n(){return t}function p(E){return t}function e(E){return E(t)}function a(E){return T(E(t))}function m(E){return x(t)}}var l=(()=>{let t;return t={some:o,none:r,expect:i,unlockOr:n,and:p,map:e,toResult:a};function o(){return!1}function r(){return!0}function i(m){_(y("NONE.ERR_MISSING_VALUE",m))}function n(m){return m}function p(m){return t}function e(m){return t}function a(m){return k(m)}})();function V(t,o=2n){let r;return n()===0n?k(y("FPV.ERR_PRECISION_IS_ZERO","Fpv: Does not support zero precision.")):n()<0n?k(y("FPV.ERR_PRECISION_IS_NEGATIVE","Fpv: Does not support negative precision.")):(r=f(t),x({unwrap:i,precision:n,representation:p,add:e,sub:a,mul:m,div:E}));function i(){return r}function n(){return o}function p(){return 10n**n()}function e(u){return c(()=>r+f(u))}function a(u){return c(()=>r-f(u))}function m(u){return c(()=>r*f(u)/p())}function E(u){let d=f(u);return d===0n?k(y("FPV.ERR_DIVISION_BY_ZERO","Fpv: Cannot divide by zero.")):x(c(()=>r*p()/d))}function c(u){return V(u()).expect("Fpv: Failed to wrap the task result into an Fpv."+v)}function f(u){return typeof u=="bigint"?u:u.unwrap()}}function G(t){if(t==null||typeof t!="object")return String(t);try{return JSON.stringify(t)}catch{}return"[object Object]"}function z(t){return b(()=>structuredClone(t)).mapErr(o=>o.parse(r=>r!=null&&typeof r=="object"&&"name"in r&&"code"in r&&"message"in r&&typeof r.name=="string"&&typeof r.code=="number"&&typeof r.message=="string").map(r=>h(r)).unlockOr(h()))}function H(t,o){return(i=>i!=null&&typeof i=="object"&&"type"in i&&typeof i.type=="function"&&typeof i.type()=="string"&&i.type()===o)(t)}function F(t){let o=Error();return Error.captureStackTrace(o,t),o.stack?T(o.stack):l}function I(t){let o,r,i,n;{o=l,r=l,i=l,n=l;let c=t.split(" "),f=c.shift();if(f&&f.trim().length!==0){let u=c.shift(),d=c.shift();if(u&&u.trim().length!==0&&(o=T(u)),d&&d.trim().length!==0){let s=d.replaceAll("(","").replaceAll(")","").split(":"),g=s.shift(),O=s.at(s.length-1),R=s.at(s.length-2);g&&g.trim().length!==0&&(r=T(g)),O&&O.trim().length!==0&&(n=T(BigInt(O))),R&&R.trim().length!==0&&(i=T(BigInt(R)))}}return{toString:p,location:e,path:a,line:m,column:E}}function p(c){let f="",u="???",d=e().unlockOr(u),s=a().unlockOr(u),g=m().unlockOr(u),O=E().unlockOr(u);return c&&(f=c+" |>"),`${f} ${d} ${s} ${g} ${O}`}function e(){return o}function a(){return r}function m(){return i}function E(){return n}}function S(t){let o;return typeof t=="string"&&(o=n(t)),typeof t=="function"&&(o=n(F(t).unlockOr(""))),Array.isArray(t)&&(o=t),{toString:r,lines:i};function r(){let p="";return i().map((e,a)=>e.toString(BigInt(a))).forEach(e=>p+=e),p}function i(){return o}function n(p){return p.split(`
`).map(e=>e.trim()).filter(e=>e.length>0).map(e=>I(e))}}S(`
    Error: Something went wrong
        at someFunction (/path/to/file.js:10:15)
        <<< STACK_TRACE_LINE.ERR_LOCATION_UNAVAILABLEE >>>
        at anotherFunction (/path/to/otherfile.js:20:25)
        at main (/path/to/mainfile.js:30:35)
`);function _(t,o){let r=o||_;if(typeof t=="object"){let p=t,e=p.code,a="";p.message.map(E=>a=E);let m=Error();throw m.name=e,m.message=a,m.stack=p.stack.toString(),m.cause=void 0,m}let i=t,n=Error();throw n.name="",n.message=i,n.cause=void 0,n.stack=F(r).toResult(void 0).recover(()=>"").unlock(),n}function y(t,o,r){{if(typeof t=="object")return t;let i=t,n=l,p=o;p&&(n=T(p));let e=l,a=r;return a&&(e=T(a)),y({code:i,message:n,payload:e,stack:S(y)})}}var K={EncodingError:"DOM.ERR_ENCODING",NotReadableError:"DOM.ERR_NOT_READABLE",UnknownError:"DOM.ERR_UNKNOWN",ConstraintError:"DOM.ERR_CONSTRAINT",DataError:"DOM.ERR_DATA",TransactionInactiveError:"DOM.ERR_TRANSACTION_INACTIVE",ReadOnlyError:"DOM.ERR_READ_ONLY",VersionError:"DOM.ERR_VERSION",OperationError:"DOM.ERR_OPERATION",NotAllowedError:"DOM.ERR_NOT_ALLOWED"};var Y={1:"DOM.ERR_INDEX_SIZE",3:"DOM.ERR_HIERARCHY_REQUEST",4:"DOM.ERR_WRONG_DOCUMENT",5:"DOM.ERR_INVALID_CHARACTER",7:"DOM.ERR_NO_MODIFICATION_ALLOWED",8:"DOM.ERR_NOT_FOUND",9:"DOM.ERR_NOT_SUPPORTED",11:"DOM.ERR_INVALID_STATE",12:"DOM.ERR_SYNTAX",13:"DOM.ERR_INVALID_MODIFICATION",14:"DOM.ERR_NAMESPACE",17:"DOM.ERR_TYPE_MISMATCH",18:"DOM.ERR_SECURITY",19:"DOM.ERR_NETWORK",20:"DOM.ERR_ABORT",21:"DOM.ERR_URL_MISMATCH",22:"DOM.ERR_QUOTA_EXCEEDED",23:"DOM.ERR_TIMEOUT",24:"DOM.ERR_INVALID_NODE_TYPE",25:"DOM.ERR_DATA_CLONE"};function h(t){{let r=t;return r===void 0?y("DOM.ERR_UNKNOWN"):y(o(r),r.message)}function o(r){let i="DOM.ERR_UNKNOWN";return r.code===1||r.code===3||r.code===4||r.code===5||r.code===7||r.code===8||r.code===9||r.code===11||r.code===12||r.code===13||r.code===14||r.code===17||r.code===18||r.code===19||r.code===20||r.code===21||r.code===22||r.code===23||r.code===24||r.code===25?i=Y[r.code]:(r.name==="EncodingError"||r.name==="NotReadableError"||r.name==="UnknownError"||r.name==="ConstraintError"||r.name==="DataError"||r.name==="TransactionInactiveError"||r.name==="ReadOnlyError"||r.name==="VersionError"||r.name==="OperationError"||r.name==="NotAllowedError")&&(i=K[r.name]),i}}var v=`
Uh-oh, looks like Reliq took a wrong turn!
Don't worry, it's not you-it's us.
Please report this at dreamcatcher_foundation@proton.me
`;0&&(module.exports={Alloc,DeAlloc,DomError,Dyn,Err,Error,Fpv,None,Ok,Some,StackTrace,StackTraceLine,Unsafe,allO,allR,anyO,anyR,clone,isBranded,panic,toString,wrap,wrapAsync});
//# sourceMappingURL=data:application/json;base64,