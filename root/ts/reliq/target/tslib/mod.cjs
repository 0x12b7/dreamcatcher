"use strict";var R=Object.defineProperty;var N=Object.getOwnPropertyDescriptor;var F=Object.getOwnPropertyNames;var C=Object.prototype.hasOwnProperty;var $=(n,r)=>{for(var p in r)R(n,p,{get:r[p],enumerable:!0})},U=(n,r,p,e)=>{if(r&&typeof r=="object"||typeof r=="function")for(let o of F(r))!C.call(n,o)&&o!==p&&R(n,o,{get:()=>r[o],enumerable:!(e=N(r,o))||e.enumerable});return n};var j=n=>U(R({},"__esModule",{value:!0}),n);var L={};$(L,{Assert:()=>_,Err:()=>O,None:()=>y,Ok:()=>x,Option:()=>E,Restorable:()=>H,Result:()=>h,Some:()=>c,Unsafe:()=>g,assert:()=>b,copy:()=>A,err:()=>J,flag:()=>D,flagAsync:()=>G,mapErr:()=>P,none:()=>K,ok:()=>q,panic:()=>S,require:()=>V,some:()=>I,toString:()=>d,wrap:()=>z,wrapAsync:()=>B});module.exports=j(L);var _=(()=>{return{some:n,none:r,mapErr:p};function n(e){return e!=null}function r(e){return e===null&&e===void 0}function p(e,o,T){return e!=null&&typeof e=="object"&&"message"in e&&typeof e.message=="string"&&e.message===o?c(T()):y}})();function b(n,r){if(n)return;let p=Error(r);throw Error.captureStackTrace(p,b),p}function S(n){let r=Error(n);throw Error.captureStackTrace(r,S),r}function V(n,r){if(n)return;let p=Error(r);throw Error.captureStackTrace(p,V),p}function H(n){return{get:r,mut:p,mutAsync:e};function r(){return n}function p(o){let T=A(n);try{o(r())}catch(s){throw n=T,s}}async function e(o){let T=A(n);try{await o(r())}catch(s){throw n=T,s}}}var P=_.mapErr;var h=(()=>{return{match:n,ok:r,err:p,all:e,any:o,wrap:T,wrapAsync:s};function n(t){return r(t)||p(t)}function r(t){return t!=null&&typeof t=="object"&&"ok"in t&&"err"in t&&"val"in t&&"expect"in t&&"expectErr"in t&&"unwrap"in t&&"unwrapOr"in t&&"unwrapSafely"in t&&"andThen"in t&&"map"in t&&"mapErr"in t&&"toOption"in t&&"toString"in t&&typeof t.ok=="function"&&typeof t.err=="function"&&typeof t.val=="function"&&typeof t.expect=="function"&&typeof t.expectErr=="function"&&typeof t.unwrap=="function"&&typeof t.unwrapOr=="function"&&typeof t.unwrapSafely=="function"&&typeof t.andThen=="function"&&typeof t.map=="function"&&typeof t.mapErr=="function"&&typeof t.toOption=="function"&&typeof t.toString=="function"&&typeof t.ok()=="boolean"&&typeof t.err()=="boolean"&&typeof t.toString()=="string"&&t.ok()===!0&&t.err()===!1}function p(t){return t!=null&&typeof t=="object"&&"ok"in t&&"err"in t&&"val"in t&&"stack"in t&&"expect"in t&&"expectErr"in t&&"unwrap"in t&&"unwrapOr"in t&&"andThen"in t&&"map"in t&&"mapErr"in t&&"toOption"in t&&"toString"in t&&typeof t.ok=="function"&&typeof t.err=="function"&&typeof t.val=="function"&&typeof t.stack=="function"&&typeof t.expect=="function"&&typeof t.expectErr=="function"&&typeof t.unwrap=="function"&&typeof t.unwrapOr=="function"&&typeof t.andThen=="function"&&typeof t.map=="function"&&typeof t.mapErr=="function"&&typeof t.toOption=="function"&&typeof t.toString=="function"&&typeof t.ok()=="boolean"&&typeof t.err()=="boolean"&&typeof t.toString()=="string"&&t.ok()===!1&&t.err()===!0}function e(...t){let i=[],u=0n;for(;u<t.length;){let f=t[Number(u)];if(f.ok())i.push(f.val());else return f;u++}return x(i)}function o(...t){let i=[],u=0n;for(;u<t.length;){let f=t[Number(u)];if(f.ok())return f;i.push(f.val()),u++}return O(i)}function T(t,...i){try{return x(t(...i))}catch(u){return O(g(u))}}async function s(t,...i){try{return x(await t(...i))}catch(u){return O(g(u))}}})();function O(n){let r,p;{r={ok:e,err:o,val:T,stack:s,expect:t,expectErr:i,unwrap:u,unwrapOr:f,andThen:k,map:m,mapErr:w,toOption:v,toString:a};let l=Error().stack.split(`
`).slice(2);return l&&l.length>0&&l[0].includes("Err")&&l.shift(),p=l.join(`
`),r}function e(){return!1}function o(){return!0}function T(){return n}function s(){return p}function t(l){throw`${l}
${s()}`}function i(l){return T()}function u(){throw`${T()}
${s()}`}function f(l){return l}function k(l){return r}function m(l){return r}function w(l){return O(l(T()))}function v(){return y}function a(){return`Err(${d(T())})`}}var y=(()=>{let n;return n={some:r,none:p,expect:e,unwrap:o,unwrapOr:T,andThen:s,map:t,toResult:i,toString:u},n;function r(){return!1}function p(){return!0}function e(f){throw`${f}`}function o(){throw`NONE
${Error().stack}`}function T(f){return f}function s(f){return n}function t(f){return n}function i(f){return O(f)}function u(){return"None"}})();function x(n){let r;return r={ok:p,err:e,val:o,expect:T,expectErr:s,unwrap:t,unwrapOr:i,unwrapSafely:u,andThen:f,map:k,mapErr:m,toOption:w,toString:v},r;function p(){return!0}function e(){return!1}function o(){return n}function T(a){return o()}function s(a){return S(a)}function t(){return o()}function i(a){return o()}function u(){return o()}function f(a){return a(o())}function k(a){return x(a(o()))}function m(a){return r}function w(){return c(o())}function v(){return`Ok(${d(o())})`}}var E=(()=>{return{match:n,some:r,none:p,all:e,any:o,wrap:T,wrapAsync:s};function n(t){return r(t)||p(t)}function r(t){return t!=null&&typeof t=="object"&&"some"in t&&"none"in t&&"val"in t&&"expect"in t&&"unwrap"in t&&"unwrapOr"in t&&"unwrapSafely"in t&&"andThen"in t&&"map"in t&&"toResult"in t&&"toString"in t&&typeof t.some=="function"&&typeof t.none=="function"&&typeof t.val=="function"&&typeof t.expect=="function"&&typeof t.unwrap=="function"&&typeof t.unwrapOr=="function"&&typeof t.unwrapSafely=="function"&&typeof t.andThen=="function"&&typeof t.map=="function"&&typeof t.toResult=="function"&&typeof t.toString=="function"&&typeof t.some()=="boolean"&&typeof t.none()=="boolean"&&typeof t.toString()=="string"&&t.some()===!0&&t.none()===!1}function p(t){return t!=null&&typeof t=="object"&&"some"in t&&"none"in t&&"val"in t&&"expect"in t&&"unwrap"in t&&"unwrapOr"in t&&"unwrapSafely"in t&&"andThen"in t&&"map"in t&&"toResult"in t&&"toString"in t&&typeof t.some=="function"&&typeof t.none=="function"&&typeof t.val=="function"&&typeof t.expect=="function"&&typeof t.unwrap=="function"&&typeof t.unwrapOr=="function"&&typeof t.unwrapSafely=="function"&&typeof t.andThen=="function"&&typeof t.map=="function"&&typeof t.toResult=="function"&&typeof t.toString=="function"&&typeof t.some()=="boolean"&&typeof t.none()=="boolean"&&typeof t.toString()=="string"&&t.some()===!1&&t.none()===!0}function e(...t){let i=[],u=0n;for(;u<t.length;){let f=t[Number(u)];if(f.some())i.push(f.val());else return f;u++}return c(i)}function o(...t){let i=0n;for(;i<t.length;){let u=t[Number(i)];return u.some(),u}return y}function T(t,...i){try{return c(t(...i))}catch{return y}}async function s(t,...i){try{return c(await t(...i))}catch{return y}}})();function c(n){return{some:r,none:p,val:e,expect:o,unwrap:T,unwrapOr:s,unwrapSafely:t,andThen:i,map:u,toResult:f,toString:k};function r(){return!0}function p(){return!1}function e(){return n}function o(m){return e()}function T(){return e()}function s(m){return e()}function t(){return e()}function i(m){return m(e())}function u(m){return c(m(e()))}function f(m){return x(e())}function k(){return`Some(${d(e())})`}}function g(n){return{unwrap:r};function r(){return n}}function A(n){return structuredClone(n)}function d(n){let r=String(n);if(r==="[object Object]")try{r=JSON.stringify(n)}catch{}return r}var q=h.ok,J=h.err,z=h.wrap,B=h.wrapAsync,D=E.wrap,G=E.wrapAsync,I=E.some,K=E.none;0&&(module.exports={Assert,Err,None,Ok,Option,Restorable,Result,Some,Unsafe,assert,copy,err,flag,flagAsync,mapErr,none,ok,panic,require,some,toString,wrap,wrapAsync});
//# sourceMappingURL=data:application/json;base64,