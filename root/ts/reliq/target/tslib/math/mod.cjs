"use strict";var r,n=Object.defineProperty,t=Object.getOwnPropertyDescriptor,e=Object.getOwnPropertyNames,o=Object.prototype.hasOwnProperty,u={};((r,t)=>{for(var e in t)n(r,e,{get:t[e],enumerable:!0})})(u,{Fpv:()=>y}),module.exports=(r=u,((r,u,c,a)=>{if(u&&"object"==typeof u||"function"==typeof u)for(let i of e(u))o.call(r,i)||i===c||n(r,i,{get:()=>u[i],enumerable:!(a=t(u,i))||a.enumerable});return r})(n({},"__esModule",{value:!0}),r));var c={flag:function(r){return null==r?s:l(r)},all:function(...r){let n=[],t=0;for(;t<r.length;){let e=r.at(t);if(e.none())return e;n.push(e.unwrap()),t++}return l(n)},any:function(...r){let n=0;for(;n<r.length;){let t=r.at(n);if(t.some())return t;n++}return s}};function a(r){let n;return n={ok:function(){return!0},err:function(){return!1},expect:function(r){return t()},expectErr:function(r){m(d("PANIC",r))},unwrap:t,unwrapOr:function(r){return t()},and:function(r){return r(t())},map:function(r){return a(r(t()))},mapErr:function(r){return n},recover:function(r){return n},degrade:function(r){return i(r(t()))},toOption:function(){return l(t())}};function t(){return r}}function i(r,n=g){let t,e,o,u;return o=r,u=n,e=u.parseStackTrace(i),t={ok:function(){return!1},err:function(){return!0},inspect:c,stack:function(){return e},expect:function(r){let n=c(),t=s;if(n instanceof Error){let e=d({code:n.name.toUpperCase(),message:r});t=l(e)}t.none()&&u.matchError(n,(n=>{n.message=n.message.map((n=>n+"\n\n     Context\n     "+r)),t=l(n)}));m(t.toResult(void 0).recover((()=>d({code:"PANIC",message:r}))).unwrap())},expectErr:function(r){return c()},unwrapOr:function(r){return r},and:function(r){return t},map:function(r){return t},mapErr:function(r){return i(r(c()))},recover:function(r){return a(r(c()))},degrade:function(r){return t},toOption:function(){return s}};function c(){return o}}var f=c.flag,p=c.all;function l(r){return{type:function(){return"Some"},some:function(){return!0},none:function(){return!1},expect:function(n){return r},unwrap:function(){return r},unwrapOr:function(n){return r},and:function(n){return n(r)},map:function(n){return l(n(r))},toResult:function(n){return a(r)}}}var s=(()=>{let r;return r={type:function(){return"None"},some:function(){return!1},none:function(){return!0},expect:function(r){m(d("ERR_VALUE_REQUIRED",r))},unwrapOr:function(r){return r},and:function(n){return r},map:function(n){return r},toResult:function(r){return i(r)}}})();function m(r,n,t){if("object"==typeof r){let t=r;f(n).unwrapOr(g);throw["","",`     ${e=t.code,"[31m"+e+"[0m"} ${t.message.unwrapOr("<<< UNAVAILABLE >>>")}`,"","     STACK_TRACE"+t.stack].join("\n")}{let e=r,o=f(n).unwrapOr(m),u=f(t).unwrapOr(g);throw Error().name="PANIC","PANIC "+e+"\n"+u.parseStackTrace(o)}var e}var g=(()=>{return{matchError:function(r,n,t){let e=r,o=null!=e&&"object"==typeof e&&function(r,n){return(r=>{let t=null!=r&&"object"==typeof r&&"type"in r&&"string"==typeof r.type;if(!1===t)return!1;if(void 0!==n){let e=n;t=t&&r.type===e}return t})(r)}(e,"Error");if(!o)return!1;if(void 0!==n&&"string"==typeof n){let r=n;o=o&&"code"in e&&"string"==typeof e.code&&e.code===r}if(!o)return!1;let u=s;void 0!==n&&"function"==typeof n&&(u=l(n));void 0!==t&&(u=l(t));return u.map((r=>{r(e)})),!0},localStackTrace:r,parseStackTrace:function(t){return function(r){let t="";return r.split("\n").map((r=>function(r,n,t){return"Error"===r?t(r):n(r)}(r,(r=>r.trim()),(r=>"")))).filter((r=>r.length>0)).map((r=>function(r){let n=s,t=s,e=s,o=s,u=/at (?<location>.*?) \((?<path>.*?):(?<line>\d+):(?<column>\d+)\)/.exec(r);u&&u.groups&&(n=u.groups.location?l(u.groups.location):s,t=u.groups.path?l(u.groups.path):s,e=u.groups.line?l(BigInt(u.groups.line)):s,o=u.groups.column?l(BigInt(u.groups.column)):s);return[n,t,e,o]}(r))).map((([r,t,e,o])=>function(r,t,e,o){let u="at",c="<<< UNAVAILABLE >>>";return p(r,t,e,o).map((([r,t,e,o])=>`     ${n(u)} ${t} ${n(r)} ${e} ${o}`)).unwrapOr("     "+n(c))}(r,t,e,o))).forEach((r=>{t+="\n"+r})),t}((e=t,"string"==typeof e?e:r(e).unwrapOr("")));var e},convertToStandardError:function(r){let n=Error();return n.name=r.code,n.message=r.message.unwrapOr(""),n.stack=r.stack.toString(),n.cause=void 0,n}};function r(r){let n=Error();return Error.captureStackTrace(n,r),n.stack?l(n.stack):s}function n(r){return"[31m"+r+"[0m"}})();function d(r,n,t){if("object"==typeof r){let n=r,t=f(n.handler).unwrapOr(g);return{type:"Error",code:n.code,message:f(n.message),payload:f(n.payload),stack:f(n.stack).unwrapOr(t.parseStackTrace(d))}}return{type:"Error",code:r,message:f(n),payload:f(t),stack:g.parseStackTrace(d)}}function y(){}//# sourceMappingURL=data:application/json;base64,