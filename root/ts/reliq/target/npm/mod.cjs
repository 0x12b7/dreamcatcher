"use strict";var n,t,r,e,o=Object.defineProperty,u=Object.getOwnPropertyDescriptor,c=Object.getOwnPropertyNames,a=Object.prototype.hasOwnProperty,l={};function i(n){if(null==n||"object"!=typeof n)return String(n);try{return JSON.stringify(n)}catch{}return"[object Object]"}function f(n){return S((()=>structuredClone(n))).mapErr((n=>n.parse((n=>null!=n&&"object"==typeof n&&"name"in n&&"code"in n&&"message"in n&&"string"==typeof n.name&&"number"==typeof n.code&&"string"==typeof n.message)).map((n=>_(n))).unwrapOr(_())))}function p(n){return{inspect:t,parse:function(n){return n(t())?T(t()):C}};function t(){return n}}function E(n,t,r,...e){let o,u;{o=new Map,u=0n;let a=0n;for(;a<r;){let t=c();o.set(t,n(...e)),a++}return function(...r){let e,u;return e=C,u=function(){let n=o.keys().toArray().at(0);return n?T(n):C}().toResult(void 0).map((n=>(e=T(n),s(function(n){let t=o.get(n);return o.delete(n),t}(n),{deAlloc:a})))).recover((()=>(e=T(c()),s(n(...r),{deAlloc:a})))).unwrap();function a(){return e.toResult(void 0).map((n=>{e=C,function(n,t){o.set(n,t)}(n,t(u.expect("Dyn: Could not deallocate resource but the key was available."+x)))})),u=d({deAlloc:a})}}}function c(){return u+=1n}}function s(n,t){return{...T(n),...t}}function d(n){return{...C,...n}}function R(n,t,r){return{decimals:e,x:o,y:u,distanceFrom:function(n){let t=n.x().sub(o()),r=n.y().sub(u());return t.mul(t).add(r.mul(r)).sqrt()}};function e(){return r}function o(){return O(O.Calculator.unwrap(n),e()).expect(x)}function u(){return O(O.Calculator.unwrap(t),e()).expect(x)}}function O(n,t){return r()<0n?w("FPV.ERR_NEGATIVE_DECIMALS"):g({unwrap:function(){return O.Calculator.unwrap(n)},decimals:r,representation:function(){return 10n**r()},eq:function(t){return O.Calculator.eq(n,t)},lt:function(t){return O.Calculator.lt(n,t)},gt:function(t){return O.Calculator.gt(n,t)},lteq:function(t){return O.Calculator.lteq(n,t)},gteq:function(t){return O.Calculator.gteq(n,t)},add:function(t){return O.Calculator.add(n,t,r()).expect(x)},sub:function(t){return O.Calculator.sub(n,t,r()).expect(x)},mul:function(t){return O.Calculator.mul(n,t,r()).expect(x)},div:function(t){return O.Calculator.div(n,t,r())},pow:function(t){return O.Calculator.pow(n,t,r())},sqrt:function(){return O.Calculator.sqrt(n,r())},cst:function(t){return O.Calculator.cst(n,r(),t)}});function r(){return t}}function m(n){let t,r,e;return r=0n,e=new Map,t={unwrap:o,mut:function(r){let u=o(),c=r;return n=r,e.values().toArray().forEach((n=>n(c,u))),t},onChange:function(n){let t=r+=1n;return e.set(t,n),()=>{e.delete(t)}}};function o(){return n}}function _(n){{let t=n;return t?A(function(n){let t="DOM.ERR_UNKNOWN";1===n.code||3===n.code||4===n.code||5===n.code||7===n.code||8===n.code||9===n.code||11===n.code||12===n.code||13===n.code||14===n.code||17===n.code||18===n.code||19===n.code||20===n.code||21===n.code||22===n.code||23===n.code||24===n.code||25===n.code?t=_.Exception.CodeRemap[n.code]:"EncodingError"!==n.name&&"NotReadableError"!==n.name&&"UnknownError"!==n.name&&"ConstraintError"!==n.name&&"DataError"!==n.name&&"TransactionInactiveError"!==n.name&&"ReadOnlyError"!==n.name&&"VersionError"!==n.name&&"OperationError"!==n.name&&"NotAllowedError"!==n.name||(t=_.Exception.NameRemap[n.name]);return t}(t),t.message):A("DOM.ERR_UNKNOWN")}}((n,t)=>{for(var r in t)o(n,r,{get:t[r],enumerable:!0})})(l,{Alloc:()=>s,Branded:()=>r,BrandedStruct:()=>t,DeAlloc:()=>d,Dyn:()=>E,Err:()=>w,Error:()=>A,Fpv:()=>O,None:()=>C,Ok:()=>g,Option:()=>D,Ref:()=>m,Result:()=>y,Some:()=>T,Unsafe:()=>p,Vec:()=>R,allO:()=>I,allR:()=>h,anyO:()=>H,anyR:()=>k,clone:()=>f,flag:()=>M,toString:()=>i,wrap:()=>S,wrapAsync:()=>b}),module.exports=(n=l,((n,t,r,e)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let l of c(t))a.call(n,l)||l===r||o(n,l,{get:()=>t[l],enumerable:!(e=u(t,l))||e.enumerable});return n})(o({},"__esModule",{value:!0}),n)),(t||(t={})).Handler=(()=>{return{match:function(t,r,e){let o=t;if(!n(o))return!1;if("string"==typeof r&&!n(o,r))return!1;let u=o;return"function"==typeof r?(r(u),!0):"function"!=typeof e||(e(u),!0)}};function n(n,t){let r=n;return null!=r&&"object"==typeof r&&"type"in r&&"string"==typeof r.type&&(!t||r.type===t)}})(),(r||(r={})).Handler=(()=>{return{match:function(t,r,e){let o=t;if(!n(o))return!1;if("string"==typeof r&&!n(o,r))return!1;let u=o;return"function"==typeof r?(r(u),!0):"function"!=typeof e||(e(u),!0)}};function n(n,t){let r=n;return null!=r&&"object"==typeof r&&"type"in r&&"function"==typeof r.type&&"string"==typeof r.type()&&(!t||r.type()===t)}})(),(e=O||(O={})).Calculator=(()=>{return{unwrap:n,eq:function(t,r){return n(t)===n(r)},lt:function(t,r){return n(t)<n(r)},gt:function(t,r){return n(t)>n(r)},lteq:function(t,r){return n(t)<=n(r)},gteq:function(t,r){return n(t)>=n(r)},add:function(t,r,o){return e(n(t)+n(r),o)},sub:function(t,r,o){return e(n(t)-n(r),o)},mul:function(t,r,o){let u=n(t),c=n(r),a=u*c;return e(0n===o?a:a/10n**o,o)},div:function(t,r,o){let u=n(t),c=n(r);return 0n===c?w("FPV.ERR_DIVISION_BY_ZERO"):g(0n===o?e(u/c,o).expect(x):e(u*10n**o/u,o).expect(x))},pow:function(r,o,u){let c=n(r),a=n(o);if(a<0n)return w("FPV.ERR_NEGATIVE_EXPONENT");let l=1n;for(;a>0n;)a%2n===1n&&(l=l*c/10n**u),c=c*c/10n**u,a/=2n;let i=t(l,0n,u);if(i.err())return i;let f=i.unwrap().unwrap();return e(f,u)},sqrt:function(t,r){let o=n(t);if(o<0n)return w("FPV.ERR_CANNOT_SQUARE_NAGATIVE");if(0n===o)return e(0n,r);let u=10n**r;u*=o;let c,a=u;do{c=a,a=(c+u/c)/2n}while(a!==c);return e(a,r)},cst:t};function n(n){return"bigint"==typeof n?n:n.unwrap()}function t(t,r,o){if(r<0n)return w("FPV.ERR_NEGATIVE_DECIMALS");if(o<0n)return w("FPV.ERR_NEGATIVE_DECIMALS");let u,c=n(t);return o>r&&(u=10n**(o-r),c*=u),o<r&&(u=10n**(r-o),c/=u),g(e(c,o).expect(x))}})(),(n=>{let t;var r;(r=t=n.Exception||(n.Exception={})).NameRemap={EncodingError:"DOM.ERR_ENCODING",NotReadableError:"DOM.ERR_NOT_READABLE",UnknownError:"DOM.ERR_UNKNOWN",ConstraintError:"DOM.ERR_CONSTRAINT",DataError:"DOM.ERR_DATA",TransactionInactiveError:"DOM.ERR_TRANSACTION_INACTIVE",ReadOnlyError:"DOM.ERR_READ_ONLY",VersionError:"DOM.ERR_VERSION",OperationError:"DOM.ERR_OPERATION",NotAllowedError:"DOM.ERR_NOT_ALLOWED"},r.CodeRemap={1:"DOM.ERR_INDEX_SIZE",3:"DOM.ERR_HIERARCHY_REQUEST",4:"DOM.ERR_WRONG_DOCUMENT",5:"DOM.ERR_INVALID_CHARACTER",7:"DOM.ERR_NO_MODIFICATION_ALLOWED",8:"DOM.ERR_NOT_FOUND",9:"DOM.ERR_NOT_SUPPORTED",11:"DOM.ERR_INVALID_STATE",12:"DOM.ERR_SYNTAX",13:"DOM.ERR_INVALID_MODIFICATION",14:"DOM.ERR_NAMESPACE",17:"DOM.ERR_TYPE_MISMATCH",18:"DOM.ERR_SECURITY",19:"DOM.ERR_NETWORK",20:"DOM.ERR_ABORT",21:"DOM.ERR_URL_MISMATCH",22:"DOM.ERR_QUOTA_EXCEEDED",23:"DOM.ERR_TIMEOUT",24:"DOM.ERR_INVALID_NODE_TYPE",25:"DOM.ERR_DATA_CLONE"}})(_||(_={}));var y,D,N=globalThis.Error;function A(n,t,r){if("object"==typeof n){let t=n,r=M(t.handler).unwrapOr(A.Handler);return{type:"Error",code:t.code,message:D.Handler.flag(t.message),payload:D.Handler.flag(t.payload),stack:D.Handler.flag(t.stack).unwrapOr(r.localStackTrace(A).unwrapOr(""))}}return{type:"Error",code:n,message:D.Handler.flag(t),payload:D.Handler.flag(r),stack:A.Handler.localStackTrace(A).unwrapOr("")}}function g(n){let t;return t={ok:function(){return!0},err:function(){return!1},expect:function(n){return r()},expectErr:function(n){A.Handler.panic(A("PANIC",n))},unwrap:r,unwrapOr:function(n){return r()},and:function(n){return n(r())},map:function(n){return g(n(r()))},mapErr:function(n){return t},recover:function(n){return t},degrade:function(n){return w(n(r()))},toOption:function(){return T(r())}};function r(){return n}}function w(n,t){let r,e,o,u;return o=n,u=t??A.Handler,e=u.localStackTrace(w).unwrapOr(""),r={ok:function(){return!1},err:function(){return!0},inspect:c,stack:a,expect:function n(t){let r=c();if(r instanceof N){let n=r.name,e=r.message+`\n   Context\n   ${t}`,o=r.stack??a();A.Handler.panic(A({code:n,message:e,stack:o}))}A.Handler.match(c(),(n=>{A.Handler.panic(A({code:n.code,message:n.message+`\n   Context\n   ${t}`,stack:n.stack}))})),A.Handler.panic(A({code:"PANIC",message:t??"An unexpected `Result` has caused the program to panic.",stack:A.Handler.localStackTrace(n).unwrapOr("<<< 404 >>>")}))},expectErr:function(n){return c()},unwrapOr:function(n){return n},and:function(n){return r},map:function(n){return r},mapErr:function(n){return w(n(c()))},recover:function(n){return g(n(c()))},degrade:function(n){return r},toOption:function(){return C}};function c(){return o}function a(){return e}}function T(n){return{type:function(){return"Some"},some:function(){return!0},none:function(){return!1},expect:function(t){return n},unwrap:function(){return n},unwrapOr:function(t){return n},and:function(t){return t(n)},map:function(t){return T(t(n))},toResult:function(t){return g(n)}}}(A||(A={})).Handler=(()=>{let n;return n={match:function(n,r,e){let o=n;if(!t.Handler.match(o))return!1;if("string"==typeof r){let n=r;if(!t.Handler.match(o,n))return!1}let u=o;return"function"==typeof r?(r(u),!0):"function"!=typeof e||(e(u),!0)},panic:function t(r,e,o){if("object"==typeof r){let n=r,t=n.stack.split("\n");throw t.shift(),n.stack=t.join("\n"),console.log(t,"ff"),`c${n.code}: ${n.message.unwrapOr("")}\n${n.stack}`}let u=r,c=M(e).unwrapOr(t),a=M(o).unwrapOr(n).localStackTrace(c).toResult(C).map((n=>{let t=n.split("\n");return t.shift(),t.join("\n")})).recover((()=>"<<< 404 >>>")).unwrap();throw`c[31m${u}[0m\n${a}`},localStackTrace:function(n){let t=N();return N.captureStackTrace(t,n),t.stack?T(t.stack):C}}})(),(y||(y={})).Handler={all:function(n){let t=[],r=0;for(;r<n.length;){let e=n.at(r);if(!e.ok())return e;t.push(e.unwrap()),r++}return g(t)},any:function(n){let t=[],r=0;for(;r<n.length;){let e=n.at(r);if(e.ok())return e;t.push(e.inspect()),r++}return w(t)},wrap:function(n,...t){try{return g(n(...t))}catch(n){return w(p(n))}},wrapAsync:async function(n,...t){try{return g(await n(...t))}catch(n){return w(p(n))}}},(D||(D={})).Handler={flag:function(n){return null==n?C:T(n)},all:function(...n){let t=[],r=0;for(;r<n.length;){let e=n.at(r);if(e.none())return e;t.push(e.unwrap()),r++}return T(t)},any:function(...n){let t=0;for(;t<n.length;){let r=n.at(t);if(r.some())return r;t++}return C}};var C=(()=>{let n;return n={type:function(){return"None"},some:function(){return!1},none:function(){return!0},expect:function(n){A.Handler.panic(A("ERR_VALUE_REQUIRED",n))},unwrapOr:function(n){return n},and:function(t){return n},map:function(t){return n},toResult:function(n){return w(n)}}})(),M=D.Handler.flag,I=D.Handler.all,H=D.Handler.any,h=y.Handler.all,k=y.Handler.any,S=y.Handler.wrap,b=y.Handler.wrapAsync,x="\nUh-oh, looks like Reliq took a wrong turn!\nDon't worry, it's not you-it's us.\nPlease report this at dreamcatcher_foundation@proton.me";//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL21vZC50cyIsICIuLi8uLi9zcmMvdXRpbC90b19zdHJpbmcudHMiLCAiLi4vLi4vc3JjL3V0aWwvY2xvbmUudHMiLCAiLi4vLi4vc3JjL3Vuc2FmZS91bnNhZmUudHMiLCAiLi4vLi4vc3JjL3R5cGUvdHJhaXQvYnJhbmRlZF9zdHJ1Y3QudHMiLCAiLi4vLi4vc3JjL3R5cGUvdHJhaXQvYnJhbmRlZC50cyIsICIuLi8uLi9zcmMvcGVyZm9ybWFuY2Uvb2JqZWN0X3Bvb2wvZHluLnRzIiwgIi4uLy4uL3NyYy9tYXRoL3ZlYy50cyIsICIuLi8uLi9zcmMvbWF0aC9mcHYudHMiLCAiLi4vLi4vc3JjL2V2ZW50L3JlZi50cyIsICIuLi8uLi9zcmMvZXJyb3IvdmFyaWFudC9kb21fZXJyb3IudHMiLCAiLi4vLi4vc3JjL2Vycm9yL2Vycm9yX2hhbmRsZXIudHMiLCAiLi4vLi4vc3JjL2NvbnN0YW50L2ludGVybmFsX2Vycm9yX21lc3NhZ2UudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIi8vICNyZWdpb24gRXJyb3IgSGFuZGxpbmdcclxuXHJcbmV4cG9ydCB7IEVycm9yIH0gZnJvbSBcIkByb290XCI7XHJcbmV4cG9ydCB7IEVyciB9IGZyb20gXCJAcm9vdFwiO1xyXG5leHBvcnQgeyBPayB9IGZyb20gXCJAcm9vdFwiO1xyXG5leHBvcnQgeyBSZXN1bHQgfSBmcm9tIFwiQHJvb3RcIjtcclxuZXhwb3J0IHsgU29tZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5leHBvcnQgeyBOb25lIH0gZnJvbSBcIkByb290XCI7XHJcbmV4cG9ydCB7IE9wdGlvbiB9IGZyb20gXCJAcm9vdFwiO1xyXG5leHBvcnQgeyBmbGFnIH0gZnJvbSBcIkByb290XCI7XHJcbmV4cG9ydCB7IGFsbE8gfSBmcm9tIFwiQHJvb3RcIjtcclxuZXhwb3J0IHsgYW55TyB9IGZyb20gXCJAcm9vdFwiO1xyXG5leHBvcnQgeyBhbGxSIH0gZnJvbSBcIkByb290XCI7XHJcbmV4cG9ydCB7IGFueVIgfSBmcm9tIFwiQHJvb3RcIjtcclxuZXhwb3J0IHsgd3JhcCB9IGZyb20gXCJAcm9vdFwiO1xyXG5leHBvcnQgeyB3cmFwQXN5bmMgfSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcblxyXG4vLyAjcmVnaW9uIEV2ZW50IERyaXZlbiBBcmNoaXRlY3R1cmVcclxuXHJcbmV4cG9ydCB7IFJlZiB9IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuXHJcbi8vICNyZWdpb24gTWF0aFxyXG5cclxuZXhwb3J0IHsgRnB2IH0gZnJvbSBcIkByb290XCI7XHJcbmV4cG9ydCB7IFZlYyB9IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuXHJcbi8vICNyZWdpb24gUGVyZm9ybWFuY2VcclxuXHJcbmV4cG9ydCB7IER5biB9IGZyb20gXCJAcm9vdFwiO1xyXG5leHBvcnQgeyBBbGxvYyB9IGZyb20gXCJAcm9vdFwiO1xyXG5leHBvcnQgeyBEZUFsbG9jIH0gZnJvbSBcIkByb290XCI7XHJcblxyXG5cclxuLy8gI3JlZ2lvbiBUcmFpdFxyXG5cclxuZXhwb3J0IHsgdHlwZSBQYXJzYWJsZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5leHBvcnQgeyB0eXBlIFNlcmlhbGl6YWJsZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5leHBvcnQgeyBCcmFuZGVkU3RydWN0IH0gZnJvbSBcIkByb290XCI7XHJcbmV4cG9ydCB7IEJyYW5kZWQgfSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcblxyXG4vLyAjcmVnaW9uIFR5cGVcclxuXHJcbmV4cG9ydCB7IHR5cGUgQXN5bmNDbG9zdXJlIH0gZnJvbSBcIkByb290XCI7XHJcbmV4cG9ydCB7IHR5cGUgQXN5bmNGdW5jdGlvbiB9IGZyb20gXCJAcm9vdFwiO1xyXG5leHBvcnQgeyB0eXBlIENsb3N1cmUgfSBmcm9tIFwiQHJvb3RcIjtcclxuZXhwb3J0IHsgdHlwZSBGdW5jdGlvbiB9IGZyb20gXCJAcm9vdFwiO1xyXG5leHBvcnQgeyB0eXBlIE1heWJlQXN5bmMgfSBmcm9tIFwiQHJvb3RcIjtcclxuZXhwb3J0IHsgdHlwZSBUeXBlR3VhcmQgfSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcblxyXG4vLyAjcmVnaW9uIE1pc2NcclxuXHJcbmV4cG9ydCB7IFVuc2FmZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuXHJcbi8vICNyZWdpb24gVXRpbFxyXG5cclxuZXhwb3J0IHsgY2xvbmUgfSBmcm9tIFwiQHJvb3RcIjtcclxuZXhwb3J0IHsgdG9TdHJpbmcgfSBmcm9tIFwiQHJvb3RcIjsiLCAiLyoqIFxyXG4gKiAqKipCcmllZioqKlxyXG4gKiBDb252ZXJ0cyBgdW5rbm93bmAgdG8gYHN0cmluZ2AuXHJcbiAqIFxyXG4gKiAqKipXYXJuaW5nKioqXHJcbiAqIERvZXMgbm90IHN1cHBvcnQgY2lyY3VsYXIgcmVmZXJlbmNlcyBhbmQgY2lyY3VsYXIgb2JqZWN0cyB3aWxsIHJlc3VsdCBpbiBgW29iamVjdCBPYmplY3RdYC5cclxuICogXHJcbiAqICoqKkV4YW1wbGUqKipcclxuICogIGBgYHRzXHJcbiAqICBjb25zb2xlLmxvZyh0b1N0cmluZyg0MikpOyAgICAgICAgICAvLy8gNDJcclxuICogIGNvbnNvbGUubG9nKHRvU3RyaW5nKHRydWUpKTsgICAgICAgIC8vLyB0cnVlXHJcbiAqICBjb25zb2xlLmxvZyh0b1N0cmluZyhudWxsKSk7ICAgICAgICAvLy8gbnVsbFxyXG4gKiAgY29uc29sZS5sb2codG9TdHJpbmcodW5kZWZpbmVkKSk7ICAgLy8vIHVuZGVmaW5lZFxyXG4gKiBcclxuICogIGNvbnNvbGUubG9nKHRvU3RyaW5nKFwiZXhhbXBsZVwiKSk7ICAgLy8vIGV4YW1wbGVcclxuICogXHJcbiAqICBsZXQgb2JqZWN0OiB7XHJcbiAqICAgICAgY29sb3I6IHN0cmluZztcclxuICogICAgICBzcGVlZDoge1xyXG4gKiAgICAgICAgICBtaW46IG51bWJlcixcclxuICogICAgICAgICAgbWF4OiBudW1iZXJcclxuICogICAgICB9XHJcbiAqICB9ID0ge1xyXG4gKiAgICAgIGNvbG9yOiBcIkJsdWVcIixcclxuICogICAgICBzcGVlZDoge1xyXG4gKiAgICAgICAgICBtaW46IDAsXHJcbiAqICAgICAgICAgIG1heDogNTAwXHJcbiAqICAgICAgfVxyXG4gKiAgfTtcclxuICogIGNvbnNvbGUubG9nKG9iamVjdCk7ICAgICAgICAgICAgICAgIC8vLyB7XCJjb2xvclwiOlwiQmx1ZVwiLFwic3BlZWRcIjp7XCJtaW5cIjowLFwibWF4XCI6NTAwfX1cclxuICogXHJcbiAqICBmdW5jdGlvbiBmb28oKTogdm9pZCB7XHJcbiAqICAgICAgbGV0IHg6IHN0cmluZyA9IDUwMDtcclxuICogICAgICByZXR1cm4geDtcclxuICogIH1cclxuICogIGNvbnNvbGUubG9nKGZvbyk7ICAgICAgICAgICAgICAgICAgIC8vLyBmdW5jdGlvbiBmb28oKSB7XHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8gICAgIHggPSA1MDA7XHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8gICAgIHJldHVybiB4O1xyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vIH1cclxuICogIGBgYFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHRvU3RyaW5nKHVua25vd246IHVua25vd24pOiBzdHJpbmcge1xyXG4gICAgaWYgKHVua25vd24gPT09IG51bGwgfHwgdW5rbm93biA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiB1bmtub3duICE9PSBcIm9iamVjdFwiKSByZXR1cm4gU3RyaW5nKHVua25vd24pO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodW5rbm93bik7XHJcbiAgICB9XHJcbiAgICBjYXRjaCB7fVxyXG4gICAgcmV0dXJuIFwiW29iamVjdCBPYmplY3RdXCI7XHJcbn0iLCAiaW1wb3J0IHR5cGUgeyBSZXN1bHQgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgRG9tRXJyb3IgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgd3JhcCB9IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuLyoqXHJcbiAqICoqKkJyaWVmKioqXHJcbiAqIENyZWF0ZXMgYSBkZWVwIGNsb25lIG9mIHRoZSBwcm92aWRlZCB2YWx1ZSB1c2luZyB0aGUgc3RydWN0dXJlZENsb25lIEFQSS5cclxuICogXHJcbiAqICoqKkV4YW1wbGUqKipcclxuICogYGBgdHNcclxuICogIGNsb25lKClcclxuICogICAgICAucmVzb2x2ZShlID0+IHtcclxuICogICAgICAgICAgaWYgKGUuY29kZSA9PT0gXCJET00uRVJSX0RBVEFfQ0xPTkVcIikge1xyXG4gKiAgICAgICAgICAgICAgLy8vIC4uLlxyXG4gKiAgICAgICAgICB9XHJcbiAqICAgICAgfSlcclxuICogICAgICAudW5sb2NrKCk7XHJcbiAqIGBgYFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lPFQxPih2YWx1ZTogVDEpOiBSZXN1bHQ8VDEsIERvbUVycm9yPiB7XHJcbiAgICByZXR1cm4gd3JhcCgoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHN0cnVjdHVyZWRDbG9uZSh2YWx1ZSk7XHJcbiAgICB9KS5tYXBFcnIodW5zYWZlID0+IHtcclxuICAgICAgICByZXR1cm4gdW5zYWZlXHJcbiAgICAgICAgICAgIC5wYXJzZSgoc2VsZik6IHNlbGYgaXMgRE9NRXhjZXB0aW9uID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzZWxmICE9PSBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgJiYgc2VsZiAhPT0gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgICAgICAgICAgJiYgdHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCJcclxuICAgICAgICAgICAgICAgICAgICAmJiBcIm5hbWVcIiBpbiBzZWxmXHJcbiAgICAgICAgICAgICAgICAgICAgJiYgXCJjb2RlXCIgaW4gc2VsZlxyXG4gICAgICAgICAgICAgICAgICAgICYmIFwibWVzc2FnZVwiIGluIHNlbGZcclxuICAgICAgICAgICAgICAgICAgICAmJiB0eXBlb2Ygc2VsZi5uYW1lID09PSBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICAgICAgJiYgdHlwZW9mIHNlbGYuY29kZSA9PT0gXCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICYmIHR5cGVvZiBzZWxmLm1lc3NhZ2UgPT09IFwic3RyaW5nXCI7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5tYXAoZXhjZXB0aW9uID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBEb21FcnJvcihleGNlcHRpb24pO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAudW53cmFwT3IoRG9tRXJyb3IoKSk7XHJcbiAgICB9KTtcclxufSIsICJpbXBvcnQgeyB0eXBlIFJlY292ZXJ5V3JhcHBlciB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyB0eXBlIFBhcnNhYmxlIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IHR5cGUgVHlwZUd1YXJkIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IHR5cGUgT3B0aW9uIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IFNvbWUgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgTm9uZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuZXhwb3J0IHR5cGUgVW5zYWZlID1cclxuICAgICYgUmVjb3ZlcnlXcmFwcGVyPHVua25vd24+XHJcbiAgICAmIFBhcnNhYmxlO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFVuc2FmZShfdmFsdWU6IHVua25vd24pOiBVbnNhZmUge1xyXG4gICAgLyoqKi8ge1xyXG4gICAgICAgIHJldHVybiB7IGluc3BlY3QsIHBhcnNlIH07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaW5zcGVjdCgpOiB1bmtub3duIHtcclxuICAgICAgICByZXR1cm4gX3ZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHBhcnNlPFQxPihndWFyZDogVHlwZUd1YXJkPFQxPik6IE9wdGlvbjxUMT4ge1xyXG4gICAgICAgIGlmICghZ3VhcmQoaW5zcGVjdCgpKSkgcmV0dXJuIE5vbmU7XHJcbiAgICAgICAgcmV0dXJuIFNvbWUoKGluc3BlY3QoKSBhcyBUMSkpO1xyXG4gICAgfVxyXG59IiwgImltcG9ydCB0eXBlIHsgQ2xvc3VyZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuLyoqXHJcbiAqICoqKkJyaWVmKioqXHJcbiAqIFV0aWxpdHkgdHlwZSBmb3IgY3JlYXRpbmcgYnJhbmRlZCB0eXBlcyB3aXRoIGEgdW5pcXVlIHN0cmluZyBsaXRlcmFsIGlkZW50aWZpZXIgYFQxYC5cclxuICogXHJcbiAqICoqKkV4YW1wbGUqKipcclxuICogYGBgdHNcclxuICogIHR5cGUgRm9vID0gXHJcbiAqICAgICAgJiBCcmFuZGVkU3RydWN0PFwiRm9vXCI+XHJcbiAqICAgICAgJiB7XHJcbiAqICAgICAgZm9vOiB2b2lkO1xyXG4gKiAgfTtcclxuICogXHJcbiAqICB0eXBlIEJhciA9XHJcbiAqICAgICAgJiBCcmFuZGVkU3RydWN0PFwiQmFyXCI+XHJcbiAqICAgICAgJiB7XHJcbiAqICAgICAgZm9vOiB2b2lkO1xyXG4gKiAgfTtcclxuICogXHJcbiAqICBsZXQgdW5pb246IEZvbyB8IEJhcjtcclxuICogIGlmICh1bmlvbi50eXBlID09PSBcIkZvb1wiKSB7XHJcbiAqICAgICAgLy8vIC4uLlxyXG4gKiAgfVxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCB0eXBlIEJyYW5kZWRTdHJ1Y3Q8VDEgZXh0ZW5kcyBzdHJpbmc+ID0ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIFR5cGUtbGV2ZWwgbWFya2VyIHNwZWNpZnlpbmcgdGhlIHVuaXF1ZSB0eXBlIGlkZW50aWZpZXIgYFQxYC5cclxuICAgICAqXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIHR5cGUgRm9vID0gXHJcbiAgICAgKiAgICAgICYgQnJhbmRlZFN0cnVjdDxcIkZvb1wiPlxyXG4gICAgICogICAgICAmIHtcclxuICAgICAqICAgICAgZm9vOiB2b2lkO1xyXG4gICAgICogIH07XHJcbiAgICAgKiBcclxuICAgICAqICB0eXBlIEJhciA9XHJcbiAgICAgKiAgICAgICYgQnJhbmRlZFN0cnVjdDxcIkJhclwiPlxyXG4gICAgICogICAgICAmIHtcclxuICAgICAqICAgICAgZm9vOiB2b2lkO1xyXG4gICAgICogIH07XHJcbiAgICAgKiBcclxuICAgICAqICBsZXQgdW5pb246IEZvbyB8IEJhcjtcclxuICAgICAqICBpZiAodW5pb24udHlwZSA9PT0gXCJGb29cIikge1xyXG4gICAgICogICAgICAvLy8gLi4uXHJcbiAgICAgKiAgfVxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIHR5cGU6IFQxO1xyXG59O1xyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBCcmFuZGVkU3RydWN0IHtcclxuICAgIGV4cG9ydCB0eXBlIFRhc2s8VDEgZXh0ZW5kcyBzdHJpbmc+ID0gQ2xvc3VyZTxbdmFsdWU6IEJyYW5kZWRTdHJ1Y3Q8VDE+XSwgdm9pZD47XHJcblxyXG4gICAgZXhwb3J0IHR5cGUgSGFuZGxlciA9IHtcclxuICAgICAgICBtYXRjaDxUMSBleHRlbmRzIHN0cmluZyA9IGFueT4odW5rbm93bjogdW5rbm93bik6IHVua25vd24gaXMgQnJhbmRlZFN0cnVjdDxUMT47XHJcbiAgICAgICAgbWF0Y2g8VDEgZXh0ZW5kcyBzdHJpbmcgPSBhbnk+KHVua25vd246IHVua25vd24sIHRhc2s6IFRhc2s8VDE+KTogdW5rbm93biBpcyBCcmFuZGVkU3RydWN0PFQxPjtcclxuICAgICAgICBtYXRjaDxUMSBleHRlbmRzIHN0cmluZz4odW5rbm93bjogdW5rbm93biwgYnJhbmQ6IFQxKTogdW5rbm93biBpcyBCcmFuZGVkU3RydWN0PFQxPjtcclxuICAgICAgICBtYXRjaDxUMSBleHRlbmRzIHN0cmluZz4odW5rbm93bjogdW5rbm93biwgYnJhbmQ6IFQxLCB0YXNrOiBUYXNrPFQxPik6IHVua25vd24gaXMgQnJhbmRlZFN0cnVjdDxUMT47XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydCBjb25zdCBIYW5kbGVyOiBIYW5kbGVyID0gKCgpID0+IHtcclxuICAgICAgICAvKiogQGNvbnN0cnVjdG9yICovIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgbWF0Y2ggfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG1hdGNoPFQxIGV4dGVuZHMgc3RyaW5nID0gYW55Pih1bmtub3duOiB1bmtub3duKTogdW5rbm93biBpcyBCcmFuZGVkU3RydWN0PFQxPjtcclxuICAgICAgICBmdW5jdGlvbiBtYXRjaDxUMSBleHRlbmRzIHN0cmluZyA9IGFueT4odW5rbm93bjogdW5rbm93biwgdGFzazogQ2xvc3VyZTxbaXRlbTogQnJhbmRlZFN0cnVjdDxUMT5dLCB2b2lkPik6IHVua25vd24gaXMgQnJhbmRlZFN0cnVjdDxUMT47XHJcbiAgICAgICAgZnVuY3Rpb24gbWF0Y2g8VDEgZXh0ZW5kcyBzdHJpbmc+KHVua25vd246IHVua25vd24sIGJyYW5kOiBUMSk6IHVua25vd24gaXMgQnJhbmRlZFN0cnVjdDxUMT47XHJcbiAgICAgICAgZnVuY3Rpb24gbWF0Y2g8VDEgZXh0ZW5kcyBzdHJpbmc+KHVua25vd246IHVua25vd24sIGJyYW5kOiBUMSwgdGFzazogQ2xvc3VyZTxbaXRlbTogQnJhbmRlZFN0cnVjdDxUMT5dLCB2b2lkPik6IHVua25vd24gaXMgQnJhbmRlZFN0cnVjdDxUMT47XHJcbiAgICAgICAgZnVuY3Rpb24gbWF0Y2g8VDEgZXh0ZW5kcyBzdHJpbmc+KFxyXG4gICAgICAgICAgICBwMDogdW5rbm93bixcclxuICAgICAgICAgICAgcDE/OiBUYXNrPFQxPiB8IFQxLFxyXG4gICAgICAgICAgICBwMj86IFRhc2s8VDE+XHJcbiAgICAgICAgKTogcDAgaXMgQnJhbmRlZFN0cnVjdDxUMT4ge1xyXG4gICAgICAgICAgICBsZXQgdW5rbm93bjogdW5rbm93biA9IHAwO1xyXG4gICAgICAgICAgICBpZiAoIV92YWxpZCh1bmtub3duKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHAxID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgYnJhbmQ6IFQxID0gcDE7XHJcbiAgICAgICAgICAgICAgICBpZiAoIV92YWxpZCh1bmtub3duLCBicmFuZCkpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgdmFsdWU6IEJyYW5kZWRTdHJ1Y3Q8VDE+ID0gKHVua25vd24gYXMgQnJhbmRlZFN0cnVjdDxUMT4pO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHAxID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIGxldCB0YXNrOiBUYXNrPFQxPiA9IHAxO1xyXG4gICAgICAgICAgICAgICAgdGFzayh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHAyID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIGxldCB0YXNrOiBUYXNrPFQxPiA9IHAyO1xyXG4gICAgICAgICAgICAgICAgdGFzayh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF92YWxpZDxUMSBleHRlbmRzIHN0cmluZz4odW5rbm93bjogdW5rbm93bik6IHVua25vd24gaXMgQnJhbmRlZFN0cnVjdDxUMT47XHJcbiAgICAgICAgZnVuY3Rpb24gX3ZhbGlkPFQxIGV4dGVuZHMgc3RyaW5nPih1bmtub3duOiB1bmtub3duLCBicmFuZDogVDEpOiB1bmtub3duIGlzIEJyYW5kZWRTdHJ1Y3Q8VDE+O1xyXG4gICAgICAgIGZ1bmN0aW9uIF92YWxpZDxUMSBleHRlbmRzIHN0cmluZz4oXHJcbiAgICAgICAgICAgIHAwOiB1bmtub3duLFxyXG4gICAgICAgICAgICBwMT86IFQxXHJcbiAgICAgICAgKTogcDAgaXMgQnJhbmRlZFN0cnVjdDxUMT4ge1xyXG4gICAgICAgICAgICBsZXQgdW5rbm93bjogdW5rbm93biA9IHAwO1xyXG4gICAgICAgICAgICBpZiAoIShcclxuICAgICAgICAgICAgICAgIHVua25vd24gIT09IG51bGxcclxuICAgICAgICAgICAgICAgICYmIHVua25vd24gIT09IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgJiYgdHlwZW9mIHVua25vd24gPT09IFwib2JqZWN0XCJcclxuICAgICAgICAgICAgICAgICYmIFwidHlwZVwiIGluIHVua25vd25cclxuICAgICAgICAgICAgICAgICYmIHR5cGVvZiB1bmtub3duLnR5cGUgPT09IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAocDEgJiYgdW5rbm93bi50eXBlICE9PSBwMSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9KSgpO1xyXG59IiwgImltcG9ydCB0eXBlIHsgQ2xvc3VyZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5cclxuLyoqXHJcbiAqICoqKkJyaWVmKioqXHJcbiAqIFV0aWxpdHkgdHlwZSBmb3IgY3JlYXRpbmcgYnJhbmRlZCB0eXBlcyB3aXRoIGEgdW5pcXVlIHN0cmluZyBsaXRlcmFsIGlkZW50aWZpZXIgYFQxYC5cclxuICogXHJcbiAqICoqKkV4YW1wbGUqKipcclxuICogYGBgdHNcclxuICogIHR5cGUgRm9vID0gXHJcbiAqICAgICAgJiBCcmFuZGVkPFwiRm9vXCI+XHJcbiAqICAgICAgJiB7XHJcbiAqICAgICAgZm9vKCk6IHZvaWQ7XHJcbiAqICB9O1xyXG4gKiBcclxuICogIHR5cGUgQmFyID1cclxuICogICAgICAmIEJyYW5kZWQ8XCJCYXJcIj5cclxuICogICAgICAmIHtcclxuICogICAgICBmb28oKTogdm9pZDtcclxuICogIH07XHJcbiAqIFxyXG4gKiAgbGV0IHVuaW9uOiBGb28gfCBCYXI7XHJcbiAqICBpZiAodW5pb24udHlwZSgpID09PSBcIkZvb1wiKSB7XHJcbiAqICAgICAgLy8vIC4uLlxyXG4gKiAgfVxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCB0eXBlIEJyYW5kZWQ8VDEgZXh0ZW5kcyBzdHJpbmc+ID0ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIFR5cGUtbGV2ZWwgbWFya2VyIG1ldGhvZCBzcGVjaWZ5aW5nIHRoZSB1bmlxdWUgdHlwZSBpZGVudGlmaWVyIGBUMWAuXHJcbiAgICAgKlxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICB0eXBlIEZvbyA9IFxyXG4gICAgICogICAgICAmIEJyYW5kZWQ8XCJGb29cIj5cclxuICAgICAqICAgICAgJiB7XHJcbiAgICAgKiAgICAgIGZvbygpOiB2b2lkO1xyXG4gICAgICogIH07XHJcbiAgICAgKiBcclxuICAgICAqICB0eXBlIEJhciA9XHJcbiAgICAgKiAgICAgICYgQnJhbmRlZDxcIkJhclwiPlxyXG4gICAgICogICAgICAmIHtcclxuICAgICAqICAgICAgZm9vKCk6IHZvaWQ7XHJcbiAgICAgKiAgfTtcclxuICAgICAqIFxyXG4gICAgICogIGxldCB1bmlvbjogRm9vIHwgQmFyO1xyXG4gICAgICogIGlmICh1bmlvbi50eXBlKCkgPT09IFwiRm9vXCIpIHtcclxuICAgICAqICAgICAgLy8vIC4uLlxyXG4gICAgICogIH1cclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICB0eXBlKCk6IFQxO1xyXG59O1xyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBCcmFuZGVkIHtcclxuICAgIGV4cG9ydCB0eXBlIFRhc2s8VDEgZXh0ZW5kcyBzdHJpbmc+ID0gQ2xvc3VyZTxbdmFsdWU6IEJyYW5kZWQ8VDE+XSwgdm9pZD47XHJcblxyXG4gICAgZXhwb3J0IHR5cGUgSGFuZGxlciA9IHtcclxuICAgICAgICBtYXRjaDxUMSBleHRlbmRzIHN0cmluZyA9IGFueT4odW5rbm93bjogdW5rbm93bik6IHVua25vd24gaXMgQnJhbmRlZDxUMT47XHJcbiAgICAgICAgbWF0Y2g8VDEgZXh0ZW5kcyBzdHJpbmcgPSBhbnk+KHVua25vd246IHVua25vd24sIHRhc2s6IFRhc2s8VDE+KTogdW5rbm93biBpcyBCcmFuZGVkPFQxPjtcclxuICAgICAgICBtYXRjaDxUMSBleHRlbmRzIHN0cmluZz4odW5rbm93bjogdW5rbm93biwgYnJhbmQ6IFQxKTogdW5rbm93biBpcyBCcmFuZGVkPFQxPjtcclxuICAgICAgICBtYXRjaDxUMSBleHRlbmRzIHN0cmluZz4odW5rbm93bjogdW5rbm93biwgYnJhbmQ6IFQxLCB0YXNrOiBUYXNrPFQxPik6IHVua25vd24gaXMgQnJhbmRlZDxUMT47XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydCBjb25zdCBIYW5kbGVyOiBIYW5kbGVyID0gKCgpID0+IHtcclxuICAgICAgICAvKiogQGNvbnN0cnVjdG9yICovIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgbWF0Y2ggfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG1hdGNoPFQxIGV4dGVuZHMgc3RyaW5nID0gYW55Pih1bmtub3duOiB1bmtub3duKTogdW5rbm93biBpcyBCcmFuZGVkPFQxPjtcclxuICAgICAgICBmdW5jdGlvbiBtYXRjaDxUMSBleHRlbmRzIHN0cmluZyA9IGFueT4odW5rbm93bjogdW5rbm93biwgdGFzazogVGFzazxUMT4pOiB1bmtub3duIGlzIEJyYW5kZWQ8VDE+O1xyXG4gICAgICAgIGZ1bmN0aW9uIG1hdGNoPFQxIGV4dGVuZHMgc3RyaW5nPih1bmtub3duOiB1bmtub3duLCBicmFuZDogVDEpOiB1bmtub3duIGlzIEJyYW5kZWQ8VDE+O1xyXG4gICAgICAgIGZ1bmN0aW9uIG1hdGNoPFQxIGV4dGVuZHMgc3RyaW5nPih1bmtub3duOiB1bmtub3duLCBicmFuZDogVDEsIHRhc2s6IFRhc2s8VDE+KTogdW5rbm93biBpcyBCcmFuZGVkPFQxPjtcclxuICAgICAgICBmdW5jdGlvbiBtYXRjaDxUMSBleHRlbmRzIHN0cmluZz4oXHJcbiAgICAgICAgICAgIHAwOiB1bmtub3duLFxyXG4gICAgICAgICAgICBwMT86IFRhc2s8VDE+IHwgVDEsXHJcbiAgICAgICAgICAgIHAyPzogVGFzazxUMT5cclxuICAgICAgICApOiBwMCBpcyBCcmFuZGVkPFQxPiB7XHJcbiAgICAgICAgICAgIGxldCB1bmtub3duOiB1bmtub3duID0gcDA7XHJcbiAgICAgICAgICAgIGlmICghX3ZhbGlkKHVua25vd24pKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcDEgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIGxldCBicmFuZDogVDEgPSBwMTtcclxuICAgICAgICAgICAgICAgIGlmICghX3ZhbGlkKHVua25vd24sIGJyYW5kKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZTogQnJhbmRlZDxUMT4gPSAodW5rbm93biBhcyBCcmFuZGVkPFQxPik7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcDEgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRhc2s6IFRhc2s8VDE+ID0gcDE7XHJcbiAgICAgICAgICAgICAgICB0YXNrKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcDIgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRhc2s6IFRhc2s8VDE+ID0gcDI7XHJcbiAgICAgICAgICAgICAgICB0YXNrKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX3ZhbGlkPFQxIGV4dGVuZHMgc3RyaW5nPih1bmtub3duOiB1bmtub3duKTogdW5rbm93biBpcyBCcmFuZGVkPFQxPjtcclxuICAgICAgICBmdW5jdGlvbiBfdmFsaWQ8VDEgZXh0ZW5kcyBzdHJpbmc+KHVua25vd246IHVua25vd24sIGJyYW5kOiBUMSk6IHVua25vd24gaXMgQnJhbmRlZDxUMT47XHJcbiAgICAgICAgZnVuY3Rpb24gX3ZhbGlkPFQxIGV4dGVuZHMgc3RyaW5nPihcclxuICAgICAgICAgICAgcDA6IHVua25vd24sXHJcbiAgICAgICAgICAgIHAxPzogVDFcclxuICAgICAgICApOiBwMCBpcyBCcmFuZGVkPFQxPiB7XHJcbiAgICAgICAgICAgIGxldCB1bmtub3duOiB1bmtub3duID0gcDA7XHJcbiAgICAgICAgICAgIGlmICghKFxyXG4gICAgICAgICAgICAgICAgdW5rbm93biAhPT0gbnVsbFxyXG4gICAgICAgICAgICAgICAgJiYgdW5rbm93biAhPT0gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgICAgICAmJiB0eXBlb2YgdW5rbm93biA9PT0gXCJvYmplY3RcIlxyXG4gICAgICAgICAgICAgICAgJiYgXCJ0eXBlXCIgaW4gdW5rbm93blxyXG4gICAgICAgICAgICAgICAgJiYgdHlwZW9mIHVua25vd24udHlwZSA9PT0gXCJmdW5jdGlvblwiXHJcbiAgICAgICAgICAgICAgICAmJiB0eXBlb2YgdW5rbm93bi50eXBlKCkgPT09IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAocDEgJiYgdW5rbm93bi50eXBlKCkgIT09IHAxKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH0pKCk7XHJcbn0iLCAiaW1wb3J0IHR5cGUgeyBDbG9zdXJlIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB0eXBlIHsgV3JhcHBlciB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBJTlRFUk5BTF9FUlJPUl9NRVNTQUdFIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IE9wdGlvbiB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBTb21lIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IE5vbmUgfSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcbmV4cG9ydCB0eXBlIER5bjxUMT4gPSBBbGxvYzxUMT4gfCBEZUFsbG9jPFQxPjtcclxuXHJcbi8qKlxyXG4gKiAqKipCcmllZioqKlxyXG4gKiBBIGR5bmFtaWMgcmVzb3VyY2UgbWFuYWdlbWVudCBwYXR0ZXJuLCBhbGxvd2luZyBmb3JcclxuICogYWxsb2NhdGlvbiBhbmQgZGVhbGxvY2F0aW9uIG9mIHJlc291cmNlcyB3aXRoIHByb3BlciBsaWZlY3ljbGUgaGFuZGxpbmcuXHJcbiAqIFxyXG4gKiAqKipXYXJuaW5nKioqXHJcbiAqIFRoZSBgRHluYCB3cmFwcGVyIG11c3QgYmUgcHJvcGVybHkgbWFuYWdlZCB0byBhdm9pZCBtZW1vcnkgbGVha3MuIElmIHRoZSB3cmFwcGVyIGl0c2VsZiBpcyBnYXJiYWdlIGNvbGxlY3RlZCBcclxuICogd2l0aG91dCBpdHMgY29udGVudCBiZWluZyBleHBsaWNpdGx5IGRlYWxsb2NhdGVkLCB0aGUgcmVzb3VyY2VzIGl0IG1hbmFnZXMgd2lsbCBub3QgYmUgcmVjeWNsZWQgXHJcbiAqIGFuZCBtYWRlIGF2YWlsYWJsZSBmb3IgcmV1c2UuIEVuc3VyZSBhbGwgYWxsb2NhdGVkIHJlc291cmNlcyBhcmUgZGVhbGxvY2F0ZWQgYmVmb3JlIHRoZSBgRHluYCBpbnN0YW5jZSBnb2VzIG91dCBvZiBzY29wZS5cclxuICogXHJcbiAqICoqKkV4YW1wbGUqKipcclxuICogYGBgdHNcclxuICogIHR5cGUgQ2FyID0ge1xyXG4gKiAgICAgIGRyaXZlKCk6IHZvaWQ7XHJcbiAqICB9O1xyXG4gKiBcclxuICogIGNvbnN0IENhcjogRHluQ29uc3RydWN0b3I8Q2FyLCBbX21vZGVsOiBzdHJpbmddPiA9IER5bihcclxuICogICAgICAoX21vZGVsOiBzdHJpbmcpID0+IHtcclxuICogICAgICAgICAgY29uc3RydWN0b3Ige1xyXG4gKiAgICAgICAgICAgICAgcmV0dXJuIHsgZHJpdmUgfTtcclxuICogICAgICAgICAgfVxyXG4gKiBcclxuICogICAgICAgICAgZnVuY3Rpb24gZHJpdmUoKTogdm9pZCB7XHJcbiAqICAgICAgICAgICAgICByZXR1cm4gXCJWcm9vbS5cIjtcclxuICogICAgICAgICAgfVxyXG4gKiAgICAgIH0sXHJcbiAqICAgICAgY2FyID0+IHtcclxuICogICAgICAgICAgLy8vIFJlc2V0IGNhciBvciBhbnkgdGFza3MgYmVmb3JlIGl0IGlzIG1hZGUgYXZhaWxhYmxlIGFnYWluLlxyXG4gKiAgICAgICAgICAvLy8gLi4uXHJcbiAqICAgICAgICAgIHJldHVybiBjYXI7XHJcbiAqICAgICAgfSwgMzJuLCBcIk1vZGVsVFwiXHJcbiAqICApO1xyXG4gKiBcclxuICogIGxldCBjYXI6IER5bjxDYXI+ID0gQ2FyKFwiTW9kZWxGXCIpO1xyXG4gKiAgY2FyID0gY2FyLmRlQWxsb2MoKTtcclxuICogIGNhci5tYXAoY2FyID0+IHtcclxuICogICAgICAvLy8gV2lsbCBub3QgcnVuIGJlY2F1c2UgYGNhcmAgaGFzIGJlZW4gZGVhbGxvY2F0ZWQuXHJcbiAqICAgICAgLy8vIC4uLlxyXG4gKiAgfSk7XHJcbiAqIGBgYFxyXG4gKiBcclxuICogKioqRXhhbXBsZSoqKlxyXG4gKiBgYGB0c1xyXG4gKiAgLy8vIFdhcm5pbmcuXHJcbiAqICBsZXQgY2FyOiBEeW48Q2FyPiA9IENhcihcIk1vZGVsQlwiKTtcclxuICogIGNhci5kZUFsbG9jKCk7XHJcbiAqICBjYXIubWFwKGNhciA9PiB7XHJcbiAqICAgICAgLy8vIFdpbGwgcnVuIGJlY2F1c2UgdGhlIGNhciBtdXN0IGJlIHVwZGF0ZWQgdG8gdGhlIG5ldyBzdGF0ZS5cclxuICogICAgICAvLy8gQWx3YXlzIGFzc2lnbiB0aGUgYGRlQWxsb2NgIHJlc3VsdCBhIG5ldyBgRHluYCB3cmFwcGVyIG9yXHJcbiAqICAgICAgLy8vIGl0c2VsZi5cclxuICogICAgICAvLy8gLi4uXHJcbiAqICB9KTtcclxuICogYGBgXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gRHluPFQxLCBUMiBleHRlbmRzIEFycmF5PHVua25vd24+PihfY29uc3RydWN0b3I6IENsb3N1cmU8VDIsIFQxPiwgX29uRGVBbGxvYzogQ2xvc3VyZTxbVDFdLCBUMT4sIF9sb2FkOiBiaWdpbnQsIC4uLl9vbkxvYWRQYXlsb2FkOiBUMik6IER5bi5Db25zdHJ1Y3RvcjxUMSwgVDI+IHtcclxuICAgIGxldCBfYXZhaWxhYmxlOiBNYXA8YmlnaW50LCBUMT47XHJcbiAgICBsZXQgX2NvdW50OiBiaWdpbnQ7XHJcblxyXG4gICAgLyoqIEBjb25zdHJ1Y3RvciAqLyB7XHJcbiAgICAgICAgX2F2YWlsYWJsZSA9IG5ldyBNYXAoKTtcclxuICAgICAgICBfY291bnQgPSAwbjtcclxuICAgICAgICBsZXQgaTogYmlnaW50ID0gMG47XHJcbiAgICAgICAgd2hpbGUgKGkgPCBfbG9hZCkge1xyXG4gICAgICAgICAgICBsZXQga2V5OiBiaWdpbnQgPSBfbmV3S2V5KCk7XHJcbiAgICAgICAgICAgIF9hdmFpbGFibGUuc2V0KGtleSwgX2NvbnN0cnVjdG9yKC4uLl9vbkxvYWRQYXlsb2FkKSk7XHJcbiAgICAgICAgICAgIGkgKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoLi4ucGF5bG9hZDogVDIpOiBEeW48VDE+IHtcclxuICAgICAgICAgICAgbGV0IF9rZXk6IE9wdGlvbjxiaWdpbnQ+O1xyXG4gICAgICAgICAgICBsZXQgX3RoaXM6IER5bjxUMT47XHJcbiAgICBcclxuICAgICAgICAgICAgLyoqIEBjb25zdHJ1Y3RvciAqLyB7XHJcbiAgICAgICAgICAgICAgICBfa2V5ID0gTm9uZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcyA9IGFsbG9jKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGFsbG9jKCk6IEFsbG9jPFQxPiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX3JlY3ljbGVkS2V5KClcclxuICAgICAgICAgICAgICAgICAgICAudG9SZXN1bHQodW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoa2V5ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2tleSA9IFNvbWUoa2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEFsbG9jKF9yZWN5bGVkKGtleSksIHsgZGVBbGxvYyB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZWNvdmVyKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2tleSA9IFNvbWUoX25ld0tleSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEFsbG9jKF9jb25zdHJ1Y3RvciguLi5wYXlsb2FkKSwgeyBkZUFsbG9jIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLnVud3JhcCgpOyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAgICAgZnVuY3Rpb24gZGVBbGxvYygpOiBEZUFsbG9jPFQxPiB7XHJcbiAgICAgICAgICAgICAgICBfa2V5XHJcbiAgICAgICAgICAgICAgICAgICAgLnRvUmVzdWx0KHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICAubWFwKGtleSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vLyBJZiB0aGUga2V5IGlzIGF2YWlsYWJsZSB0aGVuIGl0IGlzIGFsbG9jYXRlZC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2tleSA9IE5vbmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZWN5bGUoa2V5LCBfb25EZUFsbG9jKF90aGlzLmV4cGVjdChcIkR5bjogQ291bGQgbm90IGRlYWxsb2NhdGUgcmVzb3VyY2UgYnV0IHRoZSBrZXkgd2FzIGF2YWlsYWJsZS5cIiArIElOVEVSTkFMX0VSUk9SX01FU1NBR0UpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcyA9IERlQWxsb2MoeyBkZUFsbG9jIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfbmV3S2V5KCk6IGJpZ2ludCB7XHJcbiAgICAgICAgcmV0dXJuIF9jb3VudCArPSAxbjtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfcmVjeWNsZWRLZXkoKTogT3B0aW9uPGJpZ2ludD4ge1xyXG4gICAgICAgIGxldCBrZXk6IGJpZ2ludCB8IHVuZGVmaW5lZCA9IF9hdmFpbGFibGVcclxuICAgICAgICAgICAgLmtleXMoKVxyXG4gICAgICAgICAgICAudG9BcnJheSgpXHJcbiAgICAgICAgICAgIC5hdCgwKTtcclxuICAgICAgICBpZiAoIWtleSkgcmV0dXJuIE5vbmU7XHJcbiAgICAgICAgcmV0dXJuIFNvbWUoa2V5KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfcmVjeWxlZChrZXk6IGJpZ2ludCk6IFQxIHtcclxuICAgICAgICBsZXQgdmFsdWU6IFQxID0gX2F2YWlsYWJsZS5nZXQoa2V5KSE7XHJcbiAgICAgICAgX2F2YWlsYWJsZS5kZWxldGUoa2V5KTtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX3JlY3lsZShrZXk6IGJpZ2ludCwgdmFsdWU6IFQxKTogdm9pZCB7XHJcbiAgICAgICAgX2F2YWlsYWJsZS5zZXQoa2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgbmFtZXNwYWNlIER5biB7XHJcbiAgICBleHBvcnQgdHlwZSBDb25zdHJ1Y3RvcjxUMSwgVDIgZXh0ZW5kcyBBcnJheTx1bmtub3duPj4gPSBDbG9zdXJlPFQyLCBEeW48VDE+PjtcclxuXHJcbiAgICBleHBvcnQgdHlwZSBXcmFwcGVyPFQxPiA9IHtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogKioqQnJpZWYqKipcclxuICAgICAgICAgKiBEZWFsbG9jYXRlcyBhIHJlc291cmNlLCBtYWtpbmcgaXQgYXZhaWxhYmxlIGZvciByZWN5Y2xpbmcuXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICAgICAqIGBgYHRzXHJcbiAgICAgICAgICogIGxldCBwZXJzb25EOiBEeW48eyBuYW1lOiBzdHJpbmcgfT47XHJcbiAgICAgICAgICogIHBlcnNvbkRcclxuICAgICAgICAgKiAgICAgIC5kZUFsbG9jKClcclxuICAgICAgICAgKiAgICAgIC5tYXAocGVyc29uID0+IHtcclxuICAgICAgICAgKiAgICAgICAgICAvLy8gTm90IHJ1biBiZWNhdXNlIGBwZXJzb25gIHdhcyBkZWFsbG9jYXRlZC5cclxuICAgICAgICAgKiAgICAgICAgICAvLy8gLi4uXHJcbiAgICAgICAgICogICAgICB9KTtcclxuICAgICAgICAgKiBgYGBcclxuICAgICAgICAgKi9cclxuICAgICAgICBkZUFsbG9jKCk6IERlQWxsb2M8VDE+O1xyXG4gICAgfTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCB0eXBlIEFsbG9jPFQxPiA9XHJcbiAgICAmIER5bi5XcmFwcGVyPFQxPlxyXG4gICAgJiBTb21lPFQxPlxyXG4gICAgJiBXcmFwcGVyPFQxPjtcclxuICAgIFxyXG5leHBvcnQgZnVuY3Rpb24gQWxsb2M8VDE+KF92YWx1ZTogVDEsIF9keW46IER5bi5XcmFwcGVyPFQxPik6IEFsbG9jPFQxPiB7XHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHsgLi4uIFNvbWUoX3ZhbHVlKSwgLi4uIF9keW4gfTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCB0eXBlIERlQWxsb2M8VDE+ID0gXHJcbiAgICAmIE5vbmVcclxuICAgICYgRHluLldyYXBwZXI8VDE+O1xyXG5cclxuLyoqXHJcbiAqICoqKkJyaWVmKioqXHJcbiAqIFRoZSBkZWFsbG9jYXRlZCBzdGF0ZSBvZiBhbiBhbGxvY2F0ZWQgcmVzb3VyY2UuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gRGVBbGxvYzxUMT4oX2R5bjogRHluLldyYXBwZXI8VDE+KTogRGVBbGxvYzxUMT4ge1xyXG4gICAge1xyXG4gICAgICAgIHJldHVybiB7IC4uLiBOb25lLCAuLi4gX2R5biB9O1xyXG4gICAgfVxyXG59IiwgImltcG9ydCB7IElOVEVSTkFMX0VSUk9SX01FU1NBR0UgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgRnB2IH0gZnJvbSBcIkByb290XCI7XHJcblxyXG5leHBvcnQgdHlwZSBWZWM8VDEgZXh0ZW5kcyBGcHYuRGVjaW1hbHM+ID0ge1xyXG4gICAgZGVjaW1hbHMoKTogVDE7XHJcbiAgICB4KCk6IEZwdjxUMT47XHJcbiAgICB5KCk6IEZwdjxUMT47XHJcbiAgICBkaXN0YW5jZUZyb20ob3JpZ2luOiBWZWM8VDE+KTogRnB2LlJlc3VsdDxGcHY8VDE+PjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBWZWM8VDEgZXh0ZW5kcyBGcHYuRGVjaW1hbHMsIFQyIGV4dGVuZHMgVDEgPSBUMT4oX3g6IEZwdi5Db21wYXRpYmxlPFQxPiwgX3k6IEZwdi5Db21wYXRpYmxlPFQyPiwgX2RlY2ltYWxzOiBUMSk6IFZlYzxUMT4ge1xyXG4gICAgLyoqKi8ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGRlY2ltYWxzLFxyXG4gICAgICAgICAgICB4LFxyXG4gICAgICAgICAgICB5LFxyXG4gICAgICAgICAgICBkaXN0YW5jZUZyb21cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRlY2ltYWxzKCk6IFQxIHtcclxuICAgICAgICByZXR1cm4gX2RlY2ltYWxzO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHgoKTogRnB2PFQxPiB7XHJcbiAgICAgICAgcmV0dXJuIEZwdihGcHYuQ2FsY3VsYXRvci51bndyYXAoX3gpLCBkZWNpbWFscygpKS5leHBlY3QoSU5URVJOQUxfRVJST1JfTUVTU0FHRSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24geSgpOiBGcHY8VDE+IHtcclxuICAgICAgICByZXR1cm4gRnB2KEZwdi5DYWxjdWxhdG9yLnVud3JhcChfeSksIGRlY2ltYWxzKCkpLmV4cGVjdChJTlRFUk5BTF9FUlJPUl9NRVNTQUdFKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkaXN0YW5jZUZyb20ob3JpZ2luOiBWZWM8VDE+KTogRnB2LlJlc3VsdDxGcHY8VDE+PiB7XHJcbiAgICAgICAgbGV0IGR4OiBGcHY8VDE+ID0gb3JpZ2luLngoKS5zdWIoeCgpKTtcclxuICAgICAgICBsZXQgZHk6IEZwdjxUMT4gPSBvcmlnaW4ueSgpLnN1Yih5KCkpO1xyXG4gICAgICAgIHJldHVybiBkeFxyXG4gICAgICAgICAgICAubXVsKGR4KVxyXG4gICAgICAgICAgICAuYWRkKGR5Lm11bChkeSkpXHJcbiAgICAgICAgICAgIC5zcXJ0KCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgVmVjIHt9IiwgImltcG9ydCB7IHR5cGUgUmVzdWx0IH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IHR5cGUgV3JhcHBlciB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBJTlRFUk5BTF9FUlJPUl9NRVNTQUdFIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IEVyciB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBPayB9IGZyb20gXCJAcm9vdFwiO1xyXG5cclxudHlwZSBSZXN1bHQkMDxUMSwgVDI+ID0gUmVzdWx0PFQxLCBUMj47XHJcblxyXG5leHBvcnQgdHlwZSBGcHY8VDEgZXh0ZW5kcyBGcHYuRGVjaW1hbHM+ID0gXHJcbiAgICAmIFdyYXBwZXI8YmlnaW50PlxyXG4gICAgJiB7XHJcbiAgICBkZWNpbWFscygpOiBUMTtcclxuICAgIHJlcHJlc2VudGF0aW9uKCk6IGJpZ2ludDtcclxuICAgIGVxKHg6IGJpZ2ludCk6IGJvb2xlYW47XHJcbiAgICBlcSh4OiBGcHY8VDE+KTogYm9vbGVhbjtcclxuICAgIGVxKHg6IEZwdi5Db21wYXRpYmxlPFQxPik6IGJvb2xlYW47XHJcbiAgICBsdCh4OiBiaWdpbnQpOiBib29sZWFuO1xyXG4gICAgbHQoeDogRnB2PFQxPik6IGJvb2xlYW47XHJcbiAgICBsdCh4OiBGcHYuQ29tcGF0aWJsZTxUMT4pOiBib29sZWFuO1xyXG4gICAgZ3QoeDogYmlnaW50KTogYm9vbGVhbjtcclxuICAgIGd0KHg6IEZwdjxUMT4pOiBib29sZWFuO1xyXG4gICAgZ3QoeDogRnB2LkNvbXBhdGlibGU8VDE+KTogYm9vbGVhbjtcclxuICAgIGx0ZXEoeDogYmlnaW50KTogYm9vbGVhbjtcclxuICAgIGx0ZXEoeDogRnB2PFQxPik6IGJvb2xlYW47XHJcbiAgICBsdGVxKHg6IEZwdi5Db21wYXRpYmxlPFQxPik6IGJvb2xlYW47XHJcbiAgICBndGVxKHg6IGJpZ2ludCk6IGJvb2xlYW47XHJcbiAgICBndGVxKHg6IEZwdjxUMT4pOiBib29sZWFuO1xyXG4gICAgZ3RlcSh4OiBGcHYuQ29tcGF0aWJsZTxUMT4pOiBib29sZWFuO1xyXG4gICAgYWRkKHg6IGJpZ2ludCk6IEZwdjxUMT47XHJcbiAgICBhZGQoeDogRnB2PFQxPik6IEZwdjxUMT47XHJcbiAgICBhZGQoeDogRnB2LkNvbXBhdGlibGU8VDE+KTogRnB2PFQxPjtcclxuICAgIHN1Yih4OiBiaWdpbnQpOiBGcHY8VDE+O1xyXG4gICAgc3ViKHg6IEZwdjxUMT4pOiBGcHY8VDE+O1xyXG4gICAgc3ViKHg6IEZwdi5Db21wYXRpYmxlPFQxPik6IEZwdjxUMT47XHJcbiAgICBtdWwoeDogYmlnaW50KTogRnB2PFQxPjtcclxuICAgIG11bCh4OiBGcHY8VDE+KTogRnB2PFQxPjtcclxuICAgIG11bCh4OiBGcHYuQ29tcGF0aWJsZTxUMT4pOiBGcHY8VDE+O1xyXG4gICAgZGl2KHg6IGJpZ2ludCk6IEZwdi5SZXN1bHQ8RnB2PFQxPj47XHJcbiAgICBkaXYoeDogRnB2PFQxPik6IEZwdi5SZXN1bHQ8RnB2PFQxPj47XHJcbiAgICBkaXYoeDogRnB2LkNvbXBhdGlibGU8VDE+KTogRnB2LlJlc3VsdDxGcHY8VDE+PjtcclxuICAgIHBvdyh4OiBiaWdpbnQpOiBGcHYuUmVzdWx0PEZwdjxUMT4+O1xyXG4gICAgcG93KHg6IEZwdjxUMT4pOiBGcHYuUmVzdWx0PEZwdjxUMT4+O1xyXG4gICAgcG93KHg6IEZwdi5Db21wYXRpYmxlPFQxPik6IEZwdi5SZXN1bHQ8RnB2PFQxPj47XHJcbiAgICBzcXJ0KCk6IEZwdi5SZXN1bHQ8RnB2PFQxPj47XHJcbiAgICBjc3Q8VDIgZXh0ZW5kcyBGcHYuRGVjaW1hbHM+KGRlY2ltYWxzOiBUMik6IEZwdi5SZXN1bHQ8RnB2PFQyPj47XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gRnB2PFQxIGV4dGVuZHMgRnB2LkRlY2ltYWxzPihfdjogRnB2LkNvbXBhdGlibGU8VDE+LCBfZGVjaW1hbHM6IFQxKTogRnB2LlJlc3VsdDxGcHY8VDE+PiB7XHJcbiAgICAvKioqLyB7XHJcbiAgICAgICAgaWYgKGRlY2ltYWxzKCkgPCAwbikgcmV0dXJuIEVycihcIkZQVi5FUlJfTkVHQVRJVkVfREVDSU1BTFNcIik7XHJcbiAgICAgICAgcmV0dXJuIE9rKHtcclxuICAgICAgICAgICAgdW53cmFwLFxyXG4gICAgICAgICAgICBkZWNpbWFscyxcclxuICAgICAgICAgICAgcmVwcmVzZW50YXRpb24sXHJcbiAgICAgICAgICAgIGVxLFxyXG4gICAgICAgICAgICBsdCxcclxuICAgICAgICAgICAgZ3QsXHJcbiAgICAgICAgICAgIGx0ZXEsXHJcbiAgICAgICAgICAgIGd0ZXEsXHJcbiAgICAgICAgICAgIGFkZCxcclxuICAgICAgICAgICAgc3ViLFxyXG4gICAgICAgICAgICBtdWwsXHJcbiAgICAgICAgICAgIGRpdixcclxuICAgICAgICAgICAgcG93LFxyXG4gICAgICAgICAgICBzcXJ0LFxyXG4gICAgICAgICAgICBjc3RcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB1bndyYXAoKTogYmlnaW50IHtcclxuICAgICAgICByZXR1cm4gRnB2LkNhbGN1bGF0b3IudW53cmFwKF92KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkZWNpbWFscygpOiBUMSB7XHJcbiAgICAgICAgcmV0dXJuIF9kZWNpbWFscztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZXByZXNlbnRhdGlvbigpOiBiaWdpbnQge1xyXG4gICAgICAgIHJldHVybiAxMG4gKiogZGVjaW1hbHMoKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBlcSh4OiBiaWdpbnQpOiBib29sZWFuO1xyXG4gICAgZnVuY3Rpb24gZXEoeDogRnB2PFQxPik6IGJvb2xlYW47XHJcbiAgICBmdW5jdGlvbiBlcSh4OiBGcHYuQ29tcGF0aWJsZTxUMT4pOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gRnB2LkNhbGN1bGF0b3IuZXEoX3YsIHgpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGx0KHg6IGJpZ2ludCk6IGJvb2xlYW47XHJcbiAgICBmdW5jdGlvbiBsdCh4OiBGcHY8VDE+KTogYm9vbGVhbjtcclxuICAgIGZ1bmN0aW9uIGx0KHg6IEZwdi5Db21wYXRpYmxlPFQxPik6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBGcHYuQ2FsY3VsYXRvci5sdChfdiwgeCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ3QoeDogYmlnaW50KTogYm9vbGVhbjtcclxuICAgIGZ1bmN0aW9uIGd0KHg6IEZwdjxUMT4pOiBib29sZWFuO1xyXG4gICAgZnVuY3Rpb24gZ3QoeDogRnB2LkNvbXBhdGlibGU8VDE+KTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIEZwdi5DYWxjdWxhdG9yLmd0KF92LCB4KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBsdGVxKHg6IGJpZ2ludCk6IGJvb2xlYW47XHJcbiAgICBmdW5jdGlvbiBsdGVxKHg6IEZwdjxUMT4pOiBib29sZWFuO1xyXG4gICAgZnVuY3Rpb24gbHRlcSh4OiBGcHYuQ29tcGF0aWJsZTxUMT4pOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gRnB2LkNhbGN1bGF0b3IubHRlcShfdiwgeCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ3RlcSh4OiBiaWdpbnQpOiBib29sZWFuO1xyXG4gICAgZnVuY3Rpb24gZ3RlcSh4OiBGcHY8VDE+KTogYm9vbGVhbjtcclxuICAgIGZ1bmN0aW9uIGd0ZXEoeDogRnB2LkNvbXBhdGlibGU8VDE+KTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIEZwdi5DYWxjdWxhdG9yLmd0ZXEoX3YsIHgpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGFkZCh4OiBiaWdpbnQpOiBGcHY8VDE+O1xyXG4gICAgZnVuY3Rpb24gYWRkKHg6IEZwdjxUMT4pOiBGcHY8VDE+O1xyXG4gICAgZnVuY3Rpb24gYWRkKHg6IEZwdi5Db21wYXRpYmxlPFQxPik6IEZwdjxUMT4ge1xyXG4gICAgICAgIHJldHVybiBGcHYuQ2FsY3VsYXRvclxyXG4gICAgICAgICAgICAuYWRkKF92LCB4LCBkZWNpbWFscygpKVxyXG4gICAgICAgICAgICAuZXhwZWN0KElOVEVSTkFMX0VSUk9SX01FU1NBR0UpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHN1Yih4OiBiaWdpbnQpOiBGcHY8VDE+O1xyXG4gICAgZnVuY3Rpb24gc3ViKHg6IEZwdjxUMT4pOiBGcHY8VDE+O1xyXG4gICAgZnVuY3Rpb24gc3ViKHg6IEZwdi5Db21wYXRpYmxlPFQxPik6IEZwdjxUMT4ge1xyXG4gICAgICAgIHJldHVybiBGcHYuQ2FsY3VsYXRvclxyXG4gICAgICAgICAgICAuc3ViKF92LCB4LCBkZWNpbWFscygpKVxyXG4gICAgICAgICAgICAuZXhwZWN0KElOVEVSTkFMX0VSUk9SX01FU1NBR0UpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG11bCh4OiBiaWdpbnQpOiBGcHY8VDE+O1xyXG4gICAgZnVuY3Rpb24gbXVsKHg6IEZwdjxUMT4pOiBGcHY8VDE+O1xyXG4gICAgZnVuY3Rpb24gbXVsKHg6IEZwdi5Db21wYXRpYmxlPFQxPik6IEZwdjxUMT4ge1xyXG4gICAgICAgIHJldHVybiBGcHYuQ2FsY3VsYXRvclxyXG4gICAgICAgICAgICAubXVsKF92LCB4LCBkZWNpbWFscygpKVxyXG4gICAgICAgICAgICAuZXhwZWN0KElOVEVSTkFMX0VSUk9SX01FU1NBR0UpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRpdih4OiBiaWdpbnQpOiBGcHYuUmVzdWx0PEZwdjxUMT4+O1xyXG4gICAgZnVuY3Rpb24gZGl2KHg6IEZwdjxUMT4pOiBGcHYuUmVzdWx0PEZwdjxUMT4+O1xyXG4gICAgZnVuY3Rpb24gZGl2KHg6IEZwdi5Db21wYXRpYmxlPFQxPik6IEZwdi5SZXN1bHQ8RnB2PFQxPj4ge1xyXG4gICAgICAgIHJldHVybiBGcHYuQ2FsY3VsYXRvci5kaXYoX3YsIHgsIGRlY2ltYWxzKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHBvdyh4OiBiaWdpbnQpOiBGcHYuUmVzdWx0PEZwdjxUMT4+O1xyXG4gICAgZnVuY3Rpb24gcG93KHg6IEZwdjxUMT4pOiBGcHYuUmVzdWx0PEZwdjxUMT4+O1xyXG4gICAgZnVuY3Rpb24gcG93KHg6IEZwdi5Db21wYXRpYmxlPFQxPik6IEZwdi5SZXN1bHQ8RnB2PFQxPj4ge1xyXG4gICAgICAgIHJldHVybiBGcHYuQ2FsY3VsYXRvci5wb3coX3YsIHgsIGRlY2ltYWxzKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNxcnQoKTogRnB2LlJlc3VsdDxGcHY8VDE+PiB7XHJcbiAgICAgICAgcmV0dXJuIEZwdi5DYWxjdWxhdG9yLnNxcnQoX3YsIGRlY2ltYWxzKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNzdDxUMiBleHRlbmRzIEZwdi5EZWNpbWFscz4oZGVjaW1hbHMkMDogVDIpOiBGcHYuUmVzdWx0PEZwdjxUMj4+IHtcclxuICAgICAgICByZXR1cm4gRnB2LkNhbGN1bGF0b3IuY3N0KF92LCBkZWNpbWFscygpLCBkZWNpbWFscyQwKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBGcHYge1xyXG4gICAgZXhwb3J0IHR5cGUgUmVzdWx0PFQxPiA9IFJlc3VsdCQwPFQxLCBFcnJvckNvZGU+O1xyXG5cclxuICAgIGV4cG9ydCB0eXBlIEVycm9yQ29kZSA9IFxyXG4gICAgICAgIHwgXCJGUFYuRVJSX0RJVklTSU9OX0JZX1pFUk9cIlxyXG4gICAgICAgIHwgXCJGUFYuRVJSX05FR0FUSVZFX0RFQ0lNQUxTXCJcclxuICAgICAgICB8IFwiRlBWLkVSUl9ORUdBVElWRV9FWFBPTkVOVFwiXHJcbiAgICAgICAgfCBcIkZQVi5FUlJfQ0FOTk9UX1NRVUFSRV9OQUdBVElWRVwiO1xyXG5cclxuICAgIGV4cG9ydCB0eXBlIENvbXBhdGlibGU8VDEgZXh0ZW5kcyBEZWNpbWFscyA9IERlY2ltYWxzPiA9IEZwdjxUMT4gfCBiaWdpbnQ7XHJcblxyXG4gICAgZXhwb3J0IHR5cGUgRGVjaW1hbHMgPSBiaWdpbnQ7XHJcblxyXG4gICAgZXhwb3J0IHR5cGUgQ2FsY3VsYXRvciA9IHtcclxuICAgICAgICB1bndyYXAodmFsdWU6IENvbXBhdGlibGU8RGVjaW1hbHM+KTogYmlnaW50O1xyXG4gICAgICAgIGVxPFQxIGV4dGVuZHMgRGVjaW1hbHM+KHg6IGJpZ2ludCwgeTogYmlnaW50KTogYm9vbGVhbjtcclxuICAgICAgICBlcTxUMSBleHRlbmRzIERlY2ltYWxzPih4OiBGcHY8VDE+LCB5OiBiaWdpbnQpOiBib29sZWFuO1xyXG4gICAgICAgIGVxPFQxIGV4dGVuZHMgRGVjaW1hbHM+KHg6IGJpZ2ludCwgeTogRnB2PFQxPik6IGJvb2xlYW47XHJcbiAgICAgICAgZXE8VDEgZXh0ZW5kcyBEZWNpbWFscywgVDIgZXh0ZW5kcyBUMSA9IFQxPih4OiBGcHY8VDE+LCB5OiBGcHY8VDI+KTogYm9vbGVhbjtcclxuICAgICAgICBlcTxUMSBleHRlbmRzIERlY2ltYWxzLCBUMiBleHRlbmRzIFQxID0gVDE+KHg6IENvbXBhdGlibGU8VDE+LCB5OiBDb21wYXRpYmxlPFQyPik6IGJvb2xlYW47XHJcbiAgICAgICAgbHQ8VDEgZXh0ZW5kcyBEZWNpbWFscz4oeDogYmlnaW50LCB5OiBiaWdpbnQpOiBib29sZWFuO1xyXG4gICAgICAgIGx0PFQxIGV4dGVuZHMgRGVjaW1hbHM+KHg6IEZwdjxUMT4sIHk6IGJpZ2ludCk6IGJvb2xlYW47XHJcbiAgICAgICAgbHQ8VDEgZXh0ZW5kcyBEZWNpbWFscz4oeDogYmlnaW50LCB5OiBGcHY8VDE+KTogYm9vbGVhbjtcclxuICAgICAgICBsdDxUMSBleHRlbmRzIERlY2ltYWxzLCBUMiBleHRlbmRzIFQxID0gVDE+KHg6IEZwdjxUMT4sIHk6IEZwdjxUMj4pOiBib29sZWFuO1xyXG4gICAgICAgIGx0PFQxIGV4dGVuZHMgRGVjaW1hbHMsIFQyIGV4dGVuZHMgVDEgPSBUMT4oeDogQ29tcGF0aWJsZTxUMT4sIHk6IENvbXBhdGlibGU8VDI+KTogYm9vbGVhbjtcclxuICAgICAgICBndDxUMSBleHRlbmRzIERlY2ltYWxzPih4OiBiaWdpbnQsIHk6IGJpZ2ludCk6IGJvb2xlYW47XHJcbiAgICAgICAgZ3Q8VDEgZXh0ZW5kcyBEZWNpbWFscz4oeDogRnB2PFQxPiwgeTogYmlnaW50KTogYm9vbGVhbjtcclxuICAgICAgICBndDxUMSBleHRlbmRzIERlY2ltYWxzPih4OiBiaWdpbnQsIHk6IEZwdjxUMT4pOiBib29sZWFuO1xyXG4gICAgICAgIGd0PFQxIGV4dGVuZHMgRGVjaW1hbHMsIFQyIGV4dGVuZHMgVDEgPSBUMT4oeDogRnB2PFQxPiwgeTogRnB2PFQyPik6IGJvb2xlYW47XHJcbiAgICAgICAgZ3Q8VDEgZXh0ZW5kcyBEZWNpbWFscywgVDIgZXh0ZW5kcyBUMSA9IFQxPih4OiBDb21wYXRpYmxlPFQxPiwgeTogQ29tcGF0aWJsZTxUMj4pOiBib29sZWFuO1xyXG4gICAgICAgIGx0ZXE8VDEgZXh0ZW5kcyBEZWNpbWFscz4oeDogYmlnaW50LCB5OiBiaWdpbnQpOiBib29sZWFuO1xyXG4gICAgICAgIGx0ZXE8VDEgZXh0ZW5kcyBEZWNpbWFscz4oeDogRnB2PFQxPiwgeTogYmlnaW50KTogYm9vbGVhbjtcclxuICAgICAgICBsdGVxPFQxIGV4dGVuZHMgRGVjaW1hbHM+KHg6IGJpZ2ludCwgeTogRnB2PFQxPik6IGJvb2xlYW47XHJcbiAgICAgICAgbHRlcTxUMSBleHRlbmRzIERlY2ltYWxzLCBUMiBleHRlbmRzIFQxID0gVDE+KHg6IEZwdjxUMT4sIHk6IEZwdjxUMT4pOiBib29sZWFuO1xyXG4gICAgICAgIGx0ZXE8VDEgZXh0ZW5kcyBEZWNpbWFscywgVDIgZXh0ZW5kcyBUMSA9IFQxPih4OiBDb21wYXRpYmxlPFQxPiwgeTogQ29tcGF0aWJsZTxUMj4pOiBib29sZWFuO1xyXG4gICAgICAgIGd0ZXE8VDEgZXh0ZW5kcyBEZWNpbWFscz4oeDogYmlnaW50LCB5OiBiaWdpbnQpOiBib29sZWFuO1xyXG4gICAgICAgIGd0ZXE8VDEgZXh0ZW5kcyBEZWNpbWFscz4oeDogRnB2PFQxPiwgeTogYmlnaW50KTogYm9vbGVhbjtcclxuICAgICAgICBndGVxPFQxIGV4dGVuZHMgRGVjaW1hbHM+KHg6IGJpZ2ludCwgeTogRnB2PFQxPik6IGJvb2xlYW47XHJcbiAgICAgICAgZ3RlcTxUMSBleHRlbmRzIERlY2ltYWxzLCBUMiBleHRlbmRzIFQxID0gVDE+KHg6IEZwdjxUMT4sIHk6IEZwdjxUMT4pOiBib29sZWFuO1xyXG4gICAgICAgIGd0ZXE8VDEgZXh0ZW5kcyBEZWNpbWFscywgVDIgZXh0ZW5kcyBUMSA9IFQxPih4OiBDb21wYXRpYmxlPFQxPiwgeTogQ29tcGF0aWJsZTxUMj4pOiBib29sZWFuO1xyXG4gICAgICAgIGFkZDxUMSBleHRlbmRzIERlY2ltYWxzPih4OiBiaWdpbnQsIHk6IGJpZ2ludCwgZGVjaW1hbHM6IFQxKTogUmVzdWx0PEZwdjxUMT4+O1xyXG4gICAgICAgIGFkZDxUMSBleHRlbmRzIERlY2ltYWxzPih4OiBGcHY8VDE+LCB5OiBiaWdpbnQsIGRlY2ltYWxzOiBUMSk6IFJlc3VsdDxGcHY8VDE+PjtcclxuICAgICAgICBhZGQ8VDEgZXh0ZW5kcyBEZWNpbWFscz4oeDogYmlnaW50LCB5OiBGcHY8VDE+LCBkZWNpbWFsczogVDEpOiBSZXN1bHQ8RnB2PFQxPj47XHJcbiAgICAgICAgYWRkPFQxIGV4dGVuZHMgRGVjaW1hbHMsIFQyIGV4dGVuZHMgVDEgPSBUMT4oeDogRnB2PFQxPiwgeTogRnB2PFQyPiwgZGVjaW1hbHM6IFQxKTogUmVzdWx0PEZwdjxUMT4+O1xyXG4gICAgICAgIGFkZDxUMSBleHRlbmRzIERlY2ltYWxzLCBUMiBleHRlbmRzIFQxID0gVDE+KHg6IENvbXBhdGlibGU8VDE+LCB5OiBDb21wYXRpYmxlPFQyPiwgZGVjaW1hbHM6IFQxKTogUmVzdWx0PEZwdjxUMT4+O1xyXG4gICAgICAgIHN1YjxUMSBleHRlbmRzIERlY2ltYWxzPih4OiBiaWdpbnQsIHk6IGJpZ2ludCwgZGVjaW1hbHM6IFQxKTogUmVzdWx0PEZwdjxUMT4+O1xyXG4gICAgICAgIHN1YjxUMSBleHRlbmRzIERlY2ltYWxzPih4OiBGcHY8VDE+LCB5OiBiaWdpbnQsIGRlY2ltYWxzOiBUMSk6IFJlc3VsdDxGcHY8VDE+PjtcclxuICAgICAgICBzdWI8VDEgZXh0ZW5kcyBEZWNpbWFscz4oeDogYmlnaW50LCB5OiBGcHY8VDE+LCBkZWNpbWFsczogVDEpOiBSZXN1bHQ8RnB2PFQxPj47XHJcbiAgICAgICAgc3ViPFQxIGV4dGVuZHMgRGVjaW1hbHMsIFQyIGV4dGVuZHMgVDEgPSBUMT4oeDogRnB2PFQxPiwgeTogRnB2PFQyPiwgZGVjaW1hbHM6IFQxKTogUmVzdWx0PEZwdjxUMT4+O1xyXG4gICAgICAgIHN1YjxUMSBleHRlbmRzIERlY2ltYWxzLCBUMiBleHRlbmRzIFQxID0gVDE+KHg6IENvbXBhdGlibGU8VDE+LCB5OiBDb21wYXRpYmxlPFQyPiwgZGVjaW1hbHM6IFQxKTogUmVzdWx0PEZwdjxUMT4+O1xyXG4gICAgICAgIG11bDxUMSBleHRlbmRzIERlY2ltYWxzPih4OiBiaWdpbnQsIHk6IGJpZ2ludCwgZGVjaW1hbHM6IFQxKTogUmVzdWx0PEZwdjxUMT4+O1xyXG4gICAgICAgIG11bDxUMSBleHRlbmRzIERlY2ltYWxzPih4OiBGcHY8VDE+LCB5OiBiaWdpbnQsIGRlY2ltYWxzOiBUMSk6IFJlc3VsdDxGcHY8VDE+PjtcclxuICAgICAgICBtdWw8VDEgZXh0ZW5kcyBEZWNpbWFscz4oeDogYmlnaW50LCB5OiBGcHY8VDE+LCBkZWNpbWFsczogVDEpOiBSZXN1bHQ8RnB2PFQxPj47XHJcbiAgICAgICAgbXVsPFQxIGV4dGVuZHMgRGVjaW1hbHMsIFQyIGV4dGVuZHMgVDEgPSBUMT4oeDogRnB2PFQxPiwgeTogRnB2PFQyPiwgZGVjaW1hbHM6IFQxKTogUmVzdWx0PEZwdjxUMT4+O1xyXG4gICAgICAgIG11bDxUMSBleHRlbmRzIERlY2ltYWxzLCBUMiBleHRlbmRzIFQxID0gVDE+KHg6IENvbXBhdGlibGU8VDE+LCB5OiBDb21wYXRpYmxlPFQyPiwgZGVjaW1hbHM6IFQxKTogUmVzdWx0PEZwdjxUMT4+O1xyXG4gICAgICAgIGRpdjxUMSBleHRlbmRzIERlY2ltYWxzPih4OiBiaWdpbnQsIHk6IGJpZ2ludCwgZGVjaW1hbHM6IFQxKTogUmVzdWx0PEZwdjxUMT4+O1xyXG4gICAgICAgIGRpdjxUMSBleHRlbmRzIERlY2ltYWxzPih4OiBGcHY8VDE+LCB5OiBiaWdpbnQsIGRlY2ltYWxzOiBUMSk6IFJlc3VsdDxGcHY8VDE+PjtcclxuICAgICAgICBkaXY8VDEgZXh0ZW5kcyBEZWNpbWFscz4oeDogYmlnaW50LCB5OiBGcHY8VDE+LCBkZWNpbWFsczogVDEpOiBSZXN1bHQ8RnB2PFQxPj47XHJcbiAgICAgICAgZGl2PFQxIGV4dGVuZHMgRGVjaW1hbHMsIFQyIGV4dGVuZHMgVDEgPSBUMT4oeDogRnB2PFQxPiwgeTogRnB2PFQyPiwgZGVjaW1hbHM6IFQxKTogUmVzdWx0PEZwdjxUMT4+O1xyXG4gICAgICAgIGRpdjxUMSBleHRlbmRzIERlY2ltYWxzLCBUMiBleHRlbmRzIFQxID0gVDE+KHg6IENvbXBhdGlibGU8VDE+LCB5OiBDb21wYXRpYmxlPFQyPiwgZGVjaW1hbHM6IFQxKTogUmVzdWx0PEZwdjxUMT4+O1xyXG4gICAgICAgIHBvdzxUMSBleHRlbmRzIERlY2ltYWxzPih4OiBiaWdpbnQsIHk6IGJpZ2ludCwgZGVjaW1hbHM6IFQxKTogUmVzdWx0PEZwdjxUMT4+O1xyXG4gICAgICAgIHBvdzxUMSBleHRlbmRzIERlY2ltYWxzPih4OiBGcHY8VDE+LCB5OiBiaWdpbnQsIGRlY2ltYWxzOiBUMSk6IFJlc3VsdDxGcHY8VDE+PjtcclxuICAgICAgICBwb3c8VDEgZXh0ZW5kcyBEZWNpbWFscz4oeDogYmlnaW50LCB5OiBGcHY8VDE+LCBkZWNpbWFsczogVDEpOiBSZXN1bHQ8RnB2PFQxPj47XHJcbiAgICAgICAgcG93PFQxIGV4dGVuZHMgRGVjaW1hbHMsIFQyIGV4dGVuZHMgVDEgPSBUMT4oeDogRnB2PFQxPiwgeTogRnB2PFQyPiwgZGVjaW1hbHM6IFQxKTogUmVzdWx0PEZwdjxUMT4+O1xyXG4gICAgICAgIHBvdzxUMSBleHRlbmRzIERlY2ltYWxzLCBUMiBleHRlbmRzIFQxID0gVDE+KHg6IENvbXBhdGlibGU8VDE+LCB5OiBDb21wYXRpYmxlPFQyPiwgZGVjaW1hbHM6IFQxKTogUmVzdWx0PEZwdjxUMT4+O1xyXG4gICAgICAgIHNxcnQ8VDEgZXh0ZW5kcyBEZWNpbWFscz4oeDogYmlnaW50LCBkZWNpbWFsczogVDEpOiBSZXN1bHQ8RnB2PFQxPj47XHJcbiAgICAgICAgc3FydDxUMSBleHRlbmRzIERlY2ltYWxzPih4OiBGcHY8VDE+LCBkZWNpbWFsczogVDEpOiBSZXN1bHQ8RnB2PFQxPj47XHJcbiAgICAgICAgc3FydDxUMSBleHRlbmRzIERlY2ltYWxzPih4OiBDb21wYXRpYmxlPFQxPiwgZGVjaW1hbHM6IFQxKTogUmVzdWx0PEZwdjxUMT4+OyBcclxuICAgICAgICBjc3Q8VDEgZXh0ZW5kcyBEZWNpbWFscywgVDIgZXh0ZW5kcyBEZWNpbWFscz4oeDogYmlnaW50LCBvbGREZWNpbWFsczogVDEsIG5ld0RlY2ltYWxzOiBUMik6IFJlc3VsdDxGcHY8VDI+PjtcclxuICAgICAgICBjc3Q8VDEgZXh0ZW5kcyBEZWNpbWFscywgVDIgZXh0ZW5kcyBEZWNpbWFscz4oeDogRnB2PFQxPiwgb2xkRGVjaW1hbHM6IFQxLCBuZXdEZWNpbWFsczogVDIpOiBSZXN1bHQ8RnB2PFQyPj47XHJcbiAgICAgICAgY3N0PFQxIGV4dGVuZHMgRGVjaW1hbHMsIFQyIGV4dGVuZHMgRGVjaW1hbHM+KHg6IENvbXBhdGlibGU8VDE+LCBvbGREZWNpbWFsczogVDEsIG5ld0RlY2ltYWxzOiBUMik6IFJlc3VsdDxGcHY8VDI+PjtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0IGNvbnN0IENhbGN1bGF0b3I6IENhbGN1bGF0b3IgPSAoKCkgPT4ge1xyXG4gICAgICAgIC8qKiovIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHVud3JhcCxcclxuICAgICAgICAgICAgICAgIGVxLFxyXG4gICAgICAgICAgICAgICAgbHQsXHJcbiAgICAgICAgICAgICAgICBndCxcclxuICAgICAgICAgICAgICAgIGx0ZXEsXHJcbiAgICAgICAgICAgICAgICBndGVxLFxyXG4gICAgICAgICAgICAgICAgYWRkLFxyXG4gICAgICAgICAgICAgICAgc3ViLFxyXG4gICAgICAgICAgICAgICAgbXVsLFxyXG4gICAgICAgICAgICAgICAgZGl2LFxyXG4gICAgICAgICAgICAgICAgcG93LFxyXG4gICAgICAgICAgICAgICAgc3FydCxcclxuICAgICAgICAgICAgICAgIGNzdFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdW53cmFwKHZhbHVlOiBDb21wYXRpYmxlPERlY2ltYWxzPik6IGJpZ2ludCB7XHJcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiYmlnaW50XCIgPyB2YWx1ZSA6IHZhbHVlLnVud3JhcCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZXE8VDEgZXh0ZW5kcyBEZWNpbWFscz4oeDogYmlnaW50LCB5OiBiaWdpbnQpOiBib29sZWFuO1xyXG4gICAgICAgIGZ1bmN0aW9uIGVxPFQxIGV4dGVuZHMgRGVjaW1hbHM+KHg6IEZwdjxUMT4sIHk6IGJpZ2ludCk6IGJvb2xlYW47XHJcbiAgICAgICAgZnVuY3Rpb24gZXE8VDEgZXh0ZW5kcyBEZWNpbWFscz4oeDogYmlnaW50LCB5OiBGcHY8VDE+KTogYm9vbGVhbjtcclxuICAgICAgICBmdW5jdGlvbiBlcTxUMSBleHRlbmRzIERlY2ltYWxzLCBUMiBleHRlbmRzIFQxID0gVDE+KHg6IEZwdjxUMT4sIHk6IEZwdjxUMj4pOiBib29sZWFuO1xyXG4gICAgICAgIGZ1bmN0aW9uIGVxPFQxIGV4dGVuZHMgRGVjaW1hbHMsIFQyIGV4dGVuZHMgVDEgPSBUMT4oeDogQ29tcGF0aWJsZTxUMT4sIHk6IENvbXBhdGlibGU8VDI+KTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgIHJldHVybiB1bndyYXAoeCkgPT09IHVud3JhcCh5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGx0PFQxIGV4dGVuZHMgRGVjaW1hbHM+KHg6IGJpZ2ludCwgeTogYmlnaW50KTogYm9vbGVhbjtcclxuICAgICAgICBmdW5jdGlvbiBsdDxUMSBleHRlbmRzIERlY2ltYWxzPih4OiBGcHY8VDE+LCB5OiBiaWdpbnQpOiBib29sZWFuO1xyXG4gICAgICAgIGZ1bmN0aW9uIGx0PFQxIGV4dGVuZHMgRGVjaW1hbHM+KHg6IGJpZ2ludCwgeTogRnB2PFQxPik6IGJvb2xlYW47XHJcbiAgICAgICAgZnVuY3Rpb24gbHQ8VDEgZXh0ZW5kcyBEZWNpbWFscywgVDIgZXh0ZW5kcyBUMSA9IFQxPih4OiBGcHY8VDE+LCB5OiBGcHY8VDI+KTogYm9vbGVhbjtcclxuICAgICAgICBmdW5jdGlvbiBsdDxUMSBleHRlbmRzIERlY2ltYWxzLCBUMiBleHRlbmRzIFQxID0gVDE+KHg6IENvbXBhdGlibGU8VDE+LCB5OiBDb21wYXRpYmxlPFQyPik6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdW53cmFwKHgpIDwgdW53cmFwKHkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ3Q8VDEgZXh0ZW5kcyBEZWNpbWFscz4oeDogYmlnaW50LCB5OiBiaWdpbnQpOiBib29sZWFuO1xyXG4gICAgICAgIGZ1bmN0aW9uIGd0PFQxIGV4dGVuZHMgRGVjaW1hbHM+KHg6IEZwdjxUMT4sIHk6IGJpZ2ludCk6IGJvb2xlYW47XHJcbiAgICAgICAgZnVuY3Rpb24gZ3Q8VDEgZXh0ZW5kcyBEZWNpbWFscz4oeDogYmlnaW50LCB5OiBGcHY8VDE+KTogYm9vbGVhbjtcclxuICAgICAgICBmdW5jdGlvbiBndDxUMSBleHRlbmRzIERlY2ltYWxzLCBUMiBleHRlbmRzIFQxID0gVDE+KHg6IEZwdjxUMT4sIHk6IEZwdjxUMj4pOiBib29sZWFuO1xyXG4gICAgICAgIGZ1bmN0aW9uIGd0PFQxIGV4dGVuZHMgRGVjaW1hbHMsIFQyIGV4dGVuZHMgVDEgPSBUMT4oeDogQ29tcGF0aWJsZTxUMT4sIHk6IENvbXBhdGlibGU8VDI+KTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgIHJldHVybiB1bndyYXAoeCkgPiB1bndyYXAoeSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBsdGVxPFQxIGV4dGVuZHMgRGVjaW1hbHM+KHg6IGJpZ2ludCwgeTogYmlnaW50KTogYm9vbGVhbjtcclxuICAgICAgICBmdW5jdGlvbiBsdGVxPFQxIGV4dGVuZHMgRGVjaW1hbHM+KHg6IEZwdjxUMT4sIHk6IGJpZ2ludCk6IGJvb2xlYW47XHJcbiAgICAgICAgZnVuY3Rpb24gbHRlcTxUMSBleHRlbmRzIERlY2ltYWxzPih4OiBiaWdpbnQsIHk6IEZwdjxUMT4pOiBib29sZWFuO1xyXG4gICAgICAgIGZ1bmN0aW9uIGx0ZXE8VDEgZXh0ZW5kcyBEZWNpbWFscywgVDIgZXh0ZW5kcyBUMSA9IFQxPih4OiBGcHY8VDE+LCB5OiBGcHY8VDE+KTogYm9vbGVhbjtcclxuICAgICAgICBmdW5jdGlvbiBsdGVxPFQxIGV4dGVuZHMgRGVjaW1hbHMsIFQyIGV4dGVuZHMgVDEgPSBUMT4oeDogQ29tcGF0aWJsZTxUMT4sIHk6IENvbXBhdGlibGU8VDI+KTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgIHJldHVybiB1bndyYXAoeCkgPD0gdW53cmFwKHkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ3RlcTxUMSBleHRlbmRzIERlY2ltYWxzPih4OiBiaWdpbnQsIHk6IGJpZ2ludCk6IGJvb2xlYW47XHJcbiAgICAgICAgZnVuY3Rpb24gZ3RlcTxUMSBleHRlbmRzIERlY2ltYWxzPih4OiBGcHY8VDE+LCB5OiBiaWdpbnQpOiBib29sZWFuO1xyXG4gICAgICAgIGZ1bmN0aW9uIGd0ZXE8VDEgZXh0ZW5kcyBEZWNpbWFscz4oeDogYmlnaW50LCB5OiBGcHY8VDE+KTogYm9vbGVhbjtcclxuICAgICAgICBmdW5jdGlvbiBndGVxPFQxIGV4dGVuZHMgRGVjaW1hbHMsIFQyIGV4dGVuZHMgVDEgPSBUMT4oeDogRnB2PFQxPiwgeTogRnB2PFQxPik6IGJvb2xlYW47XHJcbiAgICAgICAgZnVuY3Rpb24gZ3RlcTxUMSBleHRlbmRzIERlY2ltYWxzLCBUMiBleHRlbmRzIFQxID0gVDE+KHg6IENvbXBhdGlibGU8VDE+LCB5OiBDb21wYXRpYmxlPFQyPik6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdW53cmFwKHgpID49IHVud3JhcCh5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGFkZDxUMSBleHRlbmRzIERlY2ltYWxzPih4OiBiaWdpbnQsIHk6IGJpZ2ludCwgZGVjaW1hbHM6IFQxKTogUmVzdWx0PEZwdjxUMT4+O1xyXG4gICAgICAgIGZ1bmN0aW9uIGFkZDxUMSBleHRlbmRzIERlY2ltYWxzPih4OiBGcHY8VDE+LCB5OiBiaWdpbnQsIGRlY2ltYWxzOiBUMSk6IFJlc3VsdDxGcHY8VDE+PjtcclxuICAgICAgICBmdW5jdGlvbiBhZGQ8VDEgZXh0ZW5kcyBEZWNpbWFscz4oeDogYmlnaW50LCB5OiBGcHY8VDE+LCBkZWNpbWFsczogVDEpOiBSZXN1bHQ8RnB2PFQxPj47XHJcbiAgICAgICAgZnVuY3Rpb24gYWRkPFQxIGV4dGVuZHMgRGVjaW1hbHMsIFQyIGV4dGVuZHMgVDEgPSBUMT4oeDogRnB2PFQxPiwgeTogRnB2PFQyPiwgZGVjaW1hbHM6IFQxKTogUmVzdWx0PEZwdjxUMT4+O1xyXG4gICAgICAgIGZ1bmN0aW9uIGFkZDxUMSBleHRlbmRzIERlY2ltYWxzLCBUMiBleHRlbmRzIFQxID0gVDE+KHg6IENvbXBhdGlibGU8VDE+LCB5OiBDb21wYXRpYmxlPFQyPiwgZGVjaW1hbHM6IFQxKTogUmVzdWx0PEZwdjxUMT4+IHtcclxuICAgICAgICAgICAgcmV0dXJuIEZwdjxUMT4odW53cmFwKHgpICsgdW53cmFwKHkpLCBkZWNpbWFscyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBzdWI8VDEgZXh0ZW5kcyBEZWNpbWFscz4oeDogYmlnaW50LCB5OiBiaWdpbnQsIGRlY2ltYWxzOiBUMSk6IFJlc3VsdDxGcHY8VDE+PjtcclxuICAgICAgICBmdW5jdGlvbiBzdWI8VDEgZXh0ZW5kcyBEZWNpbWFscz4oeDogRnB2PFQxPiwgeTogYmlnaW50LCBkZWNpbWFsczogVDEpOiBSZXN1bHQ8RnB2PFQxPj47XHJcbiAgICAgICAgZnVuY3Rpb24gc3ViPFQxIGV4dGVuZHMgRGVjaW1hbHM+KHg6IGJpZ2ludCwgeTogRnB2PFQxPiwgZGVjaW1hbHM6IFQxKTogUmVzdWx0PEZwdjxUMT4+O1xyXG4gICAgICAgIGZ1bmN0aW9uIHN1YjxUMSBleHRlbmRzIERlY2ltYWxzLCBUMiBleHRlbmRzIFQxID0gVDE+KHg6IEZwdjxUMT4sIHk6IEZwdjxUMj4sIGRlY2ltYWxzOiBUMSk6IFJlc3VsdDxGcHY8VDE+PjtcclxuICAgICAgICBmdW5jdGlvbiBzdWI8VDEgZXh0ZW5kcyBEZWNpbWFscywgVDIgZXh0ZW5kcyBUMSA9IFQxPih4OiBDb21wYXRpYmxlPFQxPiwgeTogQ29tcGF0aWJsZTxUMj4sIGRlY2ltYWxzOiBUMSk6IFJlc3VsdDxGcHY8VDE+PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBGcHY8VDE+KHVud3JhcCh4KSAtIHVud3JhcCh5KSwgZGVjaW1hbHMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbXVsPFQxIGV4dGVuZHMgRGVjaW1hbHM+KHg6IGJpZ2ludCwgeTogYmlnaW50LCBkZWNpbWFsczogVDEpOiBSZXN1bHQ8RnB2PFQxPj47XHJcbiAgICAgICAgZnVuY3Rpb24gbXVsPFQxIGV4dGVuZHMgRGVjaW1hbHM+KHg6IEZwdjxUMT4sIHk6IGJpZ2ludCwgZGVjaW1hbHM6IFQxKTogUmVzdWx0PEZwdjxUMT4+O1xyXG4gICAgICAgIGZ1bmN0aW9uIG11bDxUMSBleHRlbmRzIERlY2ltYWxzPih4OiBiaWdpbnQsIHk6IEZwdjxUMT4sIGRlY2ltYWxzOiBUMSk6IFJlc3VsdDxGcHY8VDE+PjtcclxuICAgICAgICBmdW5jdGlvbiBtdWw8VDEgZXh0ZW5kcyBEZWNpbWFscywgVDIgZXh0ZW5kcyBUMSA9IFQxPih4OiBGcHY8VDE+LCB5OiBGcHY8VDI+LCBkZWNpbWFsczogVDEpOiBSZXN1bHQ8RnB2PFQxPj47XHJcbiAgICAgICAgZnVuY3Rpb24gbXVsPFQxIGV4dGVuZHMgRGVjaW1hbHMsIFQyIGV4dGVuZHMgVDEgPSBUMT4oeDogQ29tcGF0aWJsZTxUMT4sIHk6IENvbXBhdGlibGU8VDI+LCBkZWNpbWFsczogVDEpOiBSZXN1bHQ8RnB2PFQxPj4ge1xyXG4gICAgICAgICAgICBsZXQgeCQwOiBiaWdpbnQgPSB1bndyYXAoeCk7XHJcbiAgICAgICAgICAgIGxldCB5JDA6IGJpZ2ludCA9IHVud3JhcCh5KTtcclxuICAgICAgICAgICAgbGV0IHo6IGJpZ2ludCA9IHgkMCAqIHkkMDtcclxuICAgICAgICAgICAgaWYgKGRlY2ltYWxzID09PSAwbikgcmV0dXJuIEZwdjxUMT4oeiwgZGVjaW1hbHMpO1xyXG4gICAgICAgICAgICByZXR1cm4gRnB2PFQxPih6IC8gKDEwbiAqKiBkZWNpbWFscyksIGRlY2ltYWxzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGRpdjxUMSBleHRlbmRzIERlY2ltYWxzPih4OiBiaWdpbnQsIHk6IGJpZ2ludCwgZGVjaW1hbHM6IFQxKTogUmVzdWx0PEZwdjxUMT4+O1xyXG4gICAgICAgIGZ1bmN0aW9uIGRpdjxUMSBleHRlbmRzIERlY2ltYWxzPih4OiBGcHY8VDE+LCB5OiBiaWdpbnQsIGRlY2ltYWxzOiBUMSk6IFJlc3VsdDxGcHY8VDE+PjtcclxuICAgICAgICBmdW5jdGlvbiBkaXY8VDEgZXh0ZW5kcyBEZWNpbWFscz4oeDogYmlnaW50LCB5OiBGcHY8VDE+LCBkZWNpbWFsczogVDEpOiBSZXN1bHQ8RnB2PFQxPj47XHJcbiAgICAgICAgZnVuY3Rpb24gZGl2PFQxIGV4dGVuZHMgRGVjaW1hbHMsIFQyIGV4dGVuZHMgVDEgPSBUMT4oeDogRnB2PFQxPiwgeTogRnB2PFQyPiwgZGVjaW1hbHM6IFQxKTogUmVzdWx0PEZwdjxUMT4+O1xyXG4gICAgICAgIGZ1bmN0aW9uIGRpdjxUMSBleHRlbmRzIERlY2ltYWxzLCBUMiBleHRlbmRzIFQxID0gVDE+KHg6IENvbXBhdGlibGU8VDE+LCB5OiBDb21wYXRpYmxlPFQyPiwgZGVjaW1hbHM6IFQxKTogUmVzdWx0PEZwdjxUMT4+IHtcclxuICAgICAgICAgICAgbGV0IHgkMDogYmlnaW50ID0gdW53cmFwKHgpO1xyXG4gICAgICAgICAgICBsZXQgeSQwOiBiaWdpbnQgPSB1bndyYXAoeSk7XHJcbiAgICAgICAgICAgIGlmICh5JDAgPT09IDBuKSByZXR1cm4gRXJyKFwiRlBWLkVSUl9ESVZJU0lPTl9CWV9aRVJPXCIpO1xyXG4gICAgICAgICAgICBpZiAoZGVjaW1hbHMgPT09IDBuKSByZXR1cm4gT2soRnB2KHgkMCAvIHkkMCwgZGVjaW1hbHMpLmV4cGVjdChJTlRFUk5BTF9FUlJPUl9NRVNTQUdFKSk7ICAgIFxyXG4gICAgICAgICAgICBsZXQgejogYmlnaW50ID0geCQwICogKDEwbiAqKiBkZWNpbWFscyk7XHJcbiAgICAgICAgICAgIGxldCBxOiBiaWdpbnQgPSB6IC8geCQwO1xyXG4gICAgICAgICAgICByZXR1cm4gT2soRnB2KHEsIGRlY2ltYWxzKS5leHBlY3QoSU5URVJOQUxfRVJST1JfTUVTU0FHRSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcG93PFQxIGV4dGVuZHMgRGVjaW1hbHM+KHg6IGJpZ2ludCwgeTogYmlnaW50LCBkZWNpbWFsczogVDEpOiBSZXN1bHQ8RnB2PFQxPj47XHJcbiAgICAgICAgZnVuY3Rpb24gcG93PFQxIGV4dGVuZHMgRGVjaW1hbHM+KHg6IEZwdjxUMT4sIHk6IGJpZ2ludCwgZGVjaW1hbHM6IFQxKTogUmVzdWx0PEZwdjxUMT4+O1xyXG4gICAgICAgIGZ1bmN0aW9uIHBvdzxUMSBleHRlbmRzIERlY2ltYWxzPih4OiBiaWdpbnQsIHk6IEZwdjxUMT4sIGRlY2ltYWxzOiBUMSk6IFJlc3VsdDxGcHY8VDE+PjtcclxuICAgICAgICBmdW5jdGlvbiBwb3c8VDEgZXh0ZW5kcyBEZWNpbWFscywgVDIgZXh0ZW5kcyBUMSA9IFQxPih4OiBGcHY8VDE+LCB5OiBGcHY8VDI+LCBkZWNpbWFsczogVDEpOiBSZXN1bHQ8RnB2PFQxPj47XHJcbiAgICAgICAgZnVuY3Rpb24gcG93PFQxIGV4dGVuZHMgRGVjaW1hbHMsIFQyIGV4dGVuZHMgVDEgPSBUMT4oeDogQ29tcGF0aWJsZTxUMT4sIHk6IENvbXBhdGlibGU8VDI+LCBkZWNpbWFsczogVDEpOiBSZXN1bHQ8RnB2PFQxPj4ge1xyXG4gICAgICAgICAgICBsZXQgYmFzZTogYmlnaW50ID0gdW53cmFwKHgpO1xyXG4gICAgICAgICAgICBsZXQgZXhwb25lbnQ6IGJpZ2ludCA9IHVud3JhcCh5KTtcclxuICAgICAgICAgICAgaWYgKGV4cG9uZW50IDwgMG4pIHJldHVybiBFcnIoXCJGUFYuRVJSX05FR0FUSVZFX0VYUE9ORU5UXCIpO1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0OiBiaWdpbnQgPSAxbjtcclxuICAgICAgICAgICAgd2hpbGUgKGV4cG9uZW50ID4gMG4pIHtcclxuICAgICAgICAgICAgICAgIGlmIChleHBvbmVudCAlIDJuID09PSAxbikgcmVzdWx0ID0gKHJlc3VsdCAqIGJhc2UpIC8gKDEwbiAqKiBkZWNpbWFscyk7XHJcbiAgICAgICAgICAgICAgICBiYXNlID0gKGJhc2UgKiBiYXNlKSAvICgxMG4gKiogZGVjaW1hbHMpO1xyXG4gICAgICAgICAgICAgICAgZXhwb25lbnQgLz0gMm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IHJlc3VsdCQwOiBSZXN1bHQ8RnB2PFQxPj4gPSBjc3QocmVzdWx0LCAwbiwgZGVjaW1hbHMpO1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0JDAuZXJyKCkpIHJldHVybiByZXN1bHQkMDtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdCQxOiBGcHY8VDE+ID0gcmVzdWx0JDAudW53cmFwKCk7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQkMjogYmlnaW50ID0gcmVzdWx0JDEudW53cmFwKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBGcHYocmVzdWx0JDIsIGRlY2ltYWxzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNxcnQ8VDEgZXh0ZW5kcyBEZWNpbWFscz4oeDogYmlnaW50LCBkZWNpbWFsczogVDEpOiBSZXN1bHQ8RnB2PFQxPj47XHJcbiAgICAgICAgZnVuY3Rpb24gc3FydDxUMSBleHRlbmRzIERlY2ltYWxzPih4OiBGcHY8VDE+LCBkZWNpbWFsczogVDEpOiBSZXN1bHQ8RnB2PFQxPj47XHJcbiAgICAgICAgZnVuY3Rpb24gc3FydDxUMSBleHRlbmRzIERlY2ltYWxzPih4OiBDb21wYXRpYmxlPFQxPiwgZGVjaW1hbHM6IFQxKTogUmVzdWx0PEZwdjxUMT4+IHtcclxuICAgICAgICAgICAgbGV0IHgkMDogYmlnaW50ID0gdW53cmFwKHgpO1xyXG4gICAgICAgICAgICBpZiAoeCQwIDwgMG4pIHJldHVybiBFcnIoXCJGUFYuRVJSX0NBTk5PVF9TUVVBUkVfTkFHQVRJVkVcIik7XHJcbiAgICAgICAgICAgIGlmICh4JDAgPT09IDBuKSByZXR1cm4gRnB2KDBuLCBkZWNpbWFscyk7XHJcbiAgICAgICAgICAgIGxldCBvbmU6IGJpZ2ludCA9IDEwbiAqKiBkZWNpbWFscztcclxuICAgICAgICAgICAgb25lICo9IHgkMDtcclxuICAgICAgICAgICAgbGV0IHgkMTogYmlnaW50ID0gb25lO1xyXG4gICAgICAgICAgICBsZXQgeTogYmlnaW50O1xyXG4gICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICB5ID0geCQxO1xyXG4gICAgICAgICAgICAgICAgeCQxID0gKHkgKyBvbmUgLyB5KSAvIDJuOyBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB3aGlsZSh4JDEgIT09IHkpO1xyXG4gICAgICAgICAgICByZXR1cm4gRnB2KHgkMSwgZGVjaW1hbHMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gY3N0PFQxIGV4dGVuZHMgRGVjaW1hbHMsIFQyIGV4dGVuZHMgRGVjaW1hbHM+KHg6IGJpZ2ludCwgb2xkRGVjaW1hbHM6IFQxLCBuZXdEZWNpbWFsczogVDIpOiBSZXN1bHQ8RnB2PFQyPj47XHJcbiAgICAgICAgZnVuY3Rpb24gY3N0PFQxIGV4dGVuZHMgRGVjaW1hbHMsIFQyIGV4dGVuZHMgRGVjaW1hbHM+KHg6IEZwdjxUMT4sIG9sZERlY2ltYWxzOiBUMSwgbmV3RGVjaW1hbHM6IFQyKTogUmVzdWx0PEZwdjxUMj4+O1xyXG4gICAgICAgIGZ1bmN0aW9uIGNzdDxUMSBleHRlbmRzIERlY2ltYWxzLCBUMiBleHRlbmRzIERlY2ltYWxzPih4OiBDb21wYXRpYmxlPFQxPiwgb2xkRGVjaW1hbHM6IFQxLCBuZXdEZWNpbWFsczogVDIpOiBSZXN1bHQ8RnB2PFQyPj4ge1xyXG4gICAgICAgICAgICBpZiAob2xkRGVjaW1hbHMgPCAwbikgcmV0dXJuIEVycihcIkZQVi5FUlJfTkVHQVRJVkVfREVDSU1BTFNcIik7XHJcbiAgICAgICAgICAgIGlmIChuZXdEZWNpbWFscyA8IDBuKSByZXR1cm4gRXJyKFwiRlBWLkVSUl9ORUdBVElWRV9ERUNJTUFMU1wiKTtcclxuICAgICAgICAgICAgbGV0IHgkMDogYmlnaW50ID0gdW53cmFwKHgpO1xyXG4gICAgICAgICAgICBsZXQgc2NsOiBiaWdpbnQ7XHJcbiAgICAgICAgICAgIGlmIChuZXdEZWNpbWFscyA+IG9sZERlY2ltYWxzKSB7XHJcbiAgICAgICAgICAgICAgICBzY2wgPSAxMG4gKiogKG5ld0RlY2ltYWxzIC0gb2xkRGVjaW1hbHMgYXMgdW5rbm93biBhcyBiaWdpbnQpO1xyXG4gICAgICAgICAgICAgICAgeCQwICo9IHNjbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAobmV3RGVjaW1hbHMgPCBvbGREZWNpbWFscykge1xyXG4gICAgICAgICAgICAgICAgc2NsID0gMTBuICoqIChvbGREZWNpbWFscyAtIG5ld0RlY2ltYWxzIGFzIHVua25vd24gYXMgYmlnaW50KTtcclxuICAgICAgICAgICAgICAgIHgkMCAvPSBzY2w7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIE9rKEZwdih4JDAsIG5ld0RlY2ltYWxzKS5leHBlY3QoSU5URVJOQUxfRVJST1JfTUVTU0FHRSkpO1xyXG4gICAgICAgIH0zXHJcbiAgICB9KSgpO1xyXG59IiwgImltcG9ydCB7IHR5cGUgQ2xvc3VyZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyB0eXBlIFdyYXBwZXIgfSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgUmVmIHtcclxuICAgIGV4cG9ydCB0eXBlIFRhc2s8VDE+ID0gQ2xvc3VyZTxbbmV3OiBUMSwgb2xkOiBUMV0sIHZvaWQ+O1xyXG4gICAgXHJcbiAgICBleHBvcnQgdHlwZSBEZWxldGlvblRhc2sgPSBDbG9zdXJlPFtdLCB2b2lkPjtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgUmVmPFQxPiA9IFxyXG4gICAgJiBXcmFwcGVyPFQxPiBcclxuICAgICYge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIE11dGF0ZXMgdGhlIGludGVybmFsIHZhbHVlIG9mIHRoZSBgUmVmYCBpbnN0YW5jZS5cclxuICAgICAqL1xyXG4gICAgbXV0KHZhbHVlOiBUMSk6IFJlZjxUMT47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogUmVnaXN0ZXJzIGEgY2FsbGJhY2sgdGhhdCBpcyBpbnZva2VkIHdoZW5ldmVyIHRoZSB2YWx1ZSBjaGFuZ2VzLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZWY6IFJlZjxiaWdpbnQ+ID0gUmVmKDIwMG4pO1xyXG4gICAgICogIHJlZi5vbkNoYW5nZSh2YWx1ZSA9PiB7XHJcbiAgICAgKiAgICAgIC8vLyAuLi5cclxuICAgICAqICAgICAgcmV0dXJuO1xyXG4gICAgICogIH0pO1xyXG4gICAgICogIHJlZi5tdXQoNDA0bik7XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgb25DaGFuZ2UodGFzazogUmVmLlRhc2s8VDE+KTogUmVmLkRlbGV0aW9uVGFzaztcclxufTtcclxuXHJcbi8qKlxyXG4gKiAqKipCcmllZioqKlxyXG4gKiBXcmFwcGVyIHRoYXQgc3VwcG9ydHMgbXV0YXRpb24gYW5kIGNoYW5nZSB0cmFja2luZy5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBSZWY8VDE+KF92YWx1ZTogVDEpOiBSZWY8VDE+IHtcclxuICAgIGxldCBfdGhpczogUmVmPFQxPjtcclxuICAgIGxldCBfY291bnQ6IGJpZ2ludDtcclxuICAgIGxldCBfdGFza01hcDogTWFwPGJpZ2ludCwgUmVmLlRhc2s8VDE+PjtcclxuXHJcbiAgICAvKiogQGNvbnN0cnVjdG9yICovIHtcclxuICAgICAgICBfY291bnQgPSAwbjtcclxuICAgICAgICBfdGFza01hcCA9IG5ldyBNYXAoKTtcclxuICAgICAgICByZXR1cm4gX3RoaXMgPSB7IHVud3JhcCwgbXV0LCBvbkNoYW5nZSB9O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHVud3JhcCgpOiBUMSB7XHJcbiAgICAgICAgcmV0dXJuIF92YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtdXQodmFsdWU6IFQxKTogUmVmPFQxPiB7XHJcbiAgICAgICAgbGV0IG9sZFZhbHVlOiBUMSA9IHVud3JhcCgpO1xyXG4gICAgICAgIGxldCBuZXdWYWx1ZTogVDEgPSB2YWx1ZTtcclxuICAgICAgICBfdmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICBfdGFza01hcFxyXG4gICAgICAgICAgICAudmFsdWVzKClcclxuICAgICAgICAgICAgLnRvQXJyYXkoKVxyXG4gICAgICAgICAgICAuZm9yRWFjaCh0YXNrID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0YXNrKG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBvbkNoYW5nZSh0YXNrOiBSZWYuVGFzazxUMT4pOiBSZWYuRGVsZXRpb25UYXNrIHtcclxuICAgICAgICBsZXQga2V5OiBiaWdpbnQgPSBfbmV3S2V5KCk7XHJcbiAgICAgICAgX3Rhc2tNYXAuc2V0KGtleSwgdGFzayk7XHJcbiAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgX3Rhc2tNYXAuZGVsZXRlKGtleSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX25ld0tleSgpOiBiaWdpbnQge1xyXG4gICAgICAgIHJldHVybiBfY291bnQgKz0gMW47XHJcbiAgICB9XHJcbn0iLCAiaW1wb3J0IHsgRXJyb3IgfSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcbmV4cG9ydCB0eXBlIERvbUVycm9yID0gRXJyb3I8RG9tRXJyb3IuQ29kZT47XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gRG9tRXJyb3IoKTogRG9tRXJyb3I7XHJcbmV4cG9ydCBmdW5jdGlvbiBEb21FcnJvcihfbGVnYWN5OiBET01FeGNlcHRpb24pOiBEb21FcnJvcjtcclxuZXhwb3J0IGZ1bmN0aW9uIERvbUVycm9yKFxyXG4gICAgX3AwPzogRE9NRXhjZXB0aW9uXHJcbik6IERvbUVycm9yIHtcclxuICAgIHtcclxuICAgICAgICBsZXQgZTogRE9NRXhjZXB0aW9uIHwgdW5kZWZpbmVkID0gX3AwO1xyXG4gICAgICAgIGlmIChlKSByZXR1cm4gRXJyb3IoX21hdGNoKGUpLCBlLm1lc3NhZ2UpO1xyXG4gICAgICAgIHJldHVybiBFcnJvcihcIkRPTS5FUlJfVU5LTk9XTlwiKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfbWF0Y2goZTogRE9NRXhjZXB0aW9uKTogRG9tRXJyb3IuQ29kZSB7XHJcbiAgICAgICAgbGV0IGNvZGU6IERvbUVycm9yLkNvZGUgPSBcIkRPTS5FUlJfVU5LTk9XTlwiO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgZS5jb2RlID09PSAxXHJcbiAgICAgICAgICAgIHx8IGUuY29kZSA9PT0gM1xyXG4gICAgICAgICAgICB8fCBlLmNvZGUgPT09IDRcclxuICAgICAgICAgICAgfHwgZS5jb2RlID09PSA1XHJcbiAgICAgICAgICAgIHx8IGUuY29kZSA9PT0gN1xyXG4gICAgICAgICAgICB8fCBlLmNvZGUgPT09IDhcclxuICAgICAgICAgICAgfHwgZS5jb2RlID09PSA5XHJcbiAgICAgICAgICAgIHx8IGUuY29kZSA9PT0gMTFcclxuICAgICAgICAgICAgfHwgZS5jb2RlID09PSAxMlxyXG4gICAgICAgICAgICB8fCBlLmNvZGUgPT09IDEzXHJcbiAgICAgICAgICAgIHx8IGUuY29kZSA9PT0gMTRcclxuICAgICAgICAgICAgfHwgZS5jb2RlID09PSAxN1xyXG4gICAgICAgICAgICB8fCBlLmNvZGUgPT09IDE4XHJcbiAgICAgICAgICAgIHx8IGUuY29kZSA9PT0gMTlcclxuICAgICAgICAgICAgfHwgZS5jb2RlID09PSAyMFxyXG4gICAgICAgICAgICB8fCBlLmNvZGUgPT09IDIxXHJcbiAgICAgICAgICAgIHx8IGUuY29kZSA9PT0gMjJcclxuICAgICAgICAgICAgfHwgZS5jb2RlID09PSAyM1xyXG4gICAgICAgICAgICB8fCBlLmNvZGUgPT09IDI0XHJcbiAgICAgICAgICAgIHx8IGUuY29kZSA9PT0gMjVcclxuICAgICAgICApIGNvZGUgPSBEb21FcnJvci5FeGNlcHRpb24uQ29kZVJlbWFwW2UuY29kZV07XHJcbiAgICAgICAgZWxzZSBpZiAoXHJcbiAgICAgICAgICAgIGUubmFtZSA9PT0gXCJFbmNvZGluZ0Vycm9yXCJcclxuICAgICAgICAgICAgfHwgZS5uYW1lID09PSBcIk5vdFJlYWRhYmxlRXJyb3JcIlxyXG4gICAgICAgICAgICB8fCBlLm5hbWUgPT09IFwiVW5rbm93bkVycm9yXCJcclxuICAgICAgICAgICAgfHwgZS5uYW1lID09PSBcIkNvbnN0cmFpbnRFcnJvclwiXHJcbiAgICAgICAgICAgIHx8IGUubmFtZSA9PT0gXCJEYXRhRXJyb3JcIlxyXG4gICAgICAgICAgICB8fCBlLm5hbWUgPT09IFwiVHJhbnNhY3Rpb25JbmFjdGl2ZUVycm9yXCJcclxuICAgICAgICAgICAgfHwgZS5uYW1lID09PSBcIlJlYWRPbmx5RXJyb3JcIlxyXG4gICAgICAgICAgICB8fCBlLm5hbWUgPT09IFwiVmVyc2lvbkVycm9yXCJcclxuICAgICAgICAgICAgfHwgZS5uYW1lID09PSBcIk9wZXJhdGlvbkVycm9yXCJcclxuICAgICAgICAgICAgfHwgZS5uYW1lID09PSBcIk5vdEFsbG93ZWRFcnJvclwiXHJcbiAgICAgICAgKSBjb2RlID0gRG9tRXJyb3IuRXhjZXB0aW9uLk5hbWVSZW1hcFtlLm5hbWVdO1xyXG4gICAgICAgIHJldHVybiBjb2RlO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgbmFtZXNwYWNlIERvbUVycm9yIHtcclxuICAgIGV4cG9ydCB0eXBlIENvZGUgPVxyXG4gICAgICAgIHwgXCJET00uRVJSX0lOREVYX1NJWkVcIlxyXG4gICAgICAgIHwgXCJET00uRVJSX0hJRVJBUkNIWV9SRVFVRVNUXCJcclxuICAgICAgICB8IFwiRE9NLkVSUl9XUk9OR19ET0NVTUVOVFwiXHJcbiAgICAgICAgfCBcIkRPTS5FUlJfSU5WQUxJRF9DSEFSQUNURVJcIlxyXG4gICAgICAgIHwgXCJET00uRVJSX05PX01PRElGSUNBVElPTl9BTExPV0VEXCJcclxuICAgICAgICB8IFwiRE9NLkVSUl9OT1RfRk9VTkRcIlxyXG4gICAgICAgIHwgXCJET00uRVJSX05PVF9TVVBQT1JURURcIlxyXG4gICAgICAgIHwgXCJET00uRVJSX0lOVkFMSURfU1RBVEVcIlxyXG4gICAgICAgIHwgXCJET00uRVJSX0FUVFJJQlVURV9JTl9VU0VcIlxyXG4gICAgICAgIHwgXCJET00uRVJSX1NZTlRBWFwiXHJcbiAgICAgICAgfCBcIkRPTS5FUlJfSU5WQUxJRF9NT0RJRklDQVRJT05cIlxyXG4gICAgICAgIHwgXCJET00uRVJSX05BTUVTUEFDRVwiXHJcbiAgICAgICAgfCBcIkRPTS5FUlJfSU5WQUxJRF9BQ0NFU1NcIlxyXG4gICAgICAgIHwgXCJET00uRVJSX1RZUEVfTUlTTUFUQ0hcIlxyXG4gICAgICAgIHwgXCJET00uRVJSX1NFQ1VSSVRZXCJcclxuICAgICAgICB8IFwiRE9NLkVSUl9ORVRXT1JLXCJcclxuICAgICAgICB8IFwiRE9NLkVSUl9BQk9SVFwiXHJcbiAgICAgICAgfCBcIkRPTS5FUlJfVVJMX01JU01BVENIXCJcclxuICAgICAgICB8IFwiRE9NLkVSUl9RVU9UQV9FWENFRURFRFwiXHJcbiAgICAgICAgfCBcIkRPTS5FUlJfVElNRU9VVFwiXHJcbiAgICAgICAgfCBcIkRPTS5FUlJfSU5WQUxJRF9OT0RFX1RZUEVcIlxyXG4gICAgICAgIHwgXCJET00uRVJSX0RBVEFfQ0xPTkVcIlxyXG4gICAgICAgIHwgXCJET00uRVJSX0VOQ09ESU5HXCJcclxuICAgICAgICB8IFwiRE9NLkVSUl9OT1RfUkVBREFCTEVcIlxyXG4gICAgICAgIHwgXCJET00uRVJSX1VOS05PV05cIlxyXG4gICAgICAgIHwgXCJET00uRVJSX0NPTlNUUkFJTlRcIlxyXG4gICAgICAgIHwgXCJET00uRVJSX0RBVEFcIlxyXG4gICAgICAgIHwgXCJET00uRVJSX1RSQU5TQUNUSU9OX0lOQUNUSVZFXCJcclxuICAgICAgICB8IFwiRE9NLkVSUl9SRUFEX09OTFlcIlxyXG4gICAgICAgIHwgXCJET00uRVJSX1ZFUlNJT05cIlxyXG4gICAgICAgIHwgXCJET00uRVJSX09QRVJBVElPTlwiXHJcbiAgICAgICAgfCBcIkRPTS5FUlJfTk9UX0FMTE9XRURcIjtcclxuXHJcbiAgICBleHBvcnQgbmFtZXNwYWNlIEV4Y2VwdGlvbiB7XHJcbiAgICAgICAgZXhwb3J0IGNvbnN0IE5hbWVSZW1hcDogUmVjb3JkPE5hbWUsIERvbUVycm9yLkNvZGU+ID0ge1xyXG4gICAgICAgICAgICBcIkVuY29kaW5nRXJyb3JcIjogXCJET00uRVJSX0VOQ09ESU5HXCIsXHJcbiAgICAgICAgICAgIFwiTm90UmVhZGFibGVFcnJvclwiOiBcIkRPTS5FUlJfTk9UX1JFQURBQkxFXCIsXHJcbiAgICAgICAgICAgIFwiVW5rbm93bkVycm9yXCI6IFwiRE9NLkVSUl9VTktOT1dOXCIsXHJcbiAgICAgICAgICAgIFwiQ29uc3RyYWludEVycm9yXCI6IFwiRE9NLkVSUl9DT05TVFJBSU5UXCIsXHJcbiAgICAgICAgICAgIFwiRGF0YUVycm9yXCI6IFwiRE9NLkVSUl9EQVRBXCIsXHJcbiAgICAgICAgICAgIFwiVHJhbnNhY3Rpb25JbmFjdGl2ZUVycm9yXCI6IFwiRE9NLkVSUl9UUkFOU0FDVElPTl9JTkFDVElWRVwiLFxyXG4gICAgICAgICAgICBcIlJlYWRPbmx5RXJyb3JcIjogXCJET00uRVJSX1JFQURfT05MWVwiLFxyXG4gICAgICAgICAgICBcIlZlcnNpb25FcnJvclwiOiBcIkRPTS5FUlJfVkVSU0lPTlwiLFxyXG4gICAgICAgICAgICBcIk9wZXJhdGlvbkVycm9yXCI6IFwiRE9NLkVSUl9PUEVSQVRJT05cIixcclxuICAgICAgICAgICAgXCJOb3RBbGxvd2VkRXJyb3JcIjogXCJET00uRVJSX05PVF9BTExPV0VEXCJcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBleHBvcnQgY29uc3QgQ29kZVJlbWFwOiBSZWNvcmQ8Q29kZSwgRG9tRXJyb3IuQ29kZT4gPSB7XHJcbiAgICAgICAgICAgIDE6IFwiRE9NLkVSUl9JTkRFWF9TSVpFXCIsXHJcbiAgICAgICAgICAgIDM6IFwiRE9NLkVSUl9ISUVSQVJDSFlfUkVRVUVTVFwiLFxyXG4gICAgICAgICAgICA0OiBcIkRPTS5FUlJfV1JPTkdfRE9DVU1FTlRcIixcclxuICAgICAgICAgICAgNTogXCJET00uRVJSX0lOVkFMSURfQ0hBUkFDVEVSXCIsXHJcbiAgICAgICAgICAgIDc6IFwiRE9NLkVSUl9OT19NT0RJRklDQVRJT05fQUxMT1dFRFwiLFxyXG4gICAgICAgICAgICA4OiBcIkRPTS5FUlJfTk9UX0ZPVU5EXCIsXHJcbiAgICAgICAgICAgIDk6IFwiRE9NLkVSUl9OT1RfU1VQUE9SVEVEXCIsXHJcbiAgICAgICAgICAgIDExOiBcIkRPTS5FUlJfSU5WQUxJRF9TVEFURVwiLFxyXG4gICAgICAgICAgICAxMjogXCJET00uRVJSX1NZTlRBWFwiLFxyXG4gICAgICAgICAgICAxMzogXCJET00uRVJSX0lOVkFMSURfTU9ESUZJQ0FUSU9OXCIsXHJcbiAgICAgICAgICAgIDE0OiBcIkRPTS5FUlJfTkFNRVNQQUNFXCIsXHJcbiAgICAgICAgICAgIDE3OiBcIkRPTS5FUlJfVFlQRV9NSVNNQVRDSFwiLFxyXG4gICAgICAgICAgICAxODogXCJET00uRVJSX1NFQ1VSSVRZXCIsXHJcbiAgICAgICAgICAgIDE5OiBcIkRPTS5FUlJfTkVUV09SS1wiLFxyXG4gICAgICAgICAgICAyMDogXCJET00uRVJSX0FCT1JUXCIsXHJcbiAgICAgICAgICAgIDIxOiBcIkRPTS5FUlJfVVJMX01JU01BVENIXCIsXHJcbiAgICAgICAgICAgIDIyOiBcIkRPTS5FUlJfUVVPVEFfRVhDRUVERURcIixcclxuICAgICAgICAgICAgMjM6IFwiRE9NLkVSUl9USU1FT1VUXCIsXHJcbiAgICAgICAgICAgIDI0OiBcIkRPTS5FUlJfSU5WQUxJRF9OT0RFX1RZUEVcIixcclxuICAgICAgICAgICAgMjU6IFwiRE9NLkVSUl9EQVRBX0NMT05FXCJcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBleHBvcnQgdHlwZSBOYW1lID1cclxuICAgICAgICAgICAgfCBcIkVuY29kaW5nRXJyb3JcIlxyXG4gICAgICAgICAgICB8IFwiTm90UmVhZGFibGVFcnJvclwiXHJcbiAgICAgICAgICAgIHwgXCJVbmtub3duRXJyb3JcIlxyXG4gICAgICAgICAgICB8IFwiQ29uc3RyYWludEVycm9yXCJcclxuICAgICAgICAgICAgfCBcIkRhdGFFcnJvclwiXHJcbiAgICAgICAgICAgIHwgXCJUcmFuc2FjdGlvbkluYWN0aXZlRXJyb3JcIlxyXG4gICAgICAgICAgICB8IFwiUmVhZE9ubHlFcnJvclwiXHJcbiAgICAgICAgICAgIHwgXCJWZXJzaW9uRXJyb3JcIlxyXG4gICAgICAgICAgICB8IFwiT3BlcmF0aW9uRXJyb3JcIlxyXG4gICAgICAgICAgICB8IFwiTm90QWxsb3dlZEVycm9yXCI7XHJcblxyXG4gICAgICAgIGV4cG9ydCB0eXBlIENvZGUgPVxyXG4gICAgICAgICAgICB8IDFcclxuICAgICAgICAgICAgfCAzXHJcbiAgICAgICAgICAgIHwgNFxyXG4gICAgICAgICAgICB8IDVcclxuICAgICAgICAgICAgfCA3XHJcbiAgICAgICAgICAgIHwgOFxyXG4gICAgICAgICAgICB8IDlcclxuICAgICAgICAgICAgfCAxMVxyXG4gICAgICAgICAgICB8IDEyXHJcbiAgICAgICAgICAgIHwgMTNcclxuICAgICAgICAgICAgfCAxNFxyXG4gICAgICAgICAgICB8IDE3XHJcbiAgICAgICAgICAgIHwgMThcclxuICAgICAgICAgICAgfCAxOVxyXG4gICAgICAgICAgICB8IDIwXHJcbiAgICAgICAgICAgIHwgMjFcclxuICAgICAgICAgICAgfCAyMlxyXG4gICAgICAgICAgICB8IDIzXHJcbiAgICAgICAgICAgIHwgMjRcclxuICAgICAgICAgICAgfCAyNTtcclxuICAgIH1cclxufSIsICJpbXBvcnQgdHlwZSB7IEFzeW5jQ2xvc3VyZSB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgdHlwZSB7IENsb3N1cmUgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHR5cGUgeyBGdW5jdGlvbiBhcyBGdW5jdGlvbjAgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHR5cGUgeyBXcmFwcGVyIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB0eXBlIHsgUmVjb3ZlcnlXcmFwcGVyIH0gZnJvbSBcIkByb290XCI7XHJcbmltcG9ydCB7IEJyYW5kZWQgfSBmcm9tIFwiQHJvb3RcIjtcclxuaW1wb3J0IHsgQnJhbmRlZFN0cnVjdCB9IGZyb20gXCJAcm9vdFwiO1xyXG5pbXBvcnQgeyBVbnNhZmUgfSBmcm9tIFwiQHJvb3RcIjtcclxuXHJcblxyXG50eXBlIEFycmF5JDA8VDE+ID0gQXJyYXk8VDE+O1xyXG5cclxudHlwZSBFcnJvciQwID0gUmV0dXJuVHlwZTxFcnJvckNvbnN0cnVjdG9yPjtcclxuXHJcbmNvbnN0IEVycm9yJDA6IEVycm9yQ29uc3RydWN0b3IgPSBnbG9iYWxUaGlzLkVycm9yO1xyXG5cclxuXHJcbmV4cG9ydCB0eXBlIEVycm9yPFQxIGV4dGVuZHMgc3RyaW5nLCBUMiA9IHVua25vd24+ID0gXHJcbiAgICAmIEJyYW5kZWRTdHJ1Y3Q8XCJFcnJvclwiPlxyXG4gICAgJiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogVGhlIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGlzIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBjb2RlOiBUMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBBIGh1bWFuLXJlYWRhYmxlIG1lc3NhZ2UgdGhhdCBleHBsYWlucyB0aGUgbmF0dXJlIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgbWVzc2FnZTogT3B0aW9uPHN0cmluZz47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogQW4gb3B0aW9uYWwgdmFsdWUgdGhhdCBjYW4gaG9sZCBhZGRpdGlvbmFsIGRhdGEgb3IgY29udGV4dCByZWxhdGVkIHRvIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcGF5bG9hZDogT3B0aW9uPFQyPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBUaGUgc3RhY2sgdHJhY2UgYXNzb2NpYXRlZCB3aXRoIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgc3RhY2s6IHN0cmluZztcclxufTtcclxuXHJcbi8qKlxyXG4gKiAqKipCcmllZioqKlxyXG4gKiBBIGN1c3RvbSBlcnJvciB3aXRoIGFuIG9wdGlvbmFsIG1lc3NhZ2UgYW5kIHBheWxvYWQgZm9yIHN0cm9uZ2x5LXR5cGVkIGVycm9ycy5cclxuICogXHJcbiAqICoqKk5vdGUqKipcclxuICogVGhpcyBpcyBhIGdlbmVyYWwtcHVycG9zZSBlcnJvciBzdHJ1Y3R1cmUgdG8gbWFuYWdlIGRvbWFpbi1zcGVjaWZpYyBlcnJvciBjb2RlcyBhbmQgcHJvdmlkZSBiZXR0ZXIgY29udGV4dC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBFcnJvcjxUMSBleHRlbmRzIHN0cmluZywgVDIgPSB1bmtub3duPihfY29uZmlndXJhdGlvbjogRXJyb3IuQ29uZmlndXJhdGlvbjxUMSwgVDI+KTogRXJyb3I8VDEsIFQyPjtcclxuZXhwb3J0IGZ1bmN0aW9uIEVycm9yPFQxIGV4dGVuZHMgc3RyaW5nLCBUMiA9IHVua25vd24+KF9jb2RlOiBUMSwgX21lc3NhZ2U/OiBzdHJpbmcsIF9wYXlsb2FkPzogVDIpOiBFcnJvcjxUMSwgVDI+O1xyXG5leHBvcnQgZnVuY3Rpb24gRXJyb3I8VDEgZXh0ZW5kcyBzdHJpbmcsIFQyID0gdW5rbm93bj4oXHJcbiAgICBfcDA6IEVycm9yLkNvbmZpZ3VyYXRpb248VDEsIFQyPiB8IFQxLFxyXG4gICAgX3AxPzogc3RyaW5nLFxyXG4gICAgX3AyPzogVDJcclxuKTogRXJyb3I8VDEsIFQyPiB7XHJcbiAgICAvKiogQGNvbnN0cnVjdG9yICovIHtcclxuICAgICAgICBpZiAodHlwZW9mIF9wMCA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICBsZXQgY29uZmlndXJhdGlvbjogRXJyb3IuQ29uZmlndXJhdGlvbjxUMSwgVDI+ID0gX3AwO1xyXG4gICAgICAgICAgICBsZXQgaGFuZGxlcjogRXJyb3IuSGFuZGxlciA9IGZsYWcoY29uZmlndXJhdGlvbi5oYW5kbGVyKS51bndyYXBPcihFcnJvci5IYW5kbGVyKTtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwiRXJyb3JcIixcclxuICAgICAgICAgICAgICAgIGNvZGU6IGNvbmZpZ3VyYXRpb24uY29kZSxcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IE9wdGlvbi5IYW5kbGVyLmZsYWcoY29uZmlndXJhdGlvbi5tZXNzYWdlKSxcclxuICAgICAgICAgICAgICAgIHBheWxvYWQ6IE9wdGlvbi5IYW5kbGVyLmZsYWcoY29uZmlndXJhdGlvbi5wYXlsb2FkKSxcclxuICAgICAgICAgICAgICAgIHN0YWNrOiBPcHRpb24uSGFuZGxlci5mbGFnKGNvbmZpZ3VyYXRpb24uc3RhY2spLnVud3JhcE9yKGhhbmRsZXIubG9jYWxTdGFja1RyYWNlKEVycm9yKS51bndyYXBPcihcIlwiKSlcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdHlwZTogXCJFcnJvclwiLFxyXG4gICAgICAgICAgICBjb2RlOiBfcDAsXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6IE9wdGlvbi5IYW5kbGVyLmZsYWcoX3AxKSxcclxuICAgICAgICAgICAgcGF5bG9hZDogT3B0aW9uLkhhbmRsZXIuZmxhZyhfcDIpLFxyXG4gICAgICAgICAgICBzdGFjazogRXJyb3IuSGFuZGxlci5sb2NhbFN0YWNrVHJhY2UoRXJyb3IpLnVud3JhcE9yKFwiXCIpXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBFcnJvciB7XHJcbiAgICBleHBvcnQgdHlwZSBDb25maWd1cmF0aW9uPFQxIGV4dGVuZHMgc3RyaW5nLCBUMiA9IHVua25vd24+ID0ge1xyXG4gICAgICAgIGNvZGU6IFQxO1xyXG4gICAgICAgIG1lc3NhZ2U/OiBzdHJpbmc7XHJcbiAgICAgICAgcGF5bG9hZD86IFQyO1xyXG4gICAgICAgIHN0YWNrPzogc3RyaW5nO1xyXG4gICAgICAgIGhhbmRsZXI/OiBFcnJvci5IYW5kbGVyO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnQgdHlwZSBUYXNrPFQxIGV4dGVuZHMgc3RyaW5nLCBUMiA9IHVua25vd24+ID0gQ2xvc3VyZTxbZTogRXJyb3I8VDEsIFQyPl0sIHZvaWQ+O1xyXG5cclxuICAgIGV4cG9ydCB0eXBlIEhhbmRsZXIgPSB7XHJcbiAgICAgICAgbWF0Y2godW5rbm93bjogdW5rbm93bik6IHVua25vd24gaXMgRXJyb3I8YW55LCB1bmtub3duPjtcclxuICAgICAgICBtYXRjaCh1bmtub3duOiB1bmtub3duLCB0YXNrOiBUYXNrPGFueT4pOiB1bmtub3duIGlzIEVycm9yPGFueSwgdW5rbm93bj47XHJcbiAgICAgICAgbWF0Y2g8VDEgZXh0ZW5kcyBzdHJpbmc+KHVua25vd246IHVua25vd24sIGNvZGU6IFQxKTogdW5rbm93biBpcyBFcnJvcjxUMSwgdW5rbm93bj47XHJcbiAgICAgICAgbWF0Y2g8VDEgZXh0ZW5kcyBzdHJpbmc+KHVua25vd246IHVua25vd24sIGNvZGU6IFQxLCB0YXNrOiBUYXNrPFQxPik6IHVua25vd24gaXMgRXJyb3I8VDEsIHVua25vd24+O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICAgICAqIGBwYW5pY2AgdGhyb3dzIGFuIGVycm9yIHdpdGggb3B0aW9uYWwgbWVzc2FnZSBhbmQgc3RhY2sgdHJhY2UgbG9jYXRpb24uXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICAgICAqIGBgYHRzXHJcbiAgICAgICAgICogIHBhbmljKEVycm9yKFwiTUFUSC5FUlJfRElWSVNJT05fQllfWkVST1wiKSk7XHJcbiAgICAgICAgICogIHBhbmljKEVycm9yKHtcclxuICAgICAgICAgKiAgICAgIGNvZGU6IFwiTUFUSC5FUlJfRElWSVNJT05fQllfWkVST1wiLFxyXG4gICAgICAgICAqICAgICAgbWVzc2FnZTogU29tZShcIk1hdGg6IENhbm5vdCBkaXZpZGUgYnkgemVyby5cIiksXHJcbiAgICAgICAgICogICAgICBwYXlsb2FkOiBOb25lLFxyXG4gICAgICAgICAqICAgICAgc3RhY2s6IFN0YWNrVHJhY2UoLi4uKVxyXG4gICAgICAgICAqICB9KSk7XHJcbiAgICAgICAgICogIHBhbmljKFwiQW4gdW5yZWNvdmVyYWJsZSBlcnJvciBoYXMgb2NjdXJlZC5cIik7XHJcbiAgICAgICAgICogYGBgXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcGFuaWM8VDEgZXh0ZW5kcyBzdHJpbmc+KGU6IEVycm9yPFQxPiwgaGFuZGxlcj86IEhhbmRsZXIpOiBuZXZlcjtcclxuICAgICAgICBwYW5pYzxUMSBleHRlbmRzIHN0cmluZz4oY29kZTogVDEsIGF0PzogRnVuY3Rpb24sIGhhbmRsZXI/OiBIYW5kbGVyKTogbmV2ZXI7XHJcbiAgICAgICAgbG9jYWxTdGFja1RyYWNlKGF0OiBGdW5jdGlvbik6IE9wdGlvbjxzdHJpbmc+O1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnQgY29uc3QgSGFuZGxlcjogSGFuZGxlciA9ICgoKSA9PiB7XHJcbiAgICAgICAgbGV0IF90aGlzOiBIYW5kbGVyO1xyXG5cclxuICAgICAgICAvKiogQGNvbnN0cnVjdG9yICovIHtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzID0geyBtYXRjaCwgcGFuaWMsIGxvY2FsU3RhY2tUcmFjZSB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbWF0Y2godW5rbm93bjogdW5rbm93bik6IHVua25vd24gaXMgRXJyb3I8YW55LCB1bmtub3duPjtcclxuICAgICAgICBmdW5jdGlvbiBtYXRjaCh1bmtub3duOiB1bmtub3duLCB0YXNrOiBUYXNrPGFueT4pOiB1bmtub3duIGlzIEVycm9yPGFueSwgdW5rbm93bj47XHJcbiAgICAgICAgZnVuY3Rpb24gbWF0Y2g8VDEgZXh0ZW5kcyBzdHJpbmc+KHVua25vd246IHVua25vd24sIGNvZGU6IFQxKTogdW5rbm93biBpcyBFcnJvcjxUMSwgdW5rbm93bj47XHJcbiAgICAgICAgZnVuY3Rpb24gbWF0Y2g8VDEgZXh0ZW5kcyBzdHJpbmc+KHVua25vd246IHVua25vd24sIGNvZGU6IFQxLCB0YXNrOiBUYXNrPFQxPik6IHVua25vd24gaXMgRXJyb3I8VDEsIHVua25vd24+O1xyXG4gICAgICAgIGZ1bmN0aW9uIG1hdGNoPFQxIGV4dGVuZHMgc3RyaW5nPihcclxuICAgICAgICAgICAgcDA6IHVua25vd24sXHJcbiAgICAgICAgICAgIHAxPzogVDEgfCBDbG9zdXJlPFtlOiBFcnJvcjxUMSwgdW5rbm93bj5dLCB2b2lkPixcclxuICAgICAgICAgICAgcDI/OiBDbG9zdXJlPFtlOiBFcnJvcjxUMSwgdW5rbm93bj5dLCB2b2lkPlxyXG4gICAgICAgICk6IHAwIGlzIEVycm9yPFQxLCB1bmtub3duPiB7XHJcbiAgICAgICAgICAgIGxldCB1bmtub3duOiB1bmtub3duID0gcDA7XHJcbiAgICAgICAgICAgIGlmICghQnJhbmRlZFN0cnVjdC5IYW5kbGVyLm1hdGNoKHVua25vd24pKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcDEgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIGxldCBjb2RlOiBUMSA9IHAxO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFCcmFuZGVkU3RydWN0LkhhbmRsZXIubWF0Y2godW5rbm93biwgY29kZSkpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgdmFsdWU6IEVycm9yPFQxPiA9ICh1bmtub3duIGFzIEVycm9yPFQxPik7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcDEgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRhc2s6IFRhc2s8VDE+ID0gcDE7XHJcbiAgICAgICAgICAgICAgICB0YXNrKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcDIgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRhc2s6IFRhc2s8VDE+ID0gcDI7XHJcbiAgICAgICAgICAgICAgICB0YXNrKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcGFuaWM8VDEgZXh0ZW5kcyBzdHJpbmc+KGU6IEVycm9yPFQxPiwgaGFuZGxlcj86IEhhbmRsZXIpOiBuZXZlcjtcclxuICAgICAgICBmdW5jdGlvbiBwYW5pYzxUMSBleHRlbmRzIHN0cmluZz4oY29kZTogVDEsIGF0PzogRnVuY3Rpb24sIGhhbmRsZXI/OiBIYW5kbGVyKTogbmV2ZXI7XHJcbiAgICAgICAgZnVuY3Rpb24gcGFuaWM8VDEgZXh0ZW5kcyBzdHJpbmc+KFxyXG4gICAgICAgICAgICBwMDogRXJyb3I8VDE+IHwgVDEsXHJcbiAgICAgICAgICAgIHAxPzogSGFuZGxlciB8IEZ1bmN0aW9uLFxyXG4gICAgICAgICAgICBwMj86IEhhbmRsZXJcclxuICAgICAgICApOiBuZXZlciB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcDAgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgICAgIGxldCBlOiBFcnJvcjxUMT4gPSBwMDtcclxuICAgICAgICAgICAgICAgIGxldCBzaGFyZHM6IEFycmF5JDA8c3RyaW5nPiA9IGUuc3RhY2suc3BsaXQoXCJcXG5cIik7XHJcbiAgICAgICAgICAgICAgICBzaGFyZHMuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgIGUuc3RhY2sgPSBzaGFyZHMuam9pbihcIlxcblwiKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHNoYXJkcywgXCJmZlwiKTtcclxuICAgICAgICAgICAgICAgIHRocm93IFwiXFx4MUJjXCIgKyBgJHsgZS5jb2RlIH06ICR7IGUubWVzc2FnZS51bndyYXBPcihcIlwiKSB9YCArIFwiXFxuXCIgKyBgJHsgZS5zdGFjayB9YDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgY29kZTogVDEgPSBwMDtcclxuICAgICAgICAgICAgbGV0IGF0OiBGdW5jdGlvbiA9IGZsYWcoKHAxIGFzIEZ1bmN0aW9uIHwgdW5kZWZpbmVkKSkudW53cmFwT3IocGFuaWMpO1xyXG4gICAgICAgICAgICBsZXQgaGFuZGxlcjogSGFuZGxlciA9IGZsYWcocDIpLnVud3JhcE9yKF90aGlzKTtcclxuICAgICAgICAgICAgbGV0IHN0YWNrOiBzdHJpbmcgPSBoYW5kbGVyXHJcbiAgICAgICAgICAgICAgICAubG9jYWxTdGFja1RyYWNlKGF0KVxyXG4gICAgICAgICAgICAgICAgLnRvUmVzdWx0KE5vbmUpXHJcbiAgICAgICAgICAgICAgICAubWFwKHN0YWNrID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgc2hhcmRzOiBBcnJheSQwPHN0cmluZz4gPSBzdGFjay5zcGxpdChcIlxcblwiKTtcclxuICAgICAgICAgICAgICAgICAgICBzaGFyZHMuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2hhcmRzLmpvaW4oXCJcXG5cIik7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnJlY292ZXIoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIjw8PCA0MDQgPj4+XCI7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnVud3JhcCgpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRocm93IFwiXFx4MUJjXCIgKyBgXFx4MUJbMzFtJHsgY29kZSB9XFx4MUJbMG1gICsgXCJcXG5cIiArIGAkeyBzdGFjayB9YDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGxvY2FsU3RhY2tUcmFjZShsb2NhdGlvbjogRnVuY3Rpb24pOiBPcHRpb248c3RyaW5nPiB7XHJcbiAgICAgICAgICAgIGxldCBlOiBSZXR1cm5UeXBlPHR5cGVvZiBFcnJvciQwPiA9IEVycm9yJDAoKTtcclxuICAgICAgICAgICAgRXJyb3IkMC5jYXB0dXJlU3RhY2tUcmFjZShlLCBsb2NhdGlvbik7XHJcbiAgICAgICAgICAgIGlmIChlLnN0YWNrKSByZXR1cm4gU29tZShlLnN0YWNrKTtcclxuICAgICAgICAgICAgcmV0dXJuIE5vbmU7XHJcbiAgICAgICAgfVxyXG4gICAgfSkoKTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiAqKipCcmllZioqKlxyXG4gKiBBIHdyYXBwZXIgdGhhdCBlbmNhcHN1bGF0ZXMgZWl0aGVyIGEgc3VjY2Vzc2Z1bCBvdXRjb21lIGBPazxUMT5gIG9yIGEgZmFpbHVyZSBgRXJyPFQyPmAuXHJcbiAqIFxyXG4gKiAqKipFeGFtcGxlKioqXHJcbiAqIGBgYHRzXHJcbiAqICBmdW5jdGlvbiBmb28oKTogUmVzdWx0PDIwMG4sIDQwNG4+IHtcclxuICogICAgICBpZiAoKSByZXR1cm4gT2soMjAwbik7XHJcbiAqICAgICAgcmV0dXJuIEVycig0MDRuKTtcclxuICogIH1cclxuICogXHJcbiAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj4gPSBmb28oKTtcclxuICogIGlmIChyZXN1bHQub2soKSkge1xyXG4gKiAgICAgIGxldCB2YWx1ZTogMjAwbiA9IHJlc3VsdC51bmxvY2soKTtcclxuICogICAgICAvLy8gLi4uXHJcbiAqICB9XHJcbiAqIGBgYFxyXG4gKi9cclxuZXhwb3J0IHR5cGUgUmVzdWx0PFQxLCBUMj4gPSBPazxUMT4gfCBFcnI8VDI+O1xyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBSZXN1bHQge1xyXG4gICAgZXhwb3J0IHR5cGUgQXN5bmM8VDEsIFQyPiA9IFByb21pc2U8UmVzdWx0PFQxLCBUMj4+O1xyXG5cclxuICAgIGV4cG9ydCB0eXBlIEFycmF5PFQxLCBUMj4gPSBBcnJheSQwPFJlc3VsdDxUMSwgVDI+PjtcclxuXHJcbiAgICBleHBvcnQgdHlwZSBIYW5kbGVyID0ge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgICAgICogSXRlcmF0ZXMgdGhyb3VnaCBhbiBhcnJheSBvZiBgUmVzdWx0YCwgc2hvcnQtY2lyY3VpdGluZyBhdCB0aGUgZmlyc3QgYEVycmAuXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICAgICAqIGBgYHRzXHJcbiAgICAgICAgICogbGV0IHIwOiBSZXN1bHQ8MjAwbiwgNDA0bj47XHJcbiAgICAgICAgICogbGV0IHIxOiBSZXN1bHQ8MjAxbiwgNDA1bj47XHJcbiAgICAgICAgICogbGV0IHIyOiBSZXN1bHQ8MjAybiwgNDA2bj47XHJcbiAgICAgICAgICogbGV0IHI6IFJlc3VsdDxbMjAwbiwgMjAxbiwgMjAybl0sIDQwNG4gfCA0MDVuIHwgNDA2bj4gPSBSZXN1bHQuYWxsKFtyMCwgcjEsIHIyXSk7XHJcbiAgICAgICAgICogYGBgXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYWxsPFQxIGV4dGVuZHMgQXJyYXk8dW5rbm93biwgdW5rbm93bj4+KHJlc3VsdHM6IFQxKTogUmVzdWx0PE9rLlZhbEZyb21BbGw8VDE+LCBFcnIuVmFsRnJvbUFsbDxUMT5bbnVtYmVyXT47XHJcbiAgICAgICAgXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogKioqQnJpZWYqKipcclxuICAgICAgICAgKiBJdGVyYXRlcyB0aHJvdWdoIGFuIGFycmF5IG9mIGBSZXN1bHRgLCBzaG9ydC1jaXJjdWl0aW5nIGF0IHRoZSBmaXJzdCBgT2tgLlxyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAgICAgKiBgYGB0c1xyXG4gICAgICAgICAqICBsZXQgcjA6IFJlc3VsdDwyMDBuLCA0MDRuPjtcclxuICAgICAgICAgKiAgbGV0IHIxOiBSZXN1bHQ8MjAxbiwgNDA1bj47XHJcbiAgICAgICAgICogIGxldCByMjogUmVzdWx0PDIwMm4sIDQwNm4+O1xyXG4gICAgICAgICAqICBsZXQgcjogUmVzdWx0PDIwMG4gfCAyMDFuIHwgMjAybiwgWzQwNG4sIDQwNW4sIDQwNm5dPiA9IFJlc3VsdC5hbnkoW3IwLCByMSwgcjJdKTtcclxuICAgICAgICAgKiBgYGBcclxuICAgICAgICAgKi9cclxuICAgICAgICBhbnk8VDEgZXh0ZW5kcyBBcnJheTx1bmtub3duLCB1bmtub3duPj4ocmVzdWx0czogVDEpOiBSZXN1bHQ8T2suVmFsRnJvbUFsbDxUMT5bbnVtYmVyXSwgRXJyLlZhbEZyb21BbGw8VDE+PjtcclxuICAgICAgICBcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICAgICAqIFdyYXBzIGFuIHVuc2FmZSBvcGVyYXRpb24gdGhhdCBtaWdodCB0aHJvdyBhbiBlcnJvciBhbmQgcmV0dXJucyBhIGBSZXN1bHRgLlxyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAgICAgKiBgYGB0c1xyXG4gICAgICAgICAqICBhd2FpdCBSZXN1bHQud3JhcCgoKSA9PiB7XHJcbiAgICAgICAgICogICAgICAvLy8gU29tZSB1bnNhZmUgdGFzay5cclxuICAgICAgICAgKiAgICAgIC8vLyAuLi5cclxuICAgICAgICAgKiAgICAgIHJldHVybiAyMDBuO1xyXG4gICAgICAgICAqICB9KS5tYXBFcnIodW5zYWZlID0+IHtcclxuICAgICAgICAgKiAgICAgIHVuc2FmZVxyXG4gICAgICAgICAqICAgICAgICAgIC5wYXJzZSgodW5rbm93bik6IHVua25vd24gaXMgc3RyaW5nID0+IHtcclxuICAgICAgICAgKiAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB1bmtub3duIGlzIFwic3RyaW5nXCI7XHJcbiAgICAgICAgICogICAgICAgICAgfSlcclxuICAgICAgICAgKiAgICAgICAgICAubWFwKHN0cmluZyA9PiB7XHJcbiAgICAgICAgICogICAgICAgICAgICAgIC8vLyAuLi5cclxuICAgICAgICAgKiAgICAgICAgICB9KTtcclxuICAgICAgICAgKiAgICAgIHJldHVybiAyMDBuO1xyXG4gICAgICAgICAqICB9KTtcclxuICAgICAgICAgKiBgYGBcclxuICAgICAgICAgKi9cclxuICAgICAgICB3cmFwPFQxLCBUMiwgVDMgZXh0ZW5kcyBBcnJheSQwPFQyPj4odGFzazogQ2xvc3VyZTxUMywgVDE+LCAuLi5wYXlsb2FkOiBUMyk6IFJlc3VsdDxUMSwgVW5zYWZlPjtcclxuICAgICAgICBcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICAgICAqIFdyYXBzIGFuIGFzeW5jaHJvbm91cyB1bnNhZmUgb3BlcmF0aW9uIHRoYXQgbWF5IHRocm93IGFuZCByZXR1cm5zIGEgYFJlc3VsdGAuXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICAgICAqIGBgYHRzXHJcbiAgICAgICAgICogIGF3YWl0IFJlc3VsdC53cmFwQXN5bmMoYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAqICAgICAgLy8vIFNvbWUgdW5zYWZlIGFzeW5jIHRhc2suXHJcbiAgICAgICAgICogICAgICAvLy8gLi4uXHJcbiAgICAgICAgICogICAgICByZXR1cm4gMjAwbjtcclxuICAgICAgICAgKiAgfSkubWFwRXJyKHVuc2FmZSA9PiB7XHJcbiAgICAgICAgICogICAgICB1bnNhZmVcclxuICAgICAgICAgKiAgICAgICAgICAucGFyc2UoKHVua25vd24pOiB1bmtub3duIGlzIHN0cmluZyA9PiB7XHJcbiAgICAgICAgICogICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdW5rbm93biBpcyBcInN0cmluZ1wiO1xyXG4gICAgICAgICAqICAgICAgICAgIH0pXHJcbiAgICAgICAgICogICAgICAgICAgLm1hcChzdHJpbmcgPT4ge1xyXG4gICAgICAgICAqICAgICAgICAgICAgICAvLy8gLi4uXHJcbiAgICAgICAgICogICAgICAgICAgfSk7XHJcbiAgICAgICAgICogICAgICByZXR1cm4gMjAwbjtcclxuICAgICAgICAgKiAgfSk7XHJcbiAgICAgICAgICogYGBgXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgd3JhcEFzeW5jPFQxLCBUMiwgVDMgZXh0ZW5kcyBBcnJheSQwPFQyPj4odGFzazogQXN5bmNDbG9zdXJlPFQzLCBUMT4sIC4uLnBheWxvYWQ6IFQzKTogUHJvbWlzZTxSZXN1bHQ8VDEsIFVuc2FmZT4+O1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnQgY29uc3QgSGFuZGxlcjogSGFuZGxlciA9ICgoKSA9PiB7XHJcbiAgICAgICAgLyoqIEBjb25zdHJ1Y3RvciAqLyB7XHJcbiAgICAgICAgICAgIHJldHVybiB7IGFsbCwgYW55LCB3cmFwLCB3cmFwQXN5bmMgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGFsbDxUMSBleHRlbmRzIEFycmF5PHVua25vd24sIHVua25vd24+PihyZXN1bHRzOiBUMSk6IFJlc3VsdDxPay5WYWxGcm9tQWxsPFQxPiwgRXJyLlZhbEZyb21BbGw8VDE+W251bWJlcl0+IHtcclxuICAgICAgICAgICAgbGV0IG91dDogQXJyYXkkMDx1bmtub3duPiA9IFtdO1xyXG4gICAgICAgICAgICBsZXQgaTogbnVtYmVyID0gMDtcclxuICAgICAgICAgICAgd2hpbGUgKGkgPCByZXN1bHRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdDogUmVzdWx0PHVua25vd24sIHVua25vd24+ID0gcmVzdWx0cy5hdChpKSE7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0Lm9rKCkpIG91dC5wdXNoKHJlc3VsdC51bndyYXAoKSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIHJldHVybiByZXN1bHQgYXMgRXJyPEVyci5WYWxGcm9tQWxsPFQxPltudW1iZXJdPjtcclxuICAgICAgICAgICAgICAgIGkgKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIE9rKChvdXQgYXMgT2suVmFsRnJvbUFsbDxUMT4pKTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBmdW5jdGlvbiBhbnk8VDEgZXh0ZW5kcyBBcnJheTx1bmtub3duLCB1bmtub3duPj4ocmVzdWx0czogVDEpOiBSZXN1bHQ8T2suVmFsRnJvbUFsbDxUMT5bbnVtYmVyXSwgRXJyLlZhbEZyb21BbGw8VDE+PiB7XHJcbiAgICAgICAgICAgIGxldCBvdXQ6IEFycmF5JDA8dW5rbm93bj4gPSBbXTtcclxuICAgICAgICAgICAgbGV0IGk6IG51bWJlciA9IDA7XHJcbiAgICAgICAgICAgIHdoaWxlIChpIDwgcmVzdWx0cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGxldCB3cmFwcGVyOiBSZXN1bHQ8dW5rbm93biwgdW5rbm93bj4gPSByZXN1bHRzLmF0KGkpITtcclxuICAgICAgICAgICAgICAgIGlmICh3cmFwcGVyLm9rKCkpIHJldHVybiB3cmFwcGVyIGFzIE9rPE9rLlZhbEZyb21BbGw8VDE+W251bWJlcl0+O1xyXG4gICAgICAgICAgICAgICAgZWxzZSBvdXQucHVzaCh3cmFwcGVyLmluc3BlY3QoKSk7XHJcbiAgICAgICAgICAgICAgICBpICsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBFcnIoKG91dCBhcyBFcnIuVmFsRnJvbUFsbDxUMT4pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgZnVuY3Rpb24gd3JhcDxUMSwgVDIsIFQzIGV4dGVuZHMgQXJyYXkkMDxUMj4+KHRhc2s6IENsb3N1cmU8VDMsIFQxPiwgLi4ucGF5bG9hZDogVDMpOiBSZXN1bHQ8VDEsIFVuc2FmZT4ge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE9rKHRhc2soLi4ucGF5bG9hZCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gRXJyKFVuc2FmZShlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBhc3luYyBmdW5jdGlvbiB3cmFwQXN5bmM8VDEsIFQyLCBUMyBleHRlbmRzIEFycmF5JDA8VDI+Pih0YXNrOiBBc3luY0Nsb3N1cmU8VDMsIFQxPiwgLi4ucGF5bG9hZDogVDMpOiBQcm9taXNlPFJlc3VsdDxUMSwgVW5zYWZlPj4ge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE9rKChhd2FpdCB0YXNrKC4uLnBheWxvYWQpKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBFcnIoVW5zYWZlKGUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pKCk7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgdHlwZSBPazxUMT4gPSBcclxuICAgICYgV3JhcHBlcjxUMT5cclxuICAgICYge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIGBva2AgY2hlY2tzIGlmIHRoZSBjdXJyZW50IGluc3RhbmNlIGlzIGBPa2AuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+O1xyXG4gICAgICogIGlmIChyZXN1bHQub2soKSkge1xyXG4gICAgICogICAgICBsZXQgdmFsdWU6IDIwMG4gPSByZXN1bHQudW5sb2NrKCk7XHJcbiAgICAgKiAgICAgIC8vLyAuLi5cclxuICAgICAqICB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgb2soKTogdGhpcyBpcyBPazxUMT47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogYGVycmAgY2hlY2tzIGlmIHRoZSBjdXJyZW50IGluc3RhbmNlIGlzIGBFcnJgLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPjtcclxuICAgICAqICBpZiAocmVzdWx0LmVycigpKSB7XHJcbiAgICAgKiAgICAgIGxldCBlOiA0MDRuID0gcmVzdWx0Lmluc3BlY3QoKTtcclxuICAgICAqICAgICAgLy8vIC4uLlxyXG4gICAgICogIH1cclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBlcnIoKTogdGhpcyBpcyBFcnI8dW5rbm93bj47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogYGV4cGVjdGAgdGVybWluYXRlcyB3aXRoIGBwYW5pY2AgaWYgdGhlIGBSZXN1bHRgIGlzIGBFcnJgLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipXYXJuaW5nKioqXHJcbiAgICAgKiBSZXNlcnZlZCBmb3IgZGVidWdnaW5nIG9yIHVucmVjb3ZlcmFibGUgZXJyb3JzLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPjtcclxuICAgICAqICBsZXQgc3RhdHVzOiAyMDBuID0gcmVzdWx0LmV4cGVjdChcIlRoaXMgaXMgdW5leHBlY3RlZCBhbmQgdW5yZWNvdmVyYWJsZS5cIik7XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgZXhwZWN0KCk6IFQxO1xyXG4gICAgZXhwZWN0KF9fOiB1bmtub3duKTogVDE7XHJcbiAgICBleHBlY3QoX18/OiB1bmtub3duKTogVDE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogRW5zdXJlcyB0aGF0IHRoZSBgUmVzdWx0YCBpcyBhbiBgRXJyYCBhbmQgcmV0cmlldmVzIHRoZSBlcnJvciB2YWx1ZSBpbnNpZGUuXHJcbiAgICAgKiBcclxuICAgICAqICoqKldhcm5pbmcqKipcclxuICAgICAqIFJlc2VydmVkIGZvciBkZWJ1Z2dpbmcgb3IgdW5yZWNvdmVyYWJsZSBlcnJvcnMuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+O1xyXG4gICAgICogIGxldCBzdGF0dXM6IDQwNG4gPSByZXN1bHQuZXhwZWN0RXJyKFwiVGhpcyBpcyB1bmV4cGVjdGVkIGFuZCB1bnJlY292ZXJhYmxlLlwiKTtcclxuICAgICAqIGBgYFxyXG4gICAgKi9cclxuICAgIGV4cGVjdEVycigpOiBuZXZlcjtcclxuICAgIGV4cGVjdEVycihtZXNzYWdlOiBzdHJpbmcpOiBuZXZlcjtcclxuICAgIGV4cGVjdEVycihtZXNzYWdlPzogc3RyaW5nKTogbmV2ZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogUmV0cmlldmVzIHRoZSB2YWx1ZSBvZiBhbiBgT2tgLCBvciBmYWxscyBiYWNrIHRvIHRoZSBwcm92aWRlZCB2YWx1ZSBpZiBpdFx1MjAxOXMgYW4gYEVycmAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+ID0gRXJyKDQwNG4pO1xyXG4gICAgICogIGxldCBzdGF0dXM6IDIwMG4gPSByZXN1bHQudW53cmFwT3IoMjAwbik7XHJcbiAgICAgKiAgY29uc29sZS5sb2coc3RhdHVzKTsgLy8vIDIwMG4uXHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgdW53cmFwT3IoX186IHVua25vd24pOiBUMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBSZWNvdmVycyBmcm9tIHRoZSBjdXJyZW50IGVycm9yIGJ5IGFwcGx5aW5nIGEgcmVjb3ZlcnkgZnVuY3Rpb24sIHRyYW5zZm9ybWluZyB0aGUgYEVycmAgaW50byBhbiBgT2tgLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPiA9IEVycig0MDRuKTtcclxuICAgICAqICBsZXQgc3RhdHVzOiAyMDBuID0gcmVzdWx0XHJcbiAgICAgKiAgICAgIC5yZWNvdmVyKCgpID0+IHtcclxuICAgICAqICAgICAgICAgIHJldHVybiAyMDBuO1xyXG4gICAgICogICAgICB9KVxyXG4gICAgICogICAgICAudW5sb2NrKCk7XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgcmVjb3ZlcihfXzogdW5rbm93bik6IE9rPFQxPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBBcHBsaWVzIGEgdHJhbnNmb3JtYXRpb24gdG8gdGhlIGBPa2AgdmFsdWUgYW5kIHJldHVybnMgYW4gYEVycmAgaW5zdGFuY2Ugd2l0aCB0aGUgdHJhbnNmb3JtZWQgdmFsdWUuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+ID0gT2soMjAwbik7XHJcbiAgICAgKiAgbGV0IGU6IDQwNG4gPSByZXN1bHRcclxuICAgICAqICAgICAgLmRlZ3JhZGUoKCkgPT4ge1xyXG4gICAgICogICAgICAgICAgcmV0dXJuIDQwNG47XHJcbiAgICAgKiAgICAgIH0pXHJcbiAgICAgKiAgICAgIC5pbnNwZWN0KCk7XHJcbiAgICAgKiAgY29uc29sZS5sb2coZSk7IC8vLyA0MDRuLlxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIGRlZ3JhZGU8VDI+KHRhc2s6IEZ1bmN0aW9uMDxUMSwgVDI+KTogRXJyPFQyPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBDaGFpbnMgYW4gdGFzayB1bnRpbCB0aGUgZmlyc3QgYEVycmAgaXMgZW5jb3VudGVyZWQuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+ID0gRXJyKDQwNG4pO1xyXG4gICAgICogIHJlc3VsdFxyXG4gICAgICogICAgICAuYW5kKHZhbHVlID0+IHtcclxuICAgICAqICAgICAgICAgIC8vLyBUYXNrIGlzIHNraXBwZWQgYmVjYXVzZSBgUmVzdWx0YCBpcyBhbiBgRXJyYC5cclxuICAgICAqICAgICAgICAgIC8vLyAuLi5cclxuICAgICAqICAgICAgICAgIHJldHVybiBPayh2YWx1ZSArIDFuKTtcclxuICAgICAqICAgICAgfSlcclxuICAgICAqICAgICAgLmFuZCh2YWx1ZSA9PiB7XHJcbiAgICAgKiAgICAgICAgICAvLy8gVGFzayBpcyBza2lwcGVkIGJlY2F1c2UgYFJlc3VsdGAgaXMgYW4gYEVycmAuXHJcbiAgICAgKiAgICAgICAgICAvLy8gLi4uXHJcbiAgICAgKiAgICAgIH0pO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIGFuZDxUMj4odGFzazogQ2xvc3VyZTxbVDFdLCBPazxUMj4+KTogT2s8VDI+O1xyXG4gICAgYW5kPFQyPih0YXNrOiBDbG9zdXJlPFtUMV0sIEVycjxUMj4+KTogUmVzdWx0PFQxLCBUMj47XHJcbiAgICBhbmQ8VDIsIFQzPih0YXNrOiBDbG9zdXJlPFtUMV0sIFJlc3VsdDxUMiwgVDM+Pik6IFJlc3VsdDxUMiwgVDM+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIFRyYW5zZm9ybXMgdGhlIGBPa2AgdmFsdWUgaWYgcHJlc2VudCwgYnV0IGlmIHRoaXMgaXMgYWxyZWFkeSBhbiBgRXJyYCwgaXQgcmVtYWlucyB1bmNoYW5nZWQuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDA6IFJlc3VsdDwyMDBuLCA0MDRuPiA9IE9rKDIwMG4pO1xyXG4gICAgICogIGxldCByZXN1bHQxOiBSZXN1bHQ8MjAxbiwgNDA0bj4gPSByZXN1bHQubWFwKHZhbHVlID0+IHtcclxuICAgICAqICAgICAgLy8vIFRhc2sgaXMgcnVuIGJlY2F1c2UgYFJlc3VsdGAgaXMgYE9rYC5cclxuICAgICAqICAgICAgLy8vIC4uLlxyXG4gICAgICogICAgICByZXR1cm4gdmFsdWUgKyAxbjtcclxuICAgICAqICB9KTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBtYXA8VDI+KHRhc2s6IENsb3N1cmU8W1QxXSwgVDI+KTogT2s8VDI+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIFRyYW5zZm9ybXMgdGhlIGVycm9yIGNvbnRhaW5lZCBpbiB0aGUgYEVycmAgdXNpbmcgdGhlIHByb3ZpZGVkIGB0YXNrYCBmdW5jdGlvbi5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj4gPSBFcnIoNDA0bik7XHJcbiAgICAgKiAgcmVzdWx0XHJcbiAgICAgKiAgICAgIC5tYXBFcnIoZSA9PiB7XHJcbiAgICAgKiAgICAgICAgICByZXR1cm4gZSArIDFuO1xyXG4gICAgICogICAgICB9KVxyXG4gICAgICogICAgICAuaW5zcGVjdCgpOyAvLy8gNDA1bi5cclxuICAgICAqIGBgYFxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPiA9IE9rKDIwMG4pO1xyXG4gICAgICogIHJlc3VsdFxyXG4gICAgICogICAgICAubWFwRXJyKGUgPT4ge1xyXG4gICAgICogICAgICAgICAgLy8vIFRhc2sgaXMgcnVuIGJlY2F1c2UgYFJlc3VsdGAgaXMgYE9rYC5cclxuICAgICAqICAgICAgICAgIC8vLyAuLi5cclxuICAgICAqICAgICAgfSk7XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgbWFwRXJyKF9fOiB1bmtub3duKTogT2s8VDE+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIENvbnZlcnRzIGEgYFJlc3VsdDxUMSwgVDI+YCB0byBhbiBgT3B0aW9uPFQxPmAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+O1xyXG4gICAgICogIGxldCBvcHRpb246IE9wdGlvbjwyMDBuPiA9IHJlc3VsdC50b09wdGlvbigpO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIHRvT3B0aW9uKCk6IE9wdGlvbjxUMT47XHJcbn07XHJcblxyXG4vKipcclxuICogKioqQnJpZWYqKipcclxuICogVGhlIHN1Y2Nlc3NmdWwgdmFsdWUgd2l0aGluIGEgYFJlc3VsdGAuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gT2s8VDE+KF92YWx1ZTogVDEpOiBPazxUMT4ge1xyXG4gICAgbGV0IF90aGlzOiBPazxUMT47XHJcblxyXG4gICAgLyoqIEBjb25zdHJ1Y3RvciAqLyB7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzID0ge1xyXG4gICAgICAgICAgICBvayxcclxuICAgICAgICAgICAgZXJyLFxyXG4gICAgICAgICAgICBleHBlY3QsXHJcbiAgICAgICAgICAgIGV4cGVjdEVycixcclxuICAgICAgICAgICAgdW53cmFwLFxyXG4gICAgICAgICAgICB1bndyYXBPcixcclxuICAgICAgICAgICAgYW5kLFxyXG4gICAgICAgICAgICBtYXAsXHJcbiAgICAgICAgICAgIG1hcEVycixcclxuICAgICAgICAgICAgcmVjb3ZlcixcclxuICAgICAgICAgICAgZGVncmFkZSxcclxuICAgICAgICAgICAgdG9PcHRpb25cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG9rKCk6IHRoaXMgaXMgT2s8VDE+IHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBlcnIoKTogdGhpcyBpcyBFcnI8dW5rbm93bj4ge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZnVuY3Rpb24gZXhwZWN0KCk6IFQxO1xyXG4gICAgZnVuY3Rpb24gZXhwZWN0KF9fOiB1bmtub3duKTogVDE7XHJcbiAgICBmdW5jdGlvbiBleHBlY3QoX18/OiB1bmtub3duKTogVDEge1xyXG4gICAgICAgIHJldHVybiB1bndyYXAoKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBleHBlY3RFcnIoKTogbmV2ZXI7XHJcbiAgICBmdW5jdGlvbiBleHBlY3RFcnIobWVzc2FnZTogc3RyaW5nKTogbmV2ZXI7XHJcbiAgICBmdW5jdGlvbiBleHBlY3RFcnIobWVzc2FnZT86IHN0cmluZyk6IG5ldmVyIHtcclxuICAgICAgICBFcnJvci5IYW5kbGVyLnBhbmljKEVycm9yKFwiUEFOSUNcIiwgbWVzc2FnZSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHVud3JhcCgpOiBUMSB7XHJcbiAgICAgICAgcmV0dXJuIF92YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB1bndyYXBPcihfXzogdW5rbm93bik6IFQxIHtcclxuICAgICAgICByZXR1cm4gdW53cmFwKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYW5kPFQyPih0YXNrOiBDbG9zdXJlPFtUMV0sIE9rPFQyPj4pOiBPazxUMj47XHJcbiAgICBmdW5jdGlvbiBhbmQ8VDI+KHRhc2s6IENsb3N1cmU8W1QxXSwgRXJyPFQyPj4pOiBSZXN1bHQ8VDEsIFQyPjtcclxuICAgIGZ1bmN0aW9uIGFuZDxUMiwgVDM+KHRhc2s6IENsb3N1cmU8W1QxXSwgUmVzdWx0PFQyLCBUMz4+KTogUmVzdWx0PFQyLCBUMz47XHJcbiAgICBmdW5jdGlvbiBhbmQ8VDIsIFQzPih0YXNrOiBDbG9zdXJlPFtUMV0sIFJlc3VsdDxUMiwgVDM+Pik6IFJlc3VsdDxUMiwgVDM+IHtcclxuICAgICAgICByZXR1cm4gdGFzayh1bndyYXAoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbWFwPFQyPih0YXNrOiBDbG9zdXJlPFtUMV0sIFQyPik6IE9rPFQyPiB7XHJcbiAgICAgICAgcmV0dXJuIE9rKHRhc2sodW53cmFwKCkpKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtYXBFcnIoX186IHVua25vd24pOiBPazxUMT4ge1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZWNvdmVyKF9fOiB1bmtub3duKTogT2s8VDE+IHtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZGVncmFkZTxUMj4odGFzazogQ2xvc3VyZTxbVDFdLCBUMj4pOiBFcnI8VDI+IHtcclxuICAgICAgICByZXR1cm4gRXJyKHRhc2sodW53cmFwKCkpKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB0b09wdGlvbigpOiBPcHRpb248VDE+IHtcclxuICAgICAgICByZXR1cm4gU29tZSh1bndyYXAoKSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgT2sge1xyXG4gICAgZXhwb3J0IHR5cGUgRnJvbTxUMSBleHRlbmRzIFJlc3VsdDx1bmtub3duLCB1bmtub3duPj4gPSBUMSBleHRlbmRzIE9rPGluZmVyIFQyPiA/IE9rPFQyPiA6IG5ldmVyO1xyXG5cclxuICAgIGV4cG9ydCB0eXBlIEZyb21BbGw8VDEgZXh0ZW5kcyBBcnJheTxSZXN1bHQ8dW5rbm93biwgdW5rbm93bj4+PiA9IHtcclxuICAgICAgICBbVDIgaW4ga2V5b2YgVDFdOiBUMVtUMl0gZXh0ZW5kcyBPazx1bmtub3duPiA/IEZyb208VDFbVDJdPiA6IG5ldmVyO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnQgdHlwZSBWYWxGcm9tPFQxIGV4dGVuZHMgUmVzdWx0PHVua25vd24sIHVua25vd24+PiA9IFQxIGV4dGVuZHMgT2s8aW5mZXIgVDI+ID8gVDIgOiBuZXZlcjtcclxuXHJcbiAgICBleHBvcnQgdHlwZSBWYWxGcm9tQWxsPFQxIGV4dGVuZHMgQXJyYXk8UmVzdWx0PHVua25vd24sIHVua25vd24+Pj4gPSB7XHJcbiAgICAgICAgW1QyIGluIGtleW9mIFQxXTogVmFsRnJvbTxUMVtUMl0+O1xyXG4gICAgfTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCB0eXBlIEVycjxUMT4gPSBcclxuICAgICYgUmVjb3ZlcnlXcmFwcGVyPFQxPlxyXG4gICAgJiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogYG9rYCBjaGVja3MgaWYgdGhlIGN1cnJlbnQgaW5zdGFuY2UgaXMgYE9rYC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj47XHJcbiAgICAgKiAgaWYgKHJlc3VsdC5vaygpKSB7XHJcbiAgICAgKiAgICAgIGxldCB2YWx1ZTogMjAwbiA9IHJlc3VsdC51bmxvY2soKTtcclxuICAgICAqICAgICAgLy8vIC4uLlxyXG4gICAgICogIH1cclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBvaygpOiB0aGlzIGlzIE9rPHVua25vd24+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIGBlcnJgIGNoZWNrcyBpZiB0aGUgY3VycmVudCBpbnN0YW5jZSBpcyBgRXJyYC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj47XHJcbiAgICAgKiAgaWYgKHJlc3VsdC5lcnIoKSkge1xyXG4gICAgICogICAgICBsZXQgZTogNDA0biA9IHJlc3VsdC5pbnNwZWN0KCk7XHJcbiAgICAgKiAgICAgIC8vLyAuLi5cclxuICAgICAqICB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgZXJyKCk6IHRoaXMgaXMgRXJyPFQxPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIGVycm9yIHZhbHVlIGVuY2Fwc3VsYXRlZCBieSB0aGUgYEVycmAgaW5zdGFuY2UuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+O1xyXG4gICAgICogIGlmIChyZXN1bHQuZXJyKCkpIHtcclxuICAgICAqICAgICAgbGV0IGU6IDQwNG4gPSByZXN1bHQuaW5zcGVjdCgpO1xyXG4gICAgICogICAgICAvLy8gLi4uXHJcbiAgICAgKiAgfVxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIGluc3BlY3QoKTogVDE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogUmV0cmlldmVzIHRoZSBzdGFjayB0cmFjZSBvZiB0aGUgZXJyb3IsIGdlbmVyYXRlZCBhdCB0aGUgdGltZSB0aGUgYEVycmAgaW5zdGFuY2Ugd2FzIGNyZWF0ZWQuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+O1xyXG4gICAgICogIGlmIChyZXN1bHQuZXJyKCkpIHtcclxuICAgICAqICAgICAgcmVzdWx0XHJcbiAgICAgKiAgICAgICAgICAuc3RhY2soKVxyXG4gICAgICogICAgICAgICAgLmxpbmVzKClcclxuICAgICAqICAgICAgICAgIC5mb3JFYWNoKGxpbmUgPT4ge1xyXG4gICAgICogICAgICAgICAgICAgIGxldCBsaW5lUmVwcmVzZW50YXRpb246IHN0cmluZyA9IGxpbmUudG9TdHJpbmcoKTtcclxuICAgICAqICAgICAgICAgICAgICAvLy8gLi4uXHJcbiAgICAgKiAgICAgICAgICAgICAgcmV0dXJuOyBcclxuICAgICAqICAgICAgICAgIH0pO1xyXG4gICAgICogIH1cclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBzdGFjaygpOiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogYGV4cGVjdGAgdGVybWluYXRlcyB3aXRoIGBwYW5pY2AgaWYgdGhlIGBSZXN1bHRgIGlzIGBFcnJgLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipXYXJuaW5nKioqXHJcbiAgICAgKiBSZXNlcnZlZCBmb3IgZGVidWdnaW5nIG9yIHVucmVjb3ZlcmFibGUgZXJyb3JzLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPjtcclxuICAgICAqICBsZXQgc3RhdHVzOiAyMDBuID0gcmVzdWx0LmV4cGVjdChcIlRoaXMgaXMgdW5leHBlY3RlZCBhbmQgdW5yZWNvdmVyYWJsZS5cIik7XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgZXhwZWN0KCk6IG5ldmVyO1xyXG4gICAgZXhwZWN0KG1lc3NhZ2U6IHN0cmluZyk6IG5ldmVyO1xyXG4gICAgZXhwZWN0KG1lc3NhZ2U/OiBzdHJpbmcpOiBuZXZlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBFbnN1cmVzIHRoYXQgdGhlIGBSZXN1bHRgIGlzIGFuIGBFcnJgIGFuZCByZXRyaWV2ZXMgdGhlIGVycm9yIHZhbHVlIGluc2lkZS5cclxuICAgICAqIFxyXG4gICAgICogKioqV2FybmluZyoqKlxyXG4gICAgICogUmVzZXJ2ZWQgZm9yIGRlYnVnZ2luZyBvciB1bnJlY292ZXJhYmxlIGVycm9ycy5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj47XHJcbiAgICAgKiAgbGV0IHN0YXR1czogNDA0biA9IHJlc3VsdC5leHBlY3RFcnIoXCJUaGlzIGlzIHVuZXhwZWN0ZWQgYW5kIHVucmVjb3ZlcmFibGUuXCIpO1xyXG4gICAgICogYGBgXHJcbiAgICAqL1xyXG4gICAgZXhwZWN0RXJyKCk6IFQxO1xyXG4gICAgZXhwZWN0RXJyKF9fOiB1bmtub3duKTogVDE7XHJcbiAgICBleHBlY3RFcnIoX18/OiB1bmtub3duKTogVDE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogUmV0cmlldmVzIHRoZSB2YWx1ZSBvZiBhbiBgT2tgLCBvciBmYWxscyBiYWNrIHRvIHRoZSBwcm92aWRlZCB2YWx1ZSBpZiBpdFx1MjAxOXMgYW4gYEVycmAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+ID0gRXJyKDQwNG4pO1xyXG4gICAgICogIGxldCBzdGF0dXM6IDIwMG4gPSByZXN1bHQudW53cmFwT3IoMjAwbik7XHJcbiAgICAgKiAgY29uc29sZS5sb2coc3RhdHVzKTsgLy8vIDIwMG4uXHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgdW53cmFwT3I8VDI+KGZhbGxiYWNrOiBUMik6IFQyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIENoYWlucyBhbiB0YXNrIHVudGlsIHRoZSBmaXJzdCBgRXJyYCBpcyBlbmNvdW50ZXJlZC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj4gPSBFcnIoNDA0bik7XHJcbiAgICAgKiAgcmVzdWx0XHJcbiAgICAgKiAgICAgIC5hbmQodmFsdWUgPT4ge1xyXG4gICAgICogICAgICAgICAgLy8vIFRhc2sgaXMgc2tpcHBlZCBiZWNhdXNlIGBSZXN1bHRgIGlzIGFuIGBFcnJgLlxyXG4gICAgICogICAgICAgICAgLy8vIC4uLlxyXG4gICAgICogICAgICAgICAgcmV0dXJuIE9rKHZhbHVlICsgMW4pO1xyXG4gICAgICogICAgICB9KVxyXG4gICAgICogICAgICAuYW5kKHZhbHVlID0+IHtcclxuICAgICAqICAgICAgICAgIC8vLyBUYXNrIGlzIHNraXBwZWQgYmVjYXVzZSBgUmVzdWx0YCBpcyBhbiBgRXJyYC5cclxuICAgICAqICAgICAgICAgIC8vLyAuLi5cclxuICAgICAqICAgICAgfSk7XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgYW5kKF9fOiB1bmtub3duKTogRXJyPFQxPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBUcmFuc2Zvcm1zIHRoZSBgT2tgIHZhbHVlIGlmIHByZXNlbnQsIGJ1dCBpZiB0aGlzIGlzIGFscmVhZHkgYW4gYEVycmAsIGl0IHJlbWFpbnMgdW5jaGFuZ2VkLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCByZXN1bHQwOiBSZXN1bHQ8MjAwbiwgNDA0bj4gPSBPaygyMDBuKTtcclxuICAgICAqICBsZXQgcmVzdWx0MTogUmVzdWx0PDIwMW4sIDQwNG4+ID0gcmVzdWx0Lm1hcCh2YWx1ZSA9PiB7XHJcbiAgICAgKiAgICAgIC8vLyBUYXNrIGlzIHJ1biBiZWNhdXNlIGBSZXN1bHRgIGlzIGBPa2AuXHJcbiAgICAgKiAgICAgIC8vLyAuLi5cclxuICAgICAqICAgICAgcmV0dXJuIHZhbHVlICsgMW47XHJcbiAgICAgKiAgfSk7XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgbWFwKF9fOiB1bmtub3duKTogRXJyPFQxPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBUcmFuc2Zvcm1zIHRoZSBlcnJvciBjb250YWluZWQgaW4gdGhlIGBFcnJgIHVzaW5nIHRoZSBwcm92aWRlZCBgdGFza2AgZnVuY3Rpb24uXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+ID0gRXJyKDQwNG4pO1xyXG4gICAgICogIHJlc3VsdFxyXG4gICAgICogICAgICAubWFwRXJyKGUgPT4ge1xyXG4gICAgICogICAgICAgICAgcmV0dXJuIGUgKyAxbjtcclxuICAgICAqICAgICAgfSlcclxuICAgICAqICAgICAgLmluc3BlY3QoKTsgLy8vIDQwNW4uXHJcbiAgICAgKiBgYGBcclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgcmVzdWx0OiBSZXN1bHQ8MjAwbiwgNDA0bj4gPSBPaygyMDBuKTtcclxuICAgICAqICByZXN1bHRcclxuICAgICAqICAgICAgLm1hcEVycihlID0+IHtcclxuICAgICAqICAgICAgICAgIC8vLyBUYXNrIGlzIHJ1biBiZWNhdXNlIGBSZXN1bHRgIGlzIGBPa2AuXHJcbiAgICAgKiAgICAgICAgICAvLy8gLi4uXHJcbiAgICAgKiAgICAgIH0pO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIG1hcEVycjxUMj4odGFzazogQ2xvc3VyZTxbVDFdLCBUMj4pOiBFcnI8VDI+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIFJlY292ZXJzIGZyb20gdGhlIGN1cnJlbnQgZXJyb3IgYnkgYXBwbHlpbmcgYSByZWNvdmVyeSBmdW5jdGlvbiwgdHJhbnNmb3JtaW5nIHRoZSBgRXJyYCBpbnRvIGFuIGBPa2AuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+ID0gRXJyKDQwNG4pO1xyXG4gICAgICogIGxldCBzdGF0dXM6IDIwMG4gPSByZXN1bHRcclxuICAgICAqICAgICAgLnJlY292ZXIoKCkgPT4ge1xyXG4gICAgICogICAgICAgICAgcmV0dXJuIDIwMG47XHJcbiAgICAgKiAgICAgIH0pXHJcbiAgICAgKiAgICAgIC51bmxvY2soKTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICByZWNvdmVyPFQyPih0YXNrOiBDbG9zdXJlPFtUMV0sIFQyPik6IE9rPFQyPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBBcHBsaWVzIGEgdHJhbnNmb3JtYXRpb24gdG8gdGhlIGBPa2AgdmFsdWUgYW5kIHJldHVybnMgYW4gYEVycmAgaW5zdGFuY2Ugd2l0aCB0aGUgdHJhbnNmb3JtZWQgdmFsdWUuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+ID0gT2soMjAwbik7XHJcbiAgICAgKiAgbGV0IGU6IDQwNG4gPSByZXN1bHRcclxuICAgICAqICAgICAgLmRlZ3JhZGUoKCkgPT4ge1xyXG4gICAgICogICAgICAgICAgcmV0dXJuIDQwNG47XHJcbiAgICAgKiAgICAgIH0pXHJcbiAgICAgKiAgICAgIC5pbnNwZWN0KCk7XHJcbiAgICAgKiAgY29uc29sZS5sb2coZSk7IC8vLyA0MDRuLlxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIGRlZ3JhZGUoX186IHVua25vd24pOiBFcnI8VDE+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIENvbnZlcnRzIGEgYFJlc3VsdDxUMSwgVDI+YCB0byBhbiBgT3B0aW9uPFQxPmAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IHJlc3VsdDogUmVzdWx0PDIwMG4sIDQwNG4+O1xyXG4gICAgICogIGxldCBvcHRpb246IE9wdGlvbjwyMDBuPiA9IHJlc3VsdC50b09wdGlvbigpO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIHRvT3B0aW9uKCk6IE9wdGlvbjxuZXZlcj47XHJcbn07XHJcblxyXG4vKipcclxuICogKioqQnJpZWYqKipcclxuICogVGhlIGZhaWxlZCBzdGF0ZSBvZiBhIGBSZXN1bHRgLlxyXG4gKiBcclxuICogKioqV2FybmluZyoqKlxyXG4gKiBBbnkgb3BlcmF0aW9uIGF0dGVtcHRpbmcgdG8gYWNjZXNzIGEgYFJlc3VsdGAgbXVzdCBzYWZlbHkgaGFuZGxlIHRoZSBgRXJyYCBzdGF0ZSBvciB0ZXJtaW5hdGUgd2l0aCBhbiBlcnJvci5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBFcnI8VDE+KF92YWx1ZTogVDEpOiBFcnI8VDE+O1xyXG5leHBvcnQgZnVuY3Rpb24gRXJyPFQxPihfdmFsdWU6IFQxLCBfaGFuZGxlcjogRXJyb3IuSGFuZGxlcik6IEVycjxUMT47XHJcbmV4cG9ydCBmdW5jdGlvbiBFcnI8VDE+KFxyXG4gICAgX3AwOiBUMSxcclxuICAgIF9wMT86IEVycm9yLkhhbmRsZXJcclxuKTogRXJyPFQxPiB7XHJcbiAgICBsZXQgX3RoaXM6IEVycjxUMT47XHJcbiAgICBsZXQgX3N0YWNrOiBzdHJpbmc7XHJcbiAgICBsZXQgX3ZhbHVlOiBUMTtcclxuICAgIGxldCBfaGFuZGxlcjogRXJyb3IuSGFuZGxlcjtcclxuICAgIFxyXG4gICAgLyoqIEBjb25zdHJ1Y3RvciAqLyB7XHJcbiAgICAgICAgX3ZhbHVlID0gX3AwO1xyXG4gICAgICAgIF9oYW5kbGVyID0gX3AxID8/IEVycm9yLkhhbmRsZXI7XHJcbiAgICAgICAgX3N0YWNrID0gX2hhbmRsZXIubG9jYWxTdGFja1RyYWNlKEVycikudW53cmFwT3IoXCJcIik7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzID0ge1xyXG4gICAgICAgICAgICBvayxcclxuICAgICAgICAgICAgZXJyLFxyXG4gICAgICAgICAgICBpbnNwZWN0LFxyXG4gICAgICAgICAgICBzdGFjayxcclxuICAgICAgICAgICAgZXhwZWN0LFxyXG4gICAgICAgICAgICBleHBlY3RFcnIsXHJcbiAgICAgICAgICAgIHVud3JhcE9yLFxyXG4gICAgICAgICAgICBhbmQsXHJcbiAgICAgICAgICAgIG1hcCxcclxuICAgICAgICAgICAgbWFwRXJyLFxyXG4gICAgICAgICAgICByZWNvdmVyLFxyXG4gICAgICAgICAgICBkZWdyYWRlLFxyXG4gICAgICAgICAgICB0b09wdGlvblxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gb2soKTogdGhpcyBpcyBPazx1bmtub3duPiB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGVycigpOiB0aGlzIGlzIEVycjxUMT4ge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGluc3BlY3QoKTogVDEge1xyXG4gICAgICAgIHJldHVybiBfdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc3RhY2soKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gX3N0YWNrO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGV4cGVjdCgpOiBuZXZlcjtcclxuICAgIGZ1bmN0aW9uIGV4cGVjdChtZXNzYWdlOiBzdHJpbmcpOiBuZXZlcjtcclxuICAgIGZ1bmN0aW9uIGV4cGVjdChtZXNzYWdlPzogc3RyaW5nKTogbmV2ZXIge1xyXG4gICAgICAgIGxldCBlOiBUMSA9IGluc3BlY3QoKTtcclxuICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIEVycm9yJDApIHtcclxuICAgICAgICAgICAgbGV0IGNvZGU6IHN0cmluZyA9IGUubmFtZTtcclxuICAgICAgICAgICAgbGV0IG1lc3NhZ2UkMDogc3RyaW5nID0gZS5tZXNzYWdlXHJcbiAgICAgICAgICAgICAgICArIGBcXG4gICBDb250ZXh0YFxyXG4gICAgICAgICAgICAgICAgKyBgXFxuICAgJHsgbWVzc2FnZSB9YDtcclxuICAgICAgICAgICAgbGV0IHN0YWNrJDA6IHN0cmluZyA9IGUuc3RhY2sgPz8gc3RhY2soKTtcclxuICAgICAgICAgICAgRXJyb3IuSGFuZGxlci5wYW5pYyhFcnJvcih7XHJcbiAgICAgICAgICAgICAgICBjb2RlOiBjb2RlLFxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZSQwLFxyXG4gICAgICAgICAgICAgICAgc3RhY2s6IHN0YWNrJDBcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBFcnJvci5IYW5kbGVyLm1hdGNoKGluc3BlY3QoKSwgZSA9PiB7XHJcbiAgICAgICAgICAgIEVycm9yLkhhbmRsZXIucGFuaWMoRXJyb3Ioe1xyXG4gICAgICAgICAgICAgICAgY29kZTogZS5jb2RlLFxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogZS5tZXNzYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgKyBgXFxuICAgQ29udGV4dGBcclxuICAgICAgICAgICAgICAgICAgICArIGBcXG4gICAkeyBtZXNzYWdlIH1gLFxyXG4gICAgICAgICAgICAgICAgc3RhY2s6IGUuc3RhY2tcclxuICAgICAgICAgICAgfSkpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgRXJyb3IuSGFuZGxlci5wYW5pYyhFcnJvcih7XHJcbiAgICAgICAgICAgIGNvZGU6IFwiUEFOSUNcIixcclxuICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZSA/PyBcIkFuIHVuZXhwZWN0ZWQgYFJlc3VsdGAgaGFzIGNhdXNlZCB0aGUgcHJvZ3JhbSB0byBwYW5pYy5cIixcclxuICAgICAgICAgICAgc3RhY2s6IEVycm9yLkhhbmRsZXIubG9jYWxTdGFja1RyYWNlKGV4cGVjdCkudW53cmFwT3IoXCI8PDwgNDA0ID4+PlwiKVxyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBleHBlY3RFcnIoKTogVDE7XHJcbiAgICBmdW5jdGlvbiBleHBlY3RFcnIoX186IHVua25vd24pOiBUMTtcclxuICAgIGZ1bmN0aW9uIGV4cGVjdEVycihfXz86IHVua25vd24pOiBUMSB7XHJcbiAgICAgICAgcmV0dXJuIGluc3BlY3QoKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB1bndyYXBPcjxUMj4oZmFsbGJhY2s6IFQyKTogVDIge1xyXG4gICAgICAgIHJldHVybiBmYWxsYmFjaztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBhbmQoX186IHVua25vd24pOiBFcnI8VDE+IHtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbWFwKF9fOiB1bmtub3duKTogRXJyPFQxPiB7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG1hcEVycjxUMj4odGFzazogQ2xvc3VyZTxbVDFdLCBUMj4pOiBFcnI8VDI+IHtcclxuICAgICAgICByZXR1cm4gRXJyKHRhc2soaW5zcGVjdCgpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmVjb3ZlcjxUMj4odGFzazogQ2xvc3VyZTxbVDFdLCBUMj4pOiBPazxUMj4ge1xyXG4gICAgICAgIHJldHVybiBPayh0YXNrKGluc3BlY3QoKSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRlZ3JhZGUoX186IHVua25vd24pOiBFcnI8VDE+IHtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdG9PcHRpb24oKTogT3B0aW9uPG5ldmVyPiB7XHJcbiAgICAgICAgcmV0dXJuIE5vbmU7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgRXJyIHtcclxuICAgIGV4cG9ydCB0eXBlIEZyb208VDEgZXh0ZW5kcyBSZXN1bHQ8dW5rbm93biwgdW5rbm93bj4+ID0gVDEgZXh0ZW5kcyBFcnI8aW5mZXIgVDI+ID8gRXJyPFQyPiA6IG5ldmVyO1xyXG5cclxuICAgIGV4cG9ydCB0eXBlIEZyb21BbGw8VDEgZXh0ZW5kcyBBcnJheTxSZXN1bHQ8dW5rbm93biwgdW5rbm93bj4+PiA9IHtcclxuICAgICAgICBbVDIgaW4ga2V5b2YgVDFdOiBUMVtUMl0gZXh0ZW5kcyBFcnI8dW5rbm93bj4gPyBGcm9tPFQxW1QyXT4gOiBuZXZlclxyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnQgdHlwZSBWYWxGcm9tPFQxIGV4dGVuZHMgUmVzdWx0PHVua25vd24sIHVua25vd24+PiA9IFQxIGV4dGVuZHMgRXJyPGluZmVyIFQyPiA/IFQyIDogbmV2ZXI7XHJcblxyXG4gICAgZXhwb3J0IHR5cGUgVmFsRnJvbUFsbDxUMSBleHRlbmRzIEFycmF5PFJlc3VsdDx1bmtub3duLCB1bmtub3duPj4+ID0ge1xyXG4gICAgICAgIFtUMiBpbiBrZXlvZiBUMV06IFZhbEZyb208VDFbVDJdPjtcclxuICAgIH07XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogKioqQnJpZWYqKipcclxuICogQSB0eXBlIHRoYXQgcmVwcmVzZW50cyBhbiBvcHRpb25hbCB2YWx1ZSwgZW5jYXBzdWxhdGluZyBlaXRoZXIgYSB2YWx1ZSBgU29tZWAgXHJcbiAqIG9yIHRoZSBhYnNlbmNlIG9mIGEgdmFsdWUgYE5vbmVgLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgT3B0aW9uPFQxPiA9IFNvbWU8VDE+IHwgTm9uZTtcclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgT3B0aW9uIHtcclxuICAgIGV4cG9ydCB0eXBlIEFzeW5jPFQxPiA9IFByb21pc2U8T3B0aW9uPFQxPj47XHJcblxyXG4gICAgZXhwb3J0IHR5cGUgQXJyYXk8VDE+ID0gQXJyYXkkMDxPcHRpb248VDE+PjtcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBVdGlsaXR5IGNsYXNzIGZvciBoYW5kbGluZyB0YXNrcyB3aXRoaW4gYE9wdGlvbmAuXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCB0eXBlIEhhbmRsZXIgPSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogKioqQnJpZWYqKipcclxuICAgICAgICAgKiBXcmFwcyBhIHZhbHVlIGludG8gYW4gYE9wdGlvbmAsIHR1cm5pbmcgYG51bGxgIG9yIGB1bmRlZmluZWRgIHRvIGBOb25lYC5cclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgICAgICogYGBgdHNcclxuICAgICAgICAgKiAgbGV0IGZvbzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgICAqICBPcHRpb25cclxuICAgICAgICAgKiAgICAgIC5mbGFnKGZvbylcclxuICAgICAgICAgKiAgICAgIC5tYXAoZm9vID0+IHtcclxuICAgICAgICAgKiAgICAgICAgICAvLy8gLi4uXHJcbiAgICAgICAgICogICAgICB9KTtcclxuICAgICAgICAgKiBgYGBcclxuICAgICAgICAgKi9cclxuICAgICAgICBmbGFnPFQxPih2YWx1ZTogVDEgfCBudWxsIHwgdW5kZWZpbmVkKTogT3B0aW9uPFQxPjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogKioqQnJpZWYqKipcclxuICAgICAgICAgKiBJdGVyYXRlcyB0aHJvdWdoIGFuIGFycmF5IG9mIGBPcHRpb25gLCBzaG9ydC1jaXJjdWl0aW5nIGF0IHRoZSBmaXJzdCBgTm9uZWAuXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICAgICAqIGBgYHRzXHJcbiAgICAgICAgICogIGxldCBvMDogT3B0aW9uPDIwMG4+O1xyXG4gICAgICAgICAqICBsZXQgbzE6IE9wdGlvbjwyMDFuPjtcclxuICAgICAgICAgKiAgbGV0IG8yOiBPcHRpb248MjAybj47XHJcbiAgICAgICAgICogIGxldCBvOiBPcHRpb248WzIwMG4sIDIwMW4sIDIwMm5dPiA9IE9wdGlvbi5hbGwoW28wLCBvMSwgbzJdKTtcclxuICAgICAgICAgKiBgYGBcclxuICAgICAgICAgKi9cclxuICAgICAgICBhbGw8VDEgZXh0ZW5kcyBPcHRpb24uQXJyYXk8dW5rbm93bj4+KC4uLm9wdGlvbnM6IFQxKTogT3B0aW9uPFNvbWUuVmFsRnJvbUFsbDxUMT4+O1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgICAgICogSXRlcmF0ZXMgdGhyb3VnaCBhbiBhcnJheSBvZiBgT3B0aW9uYCwgc2hvcnQtY2lyY3VpdGluZyBhdCB0aGUgZmlyc3QgYFNvbWVgLlxyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAgICAgKiBgYGB0c1xyXG4gICAgICAgICAqICBsZXQgbzA6IE9wdGlvbjwyMDBuPjtcclxuICAgICAgICAgKiAgbGV0IG8xOiBPcHRpb248MjAxbj47XHJcbiAgICAgICAgICogIGxldCBvMjogT3B0aW9uPDIwMm4+O1xyXG4gICAgICAgICAqICBsZXQgbzogT3B0aW9uPDIwMG4gfCAyMDFuIHwgMjAybj4gPSBPcHRpb24uYW55KFtvMCwgbzEsIG8yXSk7XHJcbiAgICAgICAgICogYGBgXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYW55PFQxIGV4dGVuZHMgT3B0aW9uLkFycmF5PHVua25vd24+PiguLi5vcHRpb25zOiBUMSk6IE9wdGlvbjxTb21lLlZhbEZyb21BbGw8VDE+W251bWJlcl0+O1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnQgY29uc3QgSGFuZGxlcjogSGFuZGxlciA9ICgoKSA9PiB7XHJcbiAgICAgICAgeyByZXR1cm4geyBmbGFnLCBhbGwsIGFueSB9OyB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGZsYWc8VDE+KHZhbHVlOiBUMSB8IG51bGwgfCB1bmRlZmluZWQpOiBPcHRpb248VDE+IHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gTm9uZTtcclxuICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybiBOb25lO1xyXG4gICAgICAgICAgICByZXR1cm4gU29tZSgodmFsdWUgYXMgVDEpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGFsbDxUMSBleHRlbmRzIE9wdGlvbi5BcnJheTx1bmtub3duPj4oLi4ub3B0aW9uczogVDEpOiBPcHRpb248U29tZS5WYWxGcm9tQWxsPFQxPj4ge1xyXG4gICAgICAgICAgICBsZXQgb3V0OiBBcnJheSQwPHVua25vd24+ID0gW107XHJcbiAgICAgICAgICAgIGxldCBpOiBudW1iZXIgPSAwO1xyXG4gICAgICAgICAgICB3aGlsZSAoaSA8IG9wdGlvbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgb3B0aW9uOiBPcHRpb248dW5rbm93bj4gPSBvcHRpb25zLmF0KGkpITtcclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb24ubm9uZSgpKSByZXR1cm4gb3B0aW9uIGFzIE5vbmU7XHJcbiAgICAgICAgICAgICAgICBvdXQucHVzaChvcHRpb24udW53cmFwKCkpO1xyXG4gICAgICAgICAgICAgICAgaSArKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gU29tZShvdXQgYXMgU29tZS5WYWxGcm9tQWxsPFQxPik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBhbnk8VDEgZXh0ZW5kcyBPcHRpb24uQXJyYXk8dW5rbm93bj4+KC4uLm9wdGlvbnM6IFQxKTogT3B0aW9uPFNvbWUuVmFsRnJvbUFsbDxUMT5bbnVtYmVyXT4ge1xyXG4gICAgICAgICAgICBsZXQgaTogbnVtYmVyID0gMDtcclxuICAgICAgICAgICAgd2hpbGUgKGkgPCBvcHRpb25zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IG9wdGlvbjogT3B0aW9uPHVua25vd24+ID0gb3B0aW9ucy5hdChpKSE7XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uLnNvbWUoKSkgcmV0dXJuIG9wdGlvbiBhcyBTb21lPFNvbWUuVmFsRnJvbUFsbDxUMT5bbnVtYmVyXT47XHJcbiAgICAgICAgICAgICAgICBpICsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBOb25lO1xyXG4gICAgICAgIH1cclxuICAgIH0pKCk7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgdHlwZSBTb21lPFQxPiA9IFxyXG4gICAgJiBCcmFuZGVkPFwiU29tZVwiPlxyXG4gICAgJiBXcmFwcGVyPFQxPlxyXG4gICAgJiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogYHNvbWVgIGNoZWNrcyBpZiB0aGUgY3VycmVudCBpbnN0YW5jZSBpcyBgU29tZWAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IG9wdGlvbjogT3B0aW9uPDIwMG4+O1xyXG4gICAgICogIGlmIChvcHRpb24uc29tZSgpKSB7XHJcbiAgICAgKiAgICAgIGxldCB2YWx1ZTogMjAwbiA9IG9wdGlvbi51bmxvY2soKTtcclxuICAgICAqICAgICAgLy8vIC4uLlxyXG4gICAgICogIH1cclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBzb21lKCk6IHRoaXMgaXMgU29tZTxUMT47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogYG5vbmVgIGNoZWNrcyBpZiB0aGUgY3VycmVudCBpbnN0YW5jZSBpcyBgTm9uZWAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IG9wdGlvbjogT3B0aW9uPDIwMG4+O1xyXG4gICAgICogIGlmIChvcHRpb24ubm9uZSgpKSB7XHJcbiAgICAgKiAgICAgIC8vLyBgT3B0aW9uYCBjYW5ub3QgYHVubG9ja2AgYmVjYXVzZSBpdCBpcyBgTm9uZWAuXHJcbiAgICAgKiAgICAgIC8vLyAuLi5cclxuICAgICAqICB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgbm9uZSgpOiB0aGlzIGlzIE5vbmU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogYGV4cGVjdGAgdGVybWluYXRlcyB3aXRoIGBwYW5pY2AgaWYgdGhlIGBPcHRpb25gIGlzIGBOb25lYC5cclxuICAgICAqIFxyXG4gICAgICogKioqV2FybmluZyoqKlxyXG4gICAgICogUmVzZXJ2ZWQgZm9yIGRlYnVnZ2luZyBvciB1bnJlY292ZXJhYmxlIGVycm9ycy5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgb3B0aW9uOiBPcHRpb248MjAwbj47XHJcbiAgICAgKiAgbGV0IHN0YXR1czogMjAwbiA9IG9wdGlvbi5leHBlY3QoXCJUaGlzIGlzIHVuZXhwZWN0ZWQgYW5kIHVucmVjb3ZlcmFibGUuXCIpO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIGV4cGVjdChfXzogdW5rbm93bik6IFQxO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIFJldHJpZXZlcyB0aGUgdmFsdWUgb2YgYSBgU29tZWAsIG9yIGZhbGxzIGJhY2sgdG8gdGhlIHByb3ZpZGVkIHZhbHVlIGlmIGl0XHUyMDE5cyBgTm9uZWAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IG9wdGlvbjogT3B0aW9uPDIwMG4+ID0gTm9uZTtcclxuICAgICAqICBsZXQgc3RhdHVzOiAyMDBuID0gb3B0aW9uLnVud3JhcE9yKDIwMG4pO1xyXG4gICAgICogIGNvbnNvbGUubG9nKHN0YXR1cyk7IC8vLyAyMDBuLlxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIHVud3JhcE9yKF9fOiB1bmtub3duKTogVDE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogQ2hhaW5zIGFuIHRhc2sgdW50aWwgdGhlIGZpcnN0IGBOb25lYCBpcyBlbmNvdW50ZXJlZC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgb3B0aW9uOiBPcHRpb248MjAwbj4gPSBOb25lO1xyXG4gICAgICogIG9wdGlvblxyXG4gICAgICogICAgICAuYW5kKHZhbHVlID0+IHtcclxuICAgICAqICAgICAgICAgIC8vLyBUYXNrIGlzIHNraXBwZWQgYmVjYXVzZSBgT3B0aW9uYCBpcyBgTm9uZWAuXHJcbiAgICAgKiAgICAgICAgICAvLy8gLi4uXHJcbiAgICAgKiAgICAgICAgICByZXR1cm4gU29tZSh2YWx1ZSArIDFuKTtcclxuICAgICAqICAgICAgfSlcclxuICAgICAqICAgICAgLmFuZCh2YWx1ZSA9PiB7XHJcbiAgICAgKiAgICAgICAgICAvLy8gVGFzayBpcyBza2lwcGVkIGJlY2F1c2UgYE9wdGlvbmAgaXMgYE5vbmVgLlxyXG4gICAgICogICAgICAgICAgLy8vIC4uLlxyXG4gICAgICogICAgICB9KTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBhbmQ8VDI+KHRhc2s6IENsb3N1cmU8W1QxXSwgT3B0aW9uPFQyPj4pOiBPcHRpb248VDI+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIFRyYW5zZm9ybXMgdGhlIGBTb21lYCB2YWx1ZSBpZiBwcmVzZW50LCBidXQgaWYgdGhpcyBpcyBhbHJlYWR5IGFuIGBOb25lYCwgaXQgcmVtYWlucyB1bmNoYW5nZWQuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IG9wdGlvbjA6IE9wdGlvbjwyMDBuPiA9IFNvbWUoMjAwbik7XHJcbiAgICAgKiAgbGV0IG9wdGlvbjE6IE9wdGlvbjwyMDFuPiA9IG9wdGlvbi5tYXAodmFsdWUgPT4ge1xyXG4gICAgICogICAgICAvLy8gVGFzayBpcyBydW4gYmVjYXVzZSBgT3B0aW9uYCBpcyBgU29tZWAuXHJcbiAgICAgKiAgICAgIC8vLyAuLi5cclxuICAgICAqICAgICAgcmV0dXJuIHZhbHVlICsgMW47XHJcbiAgICAgKiAgfSk7XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgbWFwPFQyPih0YXNrOiBDbG9zdXJlPFtUMV0sIFQyPik6IFNvbWU8VDI+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIENvbnZlcnRzIGFuIGBPcHRpb248VDE+YCB0byBhIGBSZXN1bHQ8VDEsIFQyPmAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IG9wdGlvbjogT3B0aW9uPDIwMG4+O1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPiA9IG9wdGlvbi50b1Jlc3VsdCg0MDRuKTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICB0b1Jlc3VsdChfXzogdW5rbm93bik6IE9rPFQxPjtcclxufTtcclxuXHJcbi8qKlxyXG4gKiAqKipCcmllZioqKlxyXG4gKiBUaGUgdmFsdWUgd2l0aGluIGFuIGBPcHRpb25gLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIFNvbWU8VDE+KF92YWx1ZTogVDEpOiBTb21lPFQxPiB7XHJcbiAgICAvKiogQGNvbnN0cnVjdG9yICovIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0eXBlLFxyXG4gICAgICAgICAgICBzb21lLFxyXG4gICAgICAgICAgICBub25lLFxyXG4gICAgICAgICAgICBleHBlY3QsXHJcbiAgICAgICAgICAgIHVud3JhcCxcclxuICAgICAgICAgICAgdW53cmFwT3IsXHJcbiAgICAgICAgICAgIGFuZCxcclxuICAgICAgICAgICAgbWFwLFxyXG4gICAgICAgICAgICB0b1Jlc3VsdFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdHlwZSgpOiBcIlNvbWVcIiB7XHJcbiAgICAgICAgcmV0dXJuIFwiU29tZVwiO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNvbWUoKTogdGhpcyBpcyBTb21lPFQxPiB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbm9uZSgpOiB0aGlzIGlzIE5vbmUge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBleHBlY3QoX186IHVua25vd24pOiBUMSB7XHJcbiAgICAgICAgcmV0dXJuIF92YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB1bndyYXAoKTogVDEge1xyXG4gICAgICAgIHJldHVybiBfdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdW53cmFwT3IoX186IHVua25vd24pOiBUMSB7XHJcbiAgICAgICAgcmV0dXJuIF92YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBhbmQ8VDI+KHRhc2s6IENsb3N1cmU8W1QxXSwgT3B0aW9uPFQyPj4pOiBPcHRpb248VDI+IHtcclxuICAgICAgICByZXR1cm4gdGFzayhfdmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG1hcDxUMj4odGFzazogQ2xvc3VyZTxbVDFdLCBUMj4pOiBTb21lPFQyPiB7XHJcbiAgICAgICAgcmV0dXJuIFNvbWUodGFzayhfdmFsdWUpKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB0b1Jlc3VsdChfXzogdW5rbm93bik6IE9rPFQxPiB7XHJcbiAgICAgICAgcmV0dXJuIE9rKF92YWx1ZSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgU29tZSB7XHJcbiAgICBleHBvcnQgdHlwZSBGcm9tPFQxIGV4dGVuZHMgT3B0aW9uPHVua25vd24+PiA9IFQxIGV4dGVuZHMgU29tZTxpbmZlciBUMj4gPyBTb21lPFQyPiA6IG5ldmVyO1xyXG5cclxuICAgIGV4cG9ydCB0eXBlIEZyb21BbGw8VDEgZXh0ZW5kcyBBcnJheTxPcHRpb248dW5rbm93bj4+PiA9IHtcclxuICAgICAgICBbVDIgaW4ga2V5b2YgVDFdOiBUMVtUMl0gZXh0ZW5kcyBTb21lPHVua25vd24+ID8gRnJvbTxUMVtUMl0+IDogbmV2ZXJcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0IHR5cGUgVmFsRnJvbTxUMSBleHRlbmRzIE9wdGlvbjx1bmtub3duPj4gPSBUMSBleHRlbmRzIFNvbWU8aW5mZXIgVDI+ID8gVDIgOiBuZXZlcjtcclxuXHJcbiAgICBleHBvcnQgdHlwZSBWYWxGcm9tQWxsPFQxIGV4dGVuZHMgQXJyYXk8T3B0aW9uPHVua25vd24+Pj4gPSB7XHJcbiAgICAgICAgW1QyIGluIGtleW9mIFQxXTogVmFsRnJvbTxUMVtUMl0+O1xyXG4gICAgfTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCB0eXBlIE5vbmUgPSBcclxuICAgICYgQnJhbmRlZDxcIk5vbmVcIj5cclxuICAgICYge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIGBzb21lYCBjaGVja3MgaWYgdGhlIGN1cnJlbnQgaW5zdGFuY2UgaXMgYFNvbWVgLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCBvcHRpb246IE9wdGlvbjwyMDBuPjtcclxuICAgICAqICBpZiAob3B0aW9uLnNvbWUoKSkge1xyXG4gICAgICogICAgICBsZXQgdmFsdWU6IDIwMG4gPSBvcHRpb24udW5sb2NrKCk7XHJcbiAgICAgKiAgICAgIC8vLyAuLi5cclxuICAgICAqICB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgc29tZSgpOiB0aGlzIGlzIFNvbWU8dW5rbm93bj47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogYG5vbmVgIGNoZWNrcyBpZiB0aGUgY3VycmVudCBpbnN0YW5jZSBpcyBgTm9uZWAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IG9wdGlvbjogT3B0aW9uPDIwMG4+O1xyXG4gICAgICogIGlmIChvcHRpb24ubm9uZSgpKSB7XHJcbiAgICAgKiAgICAgIC8vLyBgT3B0aW9uYCBjYW5ub3QgYHVubG9ja2AgYmVjYXVzZSBpdCBpcyBgTm9uZWAuXHJcbiAgICAgKiAgICAgIC8vLyAuLi5cclxuICAgICAqICB9XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgbm9uZSgpOiB0aGlzIGlzIE5vbmU7XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIGBleHBlY3RgIHRlcm1pbmF0ZXMgd2l0aCBgcGFuaWNgIGlmIHRoZSBgT3B0aW9uYCBpcyBgTm9uZWAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKldhcm5pbmcqKipcclxuICAgICAqIFJlc2VydmVkIGZvciBkZWJ1Z2dpbmcgb3IgdW5yZWNvdmVyYWJsZSBlcnJvcnMuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IG9wdGlvbjogT3B0aW9uPDIwMG4+O1xyXG4gICAgICogIGxldCBzdGF0dXM6IDIwMG4gPSBvcHRpb24uZXhwZWN0KFwiVGhpcyBpcyB1bmV4cGVjdGVkIGFuZCB1bnJlY292ZXJhYmxlLlwiKTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBleHBlY3QobWVzc2FnZTogc3RyaW5nKTogbmV2ZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogUmV0cmlldmVzIHRoZSB2YWx1ZSBvZiBhIGBTb21lYCwgb3IgZmFsbHMgYmFjayB0byB0aGUgcHJvdmlkZWQgdmFsdWUgaWYgaXRcdTIwMTlzIGBOb25lYC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgb3B0aW9uOiBPcHRpb248MjAwbj4gPSBOb25lO1xyXG4gICAgICogIGxldCBzdGF0dXM6IDIwMG4gPSBvcHRpb24udW53cmFwT3IoMjAwbik7XHJcbiAgICAgKiAgY29uc29sZS5sb2coc3RhdHVzKTsgLy8vIDIwMG4uXHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgdW53cmFwT3I8VDI+KGZhbGxiYWNrOiBUMik6IFQyO1xyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqICoqKkJyaWVmKioqXHJcbiAgICAgKiBDaGFpbnMgYW4gdGFzayB1bnRpbCB0aGUgZmlyc3QgYE5vbmVgIGlzIGVuY291bnRlcmVkLlxyXG4gICAgICogXHJcbiAgICAgKiAqKipFeGFtcGxlKioqXHJcbiAgICAgKiBgYGB0c1xyXG4gICAgICogIGxldCBvcHRpb246IE9wdGlvbjwyMDBuPiA9IE5vbmU7XHJcbiAgICAgKiAgb3B0aW9uXHJcbiAgICAgKiAgICAgIC5hbmQodmFsdWUgPT4ge1xyXG4gICAgICogICAgICAgICAgLy8vIFRhc2sgaXMgc2tpcHBlZCBiZWNhdXNlIGBPcHRpb25gIGlzIGBOb25lYC5cclxuICAgICAqICAgICAgICAgIC8vLyAuLi5cclxuICAgICAqICAgICAgICAgIHJldHVybiBTb21lKHZhbHVlICsgMW4pO1xyXG4gICAgICogICAgICB9KVxyXG4gICAgICogICAgICAuYW5kKHZhbHVlID0+IHtcclxuICAgICAqICAgICAgICAgIC8vLyBUYXNrIGlzIHNraXBwZWQgYmVjYXVzZSBgT3B0aW9uYCBpcyBgTm9uZWAuXHJcbiAgICAgKiAgICAgICAgICAvLy8gLi4uXHJcbiAgICAgKiAgICAgIH0pO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIGFuZChfXzogdW5rbm93bik6IE5vbmU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKipCcmllZioqKlxyXG4gICAgICogVHJhbnNmb3JtcyB0aGUgYFNvbWVgIHZhbHVlIGlmIHByZXNlbnQsIGJ1dCBpZiB0aGlzIGlzIGFscmVhZHkgYW4gYE5vbmVgLCBpdCByZW1haW5zIHVuY2hhbmdlZC5cclxuICAgICAqIFxyXG4gICAgICogKioqRXhhbXBsZSoqKlxyXG4gICAgICogYGBgdHNcclxuICAgICAqICBsZXQgb3B0aW9uMDogT3B0aW9uPDIwMG4+ID0gU29tZSgyMDBuKTtcclxuICAgICAqICBsZXQgb3B0aW9uMTogT3B0aW9uPDIwMW4+ID0gb3B0aW9uLm1hcCh2YWx1ZSA9PiB7XHJcbiAgICAgKiAgICAgIC8vLyBUYXNrIGlzIHJ1biBiZWNhdXNlIGBPcHRpb25gIGlzIGBTb21lYC5cclxuICAgICAqICAgICAgLy8vIC4uLlxyXG4gICAgICogICAgICByZXR1cm4gdmFsdWUgKyAxbjtcclxuICAgICAqICB9KTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBtYXAoX186IHVua25vd24pOiBOb25lO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqQnJpZWYqKipcclxuICAgICAqIENvbnZlcnRzIGFuIGBPcHRpb248VDE+YCB0byBhIGBSZXN1bHQ8VDEsIFQyPmAuXHJcbiAgICAgKiBcclxuICAgICAqICoqKkV4YW1wbGUqKipcclxuICAgICAqIGBgYHRzXHJcbiAgICAgKiAgbGV0IG9wdGlvbjogT3B0aW9uPDIwMG4+O1xyXG4gICAgICogIGxldCByZXN1bHQ6IFJlc3VsdDwyMDBuLCA0MDRuPiA9IG9wdGlvbi50b1Jlc3VsdCg0MDRuKTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICB0b1Jlc3VsdDxUMT4oZTogVDEpOiBFcnI8VDE+O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqICoqKkJyaWVmKioqXHJcbiAqIFRoZSBhYnNlbmNlIG9mIGEgdmFsdWUgb3IgYW4gXCJlbXB0eVwiIHN0YXRlLlxyXG4gKiBcclxuICogKioqV2FybmluZyoqKlxyXG4gKiBBbnkgb3BlcmF0aW9uIGF0dGVtcHRpbmcgdG8gYWNjZXNzIGFuIGBPcHRpb25gIG11c3Qgc2FmZWx5IGhhbmRsZSB0aGUgYE5vbmVgIHN0YXRlIG9yIHRlcm1pbmF0ZSB3aXRoIGFuIGVycm9yLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IE5vbmU6IE5vbmUgPSAoKCkgPT4ge1xyXG4gICAgbGV0IF90aGlzOiBOb25lO1xyXG5cclxuICAgIC8qKiBAY29uc3RydWN0b3IgKi8ge1xyXG4gICAgICAgIHJldHVybiBfdGhpcyA9IHtcclxuICAgICAgICAgICAgdHlwZSxcclxuICAgICAgICAgICAgc29tZSxcclxuICAgICAgICAgICAgbm9uZSxcclxuICAgICAgICAgICAgZXhwZWN0LFxyXG4gICAgICAgICAgICB1bndyYXBPcixcclxuICAgICAgICAgICAgYW5kLFxyXG4gICAgICAgICAgICBtYXAsXHJcbiAgICAgICAgICAgIHRvUmVzdWx0XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB0eXBlKCk6IFwiTm9uZVwiIHtcclxuICAgICAgICByZXR1cm4gXCJOb25lXCI7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGZ1bmN0aW9uIHNvbWUoKTogdGhpcyBpcyBTb21lPHVua25vd24+IHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbm9uZSgpOiB0aGlzIGlzIE5vbmUge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGV4cGVjdChtZXNzYWdlOiBzdHJpbmcpOiBuZXZlciB7XHJcbiAgICAgICAgRXJyb3IuSGFuZGxlci5wYW5pYyhFcnJvcihcIkVSUl9WQUxVRV9SRVFVSVJFRFwiLCBtZXNzYWdlKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdW53cmFwT3I8VDE+KGZhbGxiYWNrOiBUMSk6IFQxIHtcclxuICAgICAgICByZXR1cm4gZmFsbGJhY2s7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYW5kKF9fOiB1bmtub3duKTogTm9uZSB7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG1hcChfXzogdW5rbm93bik6IE5vbmUge1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB0b1Jlc3VsdDxUMT4oZTogVDEpOiBFcnI8VDE+IHtcclxuICAgICAgICByZXR1cm4gRXJyKGUpO1xyXG4gICAgfVxyXG59KSgpO1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBmbGFnOiB0eXBlb2YgT3B0aW9uLkhhbmRsZXIuZmxhZyA9IE9wdGlvbi5IYW5kbGVyLmZsYWc7XHJcblxyXG5leHBvcnQgY29uc3QgYWxsTzogdHlwZW9mIE9wdGlvbi5IYW5kbGVyLmFsbCA9IE9wdGlvbi5IYW5kbGVyLmFsbDtcclxuXHJcbmV4cG9ydCBjb25zdCBhbnlPOiB0eXBlb2YgT3B0aW9uLkhhbmRsZXIuYW55ID0gT3B0aW9uLkhhbmRsZXIuYW55O1xyXG5cclxuZXhwb3J0IGNvbnN0IGFsbFIgPSBSZXN1bHQuSGFuZGxlci5hbGw7XHJcblxyXG5leHBvcnQgY29uc3QgYW55UiA9IFJlc3VsdC5IYW5kbGVyLmFueTtcclxuXHJcbmV4cG9ydCBjb25zdCB3cmFwID0gUmVzdWx0LkhhbmRsZXIud3JhcDtcclxuXHJcbmV4cG9ydCBjb25zdCB3cmFwQXN5bmMgPSBSZXN1bHQuSGFuZGxlci53cmFwQXN5bmM7IiwgImV4cG9ydCBjb25zdCBJTlRFUk5BTF9FUlJPUl9NRVNTQUdFOiBzdHJpbmcgPSBcIlwiXHJcbiAgICArIFwiXFxuXCIgKyBcIlVoLW9oLCBsb29rcyBsaWtlIFJlbGlxIHRvb2sgYSB3cm9uZyB0dXJuIVwiXHJcbiAgICArIFwiXFxuXCIgKyBcIkRvbid0IHdvcnJ5LCBpdCdzIG5vdCB5b3UtaXQncyB1cy5cIlxyXG4gICAgKyBcIlxcblwiICsgXCJQbGVhc2UgcmVwb3J0IHRoaXMgYXQgZHJlYW1jYXRjaGVyX2ZvdW5kYXRpb25AcHJvdG9uLm1lXCI7XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGVB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QUFBQSxNQUNBO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFFQSxXQUFTLE9BQWU7QUFDcEIsV0FBTztBQUFBLEVBQ1g7QUFFQSxXQUFTLE9BQThCO0FBQ25DLFdBQU87QUFBQSxFQUNYO0FBRUEsV0FBUyxPQUFxQjtBQUMxQixXQUFPO0FBQUEsRUFDWDtBQUVBLFdBQVMsT0FBTyxTQUF3QjtBQUNwQyxJQUFBRCxPQUFNLFFBQVEsTUFBTUEsT0FBTSxzQkFBc0IsT0FBTyxDQUFDO0FBQUEsRUFDNUQ7QUFFQSxXQUFTLFNBQWEsVUFBa0I7QUFDcEMsV0FBTztBQUFBLEVBQ1g7QUFFQSxXQUFTLElBQUksSUFBbUI7QUFDNUIsV0FBTztBQUFBLEVBQ1g7QUFFQSxXQUFTLElBQUksSUFBbUI7QUFDNUIsV0FBTztBQUFBLEVBQ1g7QUFFQSxXQUFTLFNBQWEsR0FBZ0I7QUFDbEMsV0FBTyxJQUFJLENBQUM7QUFBQSxFQUNoQjtBQUNKLEdBQUc7QUFHSSxJQUFNLE9BQW1DQyxRQUFPLFFBQVE7QUFFeEQsSUFBTSxPQUFrQ0EsUUFBTyxRQUFRO0FBRXZELElBQU0sT0FBa0NBLFFBQU8sUUFBUTtBQUV2RCxJQUFNLE9BQU8sT0FBTyxRQUFRO0FBRTVCLElBQU0sT0FBTyxPQUFPLFFBQVE7QUFFNUIsSUFBTSxPQUFPLE9BQU8sUUFBUTtBQUU1QixJQUFNLFlBQVksT0FBTyxRQUFROzs7QUN6N0NqQyxJQUFNLHlCQUFpQzsiLAogICJuYW1lcyI6IFsiRXJyb3IiLCAiT3B0aW9uIiwgIkJyYW5kZWRTdHJ1Y3QiLCAiQnJhbmRlZCIsICJGcHYiLCAiRXJyb3IiLCAiRG9tRXJyb3IiLCAiRXhjZXB0aW9uIiwgIkVycm9yIiwgIk9wdGlvbiIsICJzdGFjayIsICJSZXN1bHQiLCAid3JhcCIsICJ3cmFwQXN5bmMiLCAiZSIsICJmbGFnIl0KfQo=