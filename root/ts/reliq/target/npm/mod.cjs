"use strict";var n,r,t,e,o,u,a=Object.defineProperty,c=Object.getOwnPropertyDescriptor,l=Object.getOwnPropertyNames,i=Object.prototype.hasOwnProperty,f={};function p(n){if(null==n||"object"!=typeof n)return String(n);try{return JSON.stringify(n)}catch{}return"[object Object]"}function s(n){return k((()=>structuredClone(n))).mapErr((n=>n.parse((n=>null!=n&&"object"==typeof n&&"name"in n&&"code"in n&&"message"in n&&"string"==typeof n.name&&"number"==typeof n.code&&"string"==typeof n.message)).map((n=>D(n))).unwrapOr(D())))}function E(n){return{inspect:r,parse:function(n){return n(r())?w(r()):T}};function r(){return n}}function d(n,r,t,...e){let o,u;{o=new Map,u=0n;let c=0n;for(;c<t;){let r=a();o.set(r,n(...e)),c++}return function(...t){let e,u;return e=T,u=function(){let n=o.keys().toArray().at(0);return n?w(n):T}().toResult(void 0).map((n=>(e=w(n),R(function(n){let r=o.get(n);return o.delete(n),r}(n),{deAlloc:c})))).recover((()=>(e=w(a()),R(n(...t),{deAlloc:c})))).unwrap();function c(){return e.toResult(void 0).map((n=>{e=T,function(n,r){o.set(n,r)}(n,r(u.expect("Dyn: Could not deallocate resource but the key was available."+S)))})),u=O({deAlloc:c})}}}function a(){return u+=1n}}function R(n,r){return{...w(n),...r}}function O(n){return{...T,...n}}function m(n,r,t){return{decimals:e,x:o,y:u,distanceFrom:function(n){let r=n.x().sub(o()),t=n.y().sub(u());return r.mul(r).add(t.mul(t)).sqrt()}};function e(){return t}function o(){return y(y.Calculator.unwrap(n),e()).expect(S)}function u(){return y(y.Calculator.unwrap(r),e()).expect(S)}}function y(n,r){return t()<0n?A("FPV.ERR_NEGATIVE_DECIMALS"):N({unwrap:function(){return y.Calculator.unwrap(n)},decimals:t,representation:function(){return 10n**t()},eq:function(r){return y.Calculator.eq(n,r)},lt:function(r){return y.Calculator.lt(n,r)},gt:function(r){return y.Calculator.gt(n,r)},lteq:function(r){return y.Calculator.lteq(n,r)},gteq:function(r){return y.Calculator.gteq(n,r)},add:function(r){return y.Calculator.add(n,r,t()).expect(S)},sub:function(r){return y.Calculator.sub(n,r,t()).expect(S)},mul:function(r){return y.Calculator.mul(n,r,t()).expect(S)},div:function(r){return y.Calculator.div(n,r,t())},pow:function(r){return y.Calculator.pow(n,r,t())},sqrt:function(){return y.Calculator.sqrt(n,t())},cst:function(r){return y.Calculator.cst(n,t(),r)}});function t(){return r}}function _(n){let r,t,e;return t=0n,e=new Map,r={unwrap:o,mut:function(t){let u=o(),a=t;return n=t,e.values().toArray().forEach((n=>n(a,u))),r},onChange:function(n){let r=t+=1n;return e.set(r,n),()=>{e.delete(r)}}};function o(){return n}}function D(n){{let r=n;return r?g(function(n){let r="DOM.ERR_UNKNOWN";1===n.code||3===n.code||4===n.code||5===n.code||7===n.code||8===n.code||9===n.code||11===n.code||12===n.code||13===n.code||14===n.code||17===n.code||18===n.code||19===n.code||20===n.code||21===n.code||22===n.code||23===n.code||24===n.code||25===n.code?r=D.Exception.CodeRemap[n.code]:"EncodingError"!==n.name&&"NotReadableError"!==n.name&&"UnknownError"!==n.name&&"ConstraintError"!==n.name&&"DataError"!==n.name&&"TransactionInactiveError"!==n.name&&"ReadOnlyError"!==n.name&&"VersionError"!==n.name&&"OperationError"!==n.name&&"NotAllowedError"!==n.name||(r=D.Exception.NameRemap[n.name]);return r}(r),r.message):g("DOM.ERR_UNKNOWN")}}function g(n,r,t){if("object"==typeof n){let r=n,t=M(r.handler).unwrapOr(g.Handler);return{type:"Error",code:r.code,message:u.Handler.flag(r.message),payload:u.Handler.flag(r.payload),stack:u.Handler.flag(r.stack).unwrapOr(t.localStackTrace(g).unwrapOr(""))}}return{type:"Error",code:n,message:u.Handler.flag(r),payload:u.Handler.flag(t),stack:g.Handler.localStackTrace(g).unwrapOr("")}}function N(n){let r;return r={ok:function(){return!0},err:function(){return!1},expect:function(n){return t()},expectErr:function(n){g.Handler.panic(g("PANIC",n))},unwrap:t,unwrapOr:function(n){return t()},and:function(n){return n(t())},map:function(n){return N(n(t()))},mapErr:function(n){return r},recover:function(n){return r},degrade:function(n){return A(n(t()))},toOption:function(){return w(t())}};function t(){return n}}function A(n,r){let t,e,o,u;return o=n,u=r??g.Handler,e=u.localStackTrace(A).unwrapOr(""),t={ok:function(){return!1},err:function(){return!0},inspect:a,stack:c,expect:function n(r){let t=a();"string"==typeof t&&(t.includes(".")?t.split(".")?.at(1)?.startsWith("ERR")&&g.Handler.panic(t,n):t.startsWith("ERR")&&g.Handler.panic(t,n));"string"==typeof t&&t.includes(".")&&t.split(".")?.at(1)?.startsWith("ERR")&&g.Handler.panic(t,n);if(t instanceof globalThis.Error){let n=t.name,e=`${t.message} ${r?`${r}`:""}`,o=t.stack??c();g.Handler.panic(g({code:n,message:e,stack:o}))}g.Handler.match(a(),(n=>{g.Handler.panic(g({code:n.code,message:`${n.message} ${r?`${r}`:""}`,stack:n.stack}))})),g.Handler.panic(g({code:"PANIC",message:`${r||"An unrecoverable error has caused the program to panic."}`,stack:g.Handler.localStackTrace(n).unwrapOr("")}))},expectErr:function(n){return a()},unwrapOr:function(n){return n},and:function(n){return t},map:function(n){return t},mapErr:function(n){return A(n(a()))},recover:function(n){return N(n(a()))},degrade:function(n){return t},toOption:function(){return T}};function a(){return o}function c(){return e}}function w(n){return{type:function(){return"Some"},some:function(){return!0},none:function(){return!1},expect:function(r){return n},unwrap:function(){return n},unwrapOr:function(r){return n},and:function(r){return r(n)},map:function(r){return w(r(n))},toResult:function(r){return N(n)}}}((n,r)=>{for(var t in r)a(n,t,{get:r[t],enumerable:!0})})(f,{Alloc:()=>R,Branded:()=>t,BrandedStruct:()=>r,DeAlloc:()=>O,Dyn:()=>d,Err:()=>A,Error:()=>g,Fpv:()=>y,None:()=>T,Ok:()=>N,Option:()=>u,Ref:()=>_,Result:()=>o,Some:()=>w,Unsafe:()=>E,Vec:()=>m,allO:()=>C,allR:()=>h,anyO:()=>I,anyR:()=>H,clone:()=>s,flag:()=>M,toString:()=>p,wrap:()=>k,wrapAsync:()=>b}),module.exports=(n=f,((n,r,t,e)=>{if(r&&"object"==typeof r||"function"==typeof r)for(let o of l(r))i.call(n,o)||o===t||a(n,o,{get:()=>r[o],enumerable:!(e=c(r,o))||e.enumerable});return n})(a({},"__esModule",{value:!0}),n)),(r||(r={})).Handler=(()=>{return{match:function(r,t,e){let o=r;if(!n(o))return!1;if("string"==typeof t&&!n(o,t))return!1;let u=o;return"function"==typeof t?(t(u),!0):"function"!=typeof e||(e(u),!0)}};function n(n,r){let t=n;return null!=t&&"object"==typeof t&&"type"in t&&"string"==typeof t.type&&(!r||t.type===r)}})(),(t||(t={})).Handler=(()=>{return{match:function(r,t,e){let o=r;if(!n(o))return!1;if("string"==typeof t&&!n(o,t))return!1;let u=o;return"function"==typeof t?(t(u),!0):"function"!=typeof e||(e(u),!0)}};function n(n,r){let t=n;return null!=t&&"object"==typeof t&&"type"in t&&"function"==typeof t.type&&"string"==typeof t.type()&&(!r||t.type()===r)}})(),(e=y||(y={})).Calculator=(()=>{return{unwrap:n,eq:function(r,t){return n(r)===n(t)},lt:function(r,t){return n(r)<n(t)},gt:function(r,t){return n(r)>n(t)},lteq:function(r,t){return n(r)<=n(t)},gteq:function(r,t){return n(r)>=n(t)},add:function(r,t,o){return e(n(r)+n(t),o)},sub:function(r,t,o){return e(n(r)-n(t),o)},mul:function(r,t,o){let u=n(r),a=n(t),c=u*a;return e(0n===o?c:c/10n**o,o)},div:function(r,t,o){let u=n(r),a=n(t);return 0n===a?A("FPV.ERR_DIVISION_BY_ZERO"):N(0n===o?e(u/a,o).expect(S):e(u*10n**o/u,o).expect(S))},pow:function(t,o,u){let a=n(t),c=n(o);if(c<0n)return A("FPV.ERR_NEGATIVE_EXPONENT");let l=1n;for(;c>0n;)c%2n===1n&&(l=l*a/10n**u),a=a*a/10n**u,c/=2n;let i=r(l,0n,u);if(i.err())return i;let f=i.unwrap().unwrap();return e(f,u)},sqrt:function(r,t){let o=n(r);if(o<0n)return A("FPV.ERR_CANNOT_SQUARE_NAGATIVE");if(0n===o)return e(0n,t);let u=10n**t;u*=o;let a,c=u;do{a=c,c=(a+u/a)/2n}while(c!==a);return e(c,t)},cst:r};function n(n){return"bigint"==typeof n?n:n.unwrap()}function r(r,t,o){if(t<0n)return A("FPV.ERR_NEGATIVE_DECIMALS");if(o<0n)return A("FPV.ERR_NEGATIVE_DECIMALS");let u,a=n(r);return o>t&&(u=10n**(o-t),a*=u),o<t&&(u=10n**(t-o),a/=u),N(e(a,o).expect(S))}})(),(n=>{let r;var t;(t=r=n.Exception||(n.Exception={})).NameRemap={EncodingError:"DOM.ERR_ENCODING",NotReadableError:"DOM.ERR_NOT_READABLE",UnknownError:"DOM.ERR_UNKNOWN",ConstraintError:"DOM.ERR_CONSTRAINT",DataError:"DOM.ERR_DATA",TransactionInactiveError:"DOM.ERR_TRANSACTION_INACTIVE",ReadOnlyError:"DOM.ERR_READ_ONLY",VersionError:"DOM.ERR_VERSION",OperationError:"DOM.ERR_OPERATION",NotAllowedError:"DOM.ERR_NOT_ALLOWED"},t.CodeRemap={1:"DOM.ERR_INDEX_SIZE",3:"DOM.ERR_HIERARCHY_REQUEST",4:"DOM.ERR_WRONG_DOCUMENT",5:"DOM.ERR_INVALID_CHARACTER",7:"DOM.ERR_NO_MODIFICATION_ALLOWED",8:"DOM.ERR_NOT_FOUND",9:"DOM.ERR_NOT_SUPPORTED",11:"DOM.ERR_INVALID_STATE",12:"DOM.ERR_SYNTAX",13:"DOM.ERR_INVALID_MODIFICATION",14:"DOM.ERR_NAMESPACE",17:"DOM.ERR_TYPE_MISMATCH",18:"DOM.ERR_SECURITY",19:"DOM.ERR_NETWORK",20:"DOM.ERR_ABORT",21:"DOM.ERR_URL_MISMATCH",22:"DOM.ERR_QUOTA_EXCEEDED",23:"DOM.ERR_TIMEOUT",24:"DOM.ERR_INVALID_NODE_TYPE",25:"DOM.ERR_DATA_CLONE"}})(D||(D={})),(g||(g={})).Handler=(()=>{let n;return n={match:function(n,t,e){let o=n;if(!r.Handler.match(o))return!1;if("string"==typeof t){let n=t;if(!r.Handler.match(o,n))return!1}let u=o;return"function"==typeof t?(t(u),!0):"function"!=typeof e||(e(u),!0)},panic:function r(t,e,o){if("object"==typeof t){let n=t,r=n.stack.split("\n");throw r.shift(),n.stack=r.join("\n"),console.log(r,"ff"),`c[31m${n.code}: ${n.message.unwrapOr("")}[0m\n${n.stack}`}let u=t,a=M(e).unwrapOr(r),c=M(o).unwrapOr(n).localStackTrace(a).toResult(T).map((n=>{let r=n.split("\n");return r.shift(),r.join("\n")})).recover((()=>"<<< 404 >>>")).unwrap();throw`c[31m${u}[0m\n${c}`},localStackTrace:function(n){let r=globalThis.Error();return globalThis.Error.captureStackTrace(r,n),r.stack?w(r.stack):T}}})(),(o||(o={})).Handler={all:function(n){let r=[],t=0;for(;t<n.length;){let e=n.at(t);if(!e.ok())return e;r.push(e.unwrap()),t++}return N(r)},any:function(n){let r=[],t=0;for(;t<n.length;){let e=n.at(t);if(e.ok())return e;r.push(e.inspect()),t++}return A(r)},wrap:function(n,...r){try{return N(n(...r))}catch(n){return A(E(n))}},wrapAsync:async function(n,...r){try{return N(await n(...r))}catch(n){return A(E(n))}}},(u||(u={})).Handler={flag:function(n){return null==n?T:w(n)},all:function(...n){let r=[],t=0;for(;t<n.length;){let e=n.at(t);if(e.none())return e;r.push(e.unwrap()),t++}return w(r)},any:function(...n){let r=0;for(;r<n.length;){let t=n.at(r);if(t.some())return t;r++}return T}};var T=(()=>{let n;return n={type:function(){return"None"},some:function(){return!1},none:function(){return!0},expect:function n(r){g.Handler.panic(g({code:"PANIC",message:`${r||"A missing value has caused the program to panic."}`,stack:g.Handler.localStackTrace(n).unwrapOr("")}))},unwrapOr:function(n){return n},and:function(r){return n},map:function(r){return n},toResult:function(n){return A(n)}}})(),M=u.Handler.flag,C=u.Handler.all,I=u.Handler.any,h=o.Handler.all,H=o.Handler.any,k=o.Handler.wrap,b=o.Handler.wrapAsync,S="\nUh-oh, looks like Reliq took a wrong turn!\nDon't worry, it's not you-it's us.\nPlease report this at dreamcatcher_foundation@proton.me";//# sourceMappingURL=data:application/json;base64,