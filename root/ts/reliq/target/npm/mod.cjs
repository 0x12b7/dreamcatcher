"use strict";var n,t,r,e,o,u,a=Object.defineProperty,c=Object.getOwnPropertyDescriptor,l=Object.getOwnPropertyNames,i=Object.prototype.hasOwnProperty,f={};function p(n){if(null==n||"object"!=typeof n)return String(n);try{return JSON.stringify(n)}catch{}return"[object Object]"}function s(n){return k((()=>structuredClone(n))).mapErr((n=>n.parse((n=>null!=n&&"object"==typeof n&&"name"in n&&"code"in n&&"message"in n&&"string"==typeof n.name&&"number"==typeof n.code&&"string"==typeof n.message)).map((n=>D(n))).unwrapOr(D())))}function E(n){return{inspect:t,parse:function(n){return n(t())?w(t()):T}};function t(){return n}}function R(n,t,r,...e){let o,u;{o=new Map,u=0n;let c=0n;for(;c<r;){let t=a();o.set(t,n(...e)),c++}return function(...r){let e,u;return e=T,u=function(){let n=o.keys().toArray().at(0);return n?w(n):T}().toResult(void 0).map((n=>(e=w(n),d(function(n){let t=o.get(n);return o.delete(n),t}(n),{deAlloc:c})))).recover((()=>(e=w(a()),d(n(...r),{deAlloc:c})))).unwrap();function c(){return e.toResult(void 0).map((n=>{e=T,function(n,t){o.set(n,t)}(n,t(u.expect("Dyn: Could not deallocate resource but the key was available."+S)))})),u=O({deAlloc:c})}}}function a(){return u+=1n}}function d(n,t){return{...w(n),...t}}function O(n){return{...T,...n}}function m(n,t,r){return{decimals:e,x:o,y:u,distanceFrom:function(n){let t=n.x().sub(o()),r=n.y().sub(u());return t.mul(t).add(r.mul(r)).sqrt()}};function e(){return r}function o(){return y(y.Calculator.unwrap(n),e()).expect(S)}function u(){return y(y.Calculator.unwrap(t),e()).expect(S)}}function y(n,t){return r()<0n?A("FPV.ERR_NEGATIVE_DECIMALS"):g({unwrap:function(){return y.Calculator.unwrap(n)},decimals:r,representation:function(){return 10n**r()},eq:function(t){return y.Calculator.eq(n,t)},lt:function(t){return y.Calculator.lt(n,t)},gt:function(t){return y.Calculator.gt(n,t)},lteq:function(t){return y.Calculator.lteq(n,t)},gteq:function(t){return y.Calculator.gteq(n,t)},add:function(t){return y.Calculator.add(n,t,r()).expect(S)},sub:function(t){return y.Calculator.sub(n,t,r()).expect(S)},mul:function(t){return y.Calculator.mul(n,t,r()).expect(S)},div:function(t){return y.Calculator.div(n,t,r())},pow:function(t){return y.Calculator.pow(n,t,r())},sqrt:function(){return y.Calculator.sqrt(n,r())},cst:function(t){return y.Calculator.cst(n,r(),t)}});function r(){return t}}function _(n){let t,r,e;return r=0n,e=new Map,t={unwrap:o,mut:function(r){let u=o(),a=r;return n=r,e.values().toArray().forEach((n=>n(a,u))),t},onChange:function(n){let t=r+=1n;return e.set(t,n),()=>{e.delete(t)}}};function o(){return n}}function D(n){{let t=n;return t?N(function(n){let t="DOM.ERR_UNKNOWN";1===n.code||3===n.code||4===n.code||5===n.code||7===n.code||8===n.code||9===n.code||11===n.code||12===n.code||13===n.code||14===n.code||17===n.code||18===n.code||19===n.code||20===n.code||21===n.code||22===n.code||23===n.code||24===n.code||25===n.code?t=D.Exception.CodeRemap[n.code]:"EncodingError"!==n.name&&"NotReadableError"!==n.name&&"UnknownError"!==n.name&&"ConstraintError"!==n.name&&"DataError"!==n.name&&"TransactionInactiveError"!==n.name&&"ReadOnlyError"!==n.name&&"VersionError"!==n.name&&"OperationError"!==n.name&&"NotAllowedError"!==n.name||(t=D.Exception.NameRemap[n.name]);return t}(t),t.message):N("DOM.ERR_UNKNOWN")}}function N(n,t,r){if("object"==typeof n){let t=n,r=M(t.handler).unwrapOr(N.Handler);return{type:"Error",code:t.code,message:u.Handler.flag(t.message),payload:u.Handler.flag(t.payload),stack:u.Handler.flag(t.stack).unwrapOr(r.localStackTrace(N).unwrapOr(""))}}return{type:"Error",code:n,message:u.Handler.flag(t),payload:u.Handler.flag(r),stack:N.Handler.localStackTrace(N).unwrapOr("")}}function g(n){let t;return t={ok:function(){return!0},err:function(){return!1},expect:function(n){return r()},expectErr:function(n){N.Handler.panic(N("PANIC",n))},unwrap:r,unwrapOr:function(n){return r()},and:function(n){return n(r())},map:function(n){return g(n(r()))},mapErr:function(n){return t},recover:function(n){return t},degrade:function(n){return A(n(r()))},toOption:function(){return w(r())}};function r(){return n}}function A(n,t){let r,e,o,u;return o=n,u=t??N.Handler,e=u.localStackTrace(A).unwrapOr(""),r={ok:function(){return!1},err:function(){return!0},inspect:a,stack:c,expect:function n(t){let r=a();"string"==typeof r&&(r.includes(".")?r.split(".")?.at(1)?.startsWith("ERR")&&N.Handler.panic(r,n):r.startsWith("ERR")&&N.Handler.panic(r,n));"string"==typeof r&&r.includes(".")&&r.split(".")?.at(1)?.startsWith("ERR")&&N.Handler.panic(r,n);if(r instanceof globalThis.Error){let n=r.name,e=`${r.message} ${t?`${t}`:""}`,o=r.stack??c();N.Handler.panic(N({code:n,message:e,stack:o}))}N.Handler.match(a(),(n=>{N.Handler.panic(N({code:n.code,message:`${n.message} ${t?`${t}`:""}`,stack:n.stack}))})),N.Handler.panic(N({code:"PANIC",message:`${t||"An unexpected `Result` has caused the program to panic."}`,stack:N.Handler.localStackTrace(n).unwrapOr("<<< 404 >>>")}))},expectErr:function(n){return a()},unwrapOr:function(n){return n},and:function(n){return r},map:function(n){return r},mapErr:function(n){return A(n(a()))},recover:function(n){return g(n(a()))},degrade:function(n){return r},toOption:function(){return T}};function a(){return o}function c(){return e}}function w(n){return{type:function(){return"Some"},some:function(){return!0},none:function(){return!1},expect:function(t){return n},unwrap:function(){return n},unwrapOr:function(t){return n},and:function(t){return t(n)},map:function(t){return w(t(n))},toResult:function(t){return g(n)}}}((n,t)=>{for(var r in t)a(n,r,{get:t[r],enumerable:!0})})(f,{Alloc:()=>d,Branded:()=>r,BrandedStruct:()=>t,DeAlloc:()=>O,Dyn:()=>R,Err:()=>A,Error:()=>N,Fpv:()=>y,None:()=>T,Ok:()=>g,Option:()=>u,Ref:()=>_,Result:()=>o,Some:()=>w,Unsafe:()=>E,Vec:()=>m,allO:()=>C,allR:()=>h,anyO:()=>I,anyR:()=>H,clone:()=>s,flag:()=>M,toString:()=>p,wrap:()=>k,wrapAsync:()=>b}),module.exports=(n=f,((n,t,r,e)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let o of l(t))i.call(n,o)||o===r||a(n,o,{get:()=>t[o],enumerable:!(e=c(t,o))||e.enumerable});return n})(a({},"__esModule",{value:!0}),n)),(t||(t={})).Handler=(()=>{return{match:function(t,r,e){let o=t;if(!n(o))return!1;if("string"==typeof r&&!n(o,r))return!1;let u=o;return"function"==typeof r?(r(u),!0):"function"!=typeof e||(e(u),!0)}};function n(n,t){let r=n;return null!=r&&"object"==typeof r&&"type"in r&&"string"==typeof r.type&&(!t||r.type===t)}})(),(r||(r={})).Handler=(()=>{return{match:function(t,r,e){let o=t;if(!n(o))return!1;if("string"==typeof r&&!n(o,r))return!1;let u=o;return"function"==typeof r?(r(u),!0):"function"!=typeof e||(e(u),!0)}};function n(n,t){let r=n;return null!=r&&"object"==typeof r&&"type"in r&&"function"==typeof r.type&&"string"==typeof r.type()&&(!t||r.type()===t)}})(),(e=y||(y={})).Calculator=(()=>{return{unwrap:n,eq:function(t,r){return n(t)===n(r)},lt:function(t,r){return n(t)<n(r)},gt:function(t,r){return n(t)>n(r)},lteq:function(t,r){return n(t)<=n(r)},gteq:function(t,r){return n(t)>=n(r)},add:function(t,r,o){return e(n(t)+n(r),o)},sub:function(t,r,o){return e(n(t)-n(r),o)},mul:function(t,r,o){let u=n(t),a=n(r),c=u*a;return e(0n===o?c:c/10n**o,o)},div:function(t,r,o){let u=n(t),a=n(r);return 0n===a?A("FPV.ERR_DIVISION_BY_ZERO"):g(0n===o?e(u/a,o).expect(S):e(u*10n**o/u,o).expect(S))},pow:function(r,o,u){let a=n(r),c=n(o);if(c<0n)return A("FPV.ERR_NEGATIVE_EXPONENT");let l=1n;for(;c>0n;)c%2n===1n&&(l=l*a/10n**u),a=a*a/10n**u,c/=2n;let i=t(l,0n,u);if(i.err())return i;let f=i.unwrap().unwrap();return e(f,u)},sqrt:function(t,r){let o=n(t);if(o<0n)return A("FPV.ERR_CANNOT_SQUARE_NAGATIVE");if(0n===o)return e(0n,r);let u=10n**r;u*=o;let a,c=u;do{a=c,c=(a+u/a)/2n}while(c!==a);return e(c,r)},cst:t};function n(n){return"bigint"==typeof n?n:n.unwrap()}function t(t,r,o){if(r<0n)return A("FPV.ERR_NEGATIVE_DECIMALS");if(o<0n)return A("FPV.ERR_NEGATIVE_DECIMALS");let u,a=n(t);return o>r&&(u=10n**(o-r),a*=u),o<r&&(u=10n**(r-o),a/=u),g(e(a,o).expect(S))}})(),(n=>{let t;var r;(r=t=n.Exception||(n.Exception={})).NameRemap={EncodingError:"DOM.ERR_ENCODING",NotReadableError:"DOM.ERR_NOT_READABLE",UnknownError:"DOM.ERR_UNKNOWN",ConstraintError:"DOM.ERR_CONSTRAINT",DataError:"DOM.ERR_DATA",TransactionInactiveError:"DOM.ERR_TRANSACTION_INACTIVE",ReadOnlyError:"DOM.ERR_READ_ONLY",VersionError:"DOM.ERR_VERSION",OperationError:"DOM.ERR_OPERATION",NotAllowedError:"DOM.ERR_NOT_ALLOWED"},r.CodeRemap={1:"DOM.ERR_INDEX_SIZE",3:"DOM.ERR_HIERARCHY_REQUEST",4:"DOM.ERR_WRONG_DOCUMENT",5:"DOM.ERR_INVALID_CHARACTER",7:"DOM.ERR_NO_MODIFICATION_ALLOWED",8:"DOM.ERR_NOT_FOUND",9:"DOM.ERR_NOT_SUPPORTED",11:"DOM.ERR_INVALID_STATE",12:"DOM.ERR_SYNTAX",13:"DOM.ERR_INVALID_MODIFICATION",14:"DOM.ERR_NAMESPACE",17:"DOM.ERR_TYPE_MISMATCH",18:"DOM.ERR_SECURITY",19:"DOM.ERR_NETWORK",20:"DOM.ERR_ABORT",21:"DOM.ERR_URL_MISMATCH",22:"DOM.ERR_QUOTA_EXCEEDED",23:"DOM.ERR_TIMEOUT",24:"DOM.ERR_INVALID_NODE_TYPE",25:"DOM.ERR_DATA_CLONE"}})(D||(D={})),(N||(N={})).Handler=(()=>{let n;return n={match:function(n,r,e){let o=n;if(!t.Handler.match(o))return!1;if("string"==typeof r){let n=r;if(!t.Handler.match(o,n))return!1}let u=o;return"function"==typeof r?(r(u),!0):"function"!=typeof e||(e(u),!0)},panic:function t(r,e,o){if("object"==typeof r){let n=r,t=n.stack.split("\n");throw t.shift(),n.stack=t.join("\n"),console.log(t,"ff"),`c${n.code}: ${n.message.unwrapOr("")}\n${n.stack}`}let u=r,a=M(e).unwrapOr(t),c=M(o).unwrapOr(n).localStackTrace(a).toResult(T).map((n=>{let t=n.split("\n");return t.shift(),t.join("\n")})).recover((()=>"<<< 404 >>>")).unwrap();throw`c[31m${u}[0m\n${c}`},localStackTrace:function(n){let t=globalThis.Error();return globalThis.Error.captureStackTrace(t,n),t.stack?w(t.stack):T}}})(),(o||(o={})).Handler={all:function(n){let t=[],r=0;for(;r<n.length;){let e=n.at(r);if(!e.ok())return e;t.push(e.unwrap()),r++}return g(t)},any:function(n){let t=[],r=0;for(;r<n.length;){let e=n.at(r);if(e.ok())return e;t.push(e.inspect()),r++}return A(t)},wrap:function(n,...t){try{return g(n(...t))}catch(n){return A(E(n))}},wrapAsync:async function(n,...t){try{return g(await n(...t))}catch(n){return A(E(n))}}},(u||(u={})).Handler={flag:function(n){return null==n?T:w(n)},all:function(...n){let t=[],r=0;for(;r<n.length;){let e=n.at(r);if(e.none())return e;t.push(e.unwrap()),r++}return w(t)},any:function(...n){let t=0;for(;t<n.length;){let r=n.at(t);if(r.some())return r;t++}return T}};var T=(()=>{let n;return n={type:function(){return"None"},some:function(){return!1},none:function(){return!0},expect:function(n){N.Handler.panic(N("ERR_VALUE_REQUIRED",n))},unwrapOr:function(n){return n},and:function(t){return n},map:function(t){return n},toResult:function(n){return A(n)}}})(),M=u.Handler.flag,C=u.Handler.all,I=u.Handler.any,h=o.Handler.all,H=o.Handler.any,k=o.Handler.wrap,b=o.Handler.wrapAsync,S="\nUh-oh, looks like Reliq took a wrong turn!\nDon't worry, it's not you-it's us.\nPlease report this at dreamcatcher_foundation@proton.me";//# sourceMappingURL=data:application/json;base64,